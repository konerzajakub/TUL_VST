
Lil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006778  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08006938  08006938  00007938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f28  08006f28  000080b4  2**0
                  CONTENTS
  4 .ARM          00000008  08006f28  08006f28  00007f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f30  08006f30  000080b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f30  08006f30  00007f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f34  08006f34  00007f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08006f38  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  200000b4  08006fec  000080b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08006fec  0000846c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1ed  00000000  00000000  000080e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f71  00000000  00000000  000162d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00018248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000864  00000000  00000000  00018d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000299dd  00000000  00000000  00019584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5f7  00000000  00000000  00042f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff5c7  00000000  00000000  00050558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014fb1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031d0  00000000  00000000  0014fb64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00152d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006920 	.word	0x08006920

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000b8 	.word	0x200000b8
 80001fc:	08006920 	.word	0x08006920

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <HAL_UART_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Callback function for UART transmission complete
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  if (huart->Instance == LPUART1) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a05      	ldr	r2, [pc, #20]	@ (8000620 <HAL_UART_TxCpltCallback+0x24>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d102      	bne.n	8000614 <HAL_UART_TxCpltCallback+0x18>
    transmissionComplete = true;
 800060e:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <HAL_UART_TxCpltCallback+0x28>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
  }
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	40008000 	.word	0x40008000
 8000624:	20000220 	.word	0x20000220

08000628 <HAL_UART_RxCpltCallback>:

// Callback function for UART reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == LPUART1) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a1c      	ldr	r2, [pc, #112]	@ (80006a8 <HAL_UART_RxCpltCallback+0x80>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d131      	bne.n	800069e <HAL_UART_RxCpltCallback+0x76>
    // Echo received character
    HAL_UART_Transmit_IT(&hlpuart1, &uartRxChar, 1);
 800063a:	2201      	movs	r2, #1
 800063c:	491b      	ldr	r1, [pc, #108]	@ (80006ac <HAL_UART_RxCpltCallback+0x84>)
 800063e:	481c      	ldr	r0, [pc, #112]	@ (80006b0 <HAL_UART_RxCpltCallback+0x88>)
 8000640:	f003 fa54 	bl	8003aec <HAL_UART_Transmit_IT>

    // Process received character
    if (uartRxChar == '\r' || uartRxChar == '\n') {
 8000644:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <HAL_UART_RxCpltCallback+0x84>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b0d      	cmp	r3, #13
 800064a:	d003      	beq.n	8000654 <HAL_UART_RxCpltCallback+0x2c>
 800064c:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <HAL_UART_RxCpltCallback+0x84>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b0a      	cmp	r3, #10
 8000652:	d110      	bne.n	8000676 <HAL_UART_RxCpltCallback+0x4e>
      if (commandLength > 0) {
 8000654:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <HAL_UART_RxCpltCallback+0x8c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d01b      	beq.n	8000694 <HAL_UART_RxCpltCallback+0x6c>
        commandBuffer[commandLength] = '\0';
 800065c:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <HAL_UART_RxCpltCallback+0x8c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	461a      	mov	r2, r3
 8000662:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <HAL_UART_RxCpltCallback+0x90>)
 8000664:	2100      	movs	r1, #0
 8000666:	5499      	strb	r1, [r3, r2]
        commandReady = true;
 8000668:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <HAL_UART_RxCpltCallback+0x94>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
        commandLength = 0;
 800066e:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <HAL_UART_RxCpltCallback+0x8c>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
      if (commandLength > 0) {
 8000674:	e00e      	b.n	8000694 <HAL_UART_RxCpltCallback+0x6c>
      }
    } else if (commandLength < MAX_COMMAND_LENGTH) {
 8000676:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <HAL_UART_RxCpltCallback+0x8c>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b13      	cmp	r3, #19
 800067c:	d80a      	bhi.n	8000694 <HAL_UART_RxCpltCallback+0x6c>
      commandBuffer[commandLength++] = uartRxChar;
 800067e:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <HAL_UART_RxCpltCallback+0x8c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	1c5a      	adds	r2, r3, #1
 8000684:	b2d1      	uxtb	r1, r2
 8000686:	4a0b      	ldr	r2, [pc, #44]	@ (80006b4 <HAL_UART_RxCpltCallback+0x8c>)
 8000688:	7011      	strb	r1, [r2, #0]
 800068a:	461a      	mov	r2, r3
 800068c:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <HAL_UART_RxCpltCallback+0x84>)
 800068e:	7819      	ldrb	r1, [r3, #0]
 8000690:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <HAL_UART_RxCpltCallback+0x90>)
 8000692:	5499      	strb	r1, [r3, r2]
    }

    // Start listening for next character
    HAL_UART_Receive_IT(&hlpuart1, &uartRxChar, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	4905      	ldr	r1, [pc, #20]	@ (80006ac <HAL_UART_RxCpltCallback+0x84>)
 8000698:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <HAL_UART_RxCpltCallback+0x88>)
 800069a:	f003 facf 	bl	8003c3c <HAL_UART_Receive_IT>
  }
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40008000 	.word	0x40008000
 80006ac:	200002ec 	.word	0x200002ec
 80006b0:	200000d0 	.word	0x200000d0
 80006b4:	20000305 	.word	0x20000305
 80006b8:	200002f0 	.word	0x200002f0
 80006bc:	20000306 	.word	0x20000306

080006c0 <updateLed>:
  HAL_Delay(500);
}

// Aktualizace stavu LED
void updateLed(Led* led, uint32_t currentTime)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
  if (led->mode == LED_MODE_OFF) {
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	799b      	ldrb	r3, [r3, #6]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d10f      	bne.n	80006f2 <updateLed+0x32>
    // LED je trvale vypnutá
    if (led->state) {
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	7c1b      	ldrb	r3, [r3, #16]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d07b      	beq.n	80007d2 <updateLed+0x112>
      HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	889b      	ldrh	r3, [r3, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	4619      	mov	r1, r3
 80006e6:	f001 fc3f 	bl	8001f68 <HAL_GPIO_WritePin>
      led->state = false;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	741a      	strb	r2, [r3, #16]
      led->state = !led->state;
      HAL_GPIO_WritePin(led->port, led->pin, led->state ? GPIO_PIN_SET : GPIO_PIN_RESET);
      led->lastToggleTime = currentTime;
    }
  }
}
 80006f0:	e06f      	b.n	80007d2 <updateLed+0x112>
  else if (led->mode == LED_MODE_ON) {
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	799b      	ldrb	r3, [r3, #6]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d112      	bne.n	8000720 <updateLed+0x60>
    if (!led->state) {
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	7c1b      	ldrb	r3, [r3, #16]
 80006fe:	f083 0301 	eor.w	r3, r3, #1
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b00      	cmp	r3, #0
 8000706:	d064      	beq.n	80007d2 <updateLed+0x112>
      HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6818      	ldr	r0, [r3, #0]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	889b      	ldrh	r3, [r3, #4]
 8000710:	2201      	movs	r2, #1
 8000712:	4619      	mov	r1, r3
 8000714:	f001 fc28 	bl	8001f68 <HAL_GPIO_WritePin>
      led->state = true;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2201      	movs	r2, #1
 800071c:	741a      	strb	r2, [r3, #16]
}
 800071e:	e058      	b.n	80007d2 <updateLed+0x112>
  else if (led->mode == LED_MODE_BLINK) {
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	799b      	ldrb	r3, [r3, #6]
 8000724:	2b02      	cmp	r3, #2
 8000726:	d124      	bne.n	8000772 <updateLed+0xb2>
    if (currentTime - led->lastToggleTime >= led->blinkPeriod / 2) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	1ad2      	subs	r2, r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	085b      	lsrs	r3, r3, #1
 8000736:	429a      	cmp	r2, r3
 8000738:	d34b      	bcc.n	80007d2 <updateLed+0x112>
      led->state = !led->state;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	7c1b      	ldrb	r3, [r3, #16]
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf14      	ite	ne
 8000742:	2301      	movne	r3, #1
 8000744:	2300      	moveq	r3, #0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f083 0301 	eor.w	r3, r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	b2da      	uxtb	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	741a      	strb	r2, [r3, #16]
      HAL_GPIO_WritePin(led->port, led->pin, led->state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6818      	ldr	r0, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	8899      	ldrh	r1, [r3, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	7c1b      	ldrb	r3, [r3, #16]
 8000764:	461a      	mov	r2, r3
 8000766:	f001 fbff 	bl	8001f68 <HAL_GPIO_WritePin>
      led->lastToggleTime = currentTime;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	683a      	ldr	r2, [r7, #0]
 800076e:	60da      	str	r2, [r3, #12]
}
 8000770:	e02f      	b.n	80007d2 <updateLed+0x112>
  else if (led->mode == LED_MODE_BLINK_ASYM) {
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	799b      	ldrb	r3, [r3, #6]
 8000776:	2b03      	cmp	r3, #3
 8000778:	d12b      	bne.n	80007d2 <updateLed+0x112>
    uint32_t interval = led->state ? led->onTime : led->offTime;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	7c1b      	ldrb	r3, [r3, #16]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d002      	beq.n	8000788 <updateLed+0xc8>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	e001      	b.n	800078c <updateLed+0xcc>
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	60fb      	str	r3, [r7, #12]
    if (currentTime - led->lastToggleTime >= interval) {
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	68db      	ldr	r3, [r3, #12]
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	429a      	cmp	r2, r3
 800079a:	d81a      	bhi.n	80007d2 <updateLed+0x112>
      led->state = !led->state;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7c1b      	ldrb	r3, [r3, #16]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	bf14      	ite	ne
 80007a4:	2301      	movne	r3, #1
 80007a6:	2300      	moveq	r3, #0
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	f083 0301 	eor.w	r3, r3, #1
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	741a      	strb	r2, [r3, #16]
      HAL_GPIO_WritePin(led->port, led->pin, led->state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6818      	ldr	r0, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	8899      	ldrh	r1, [r3, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7c1b      	ldrb	r3, [r3, #16]
 80007c6:	461a      	mov	r2, r3
 80007c8:	f001 fbce 	bl	8001f68 <HAL_GPIO_WritePin>
      led->lastToggleTime = currentTime;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	60da      	str	r2, [r3, #12]
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <handleButton>:

// Zpracování tlačítka
void handleButton(uint32_t currentTime)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  // Čtení stavu tlačítka
  bool currentButtonState = (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET);
 80007e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e8:	4862      	ldr	r0, [pc, #392]	@ (8000974 <handleButton+0x198>)
 80007ea:	f001 fba5 	bl	8001f38 <HAL_GPIO_ReadPin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	bf0c      	ite	eq
 80007f4:	2301      	moveq	r3, #1
 80007f6:	2300      	movne	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]

  // Filtr zákmitů tlačítka
  if (currentButtonState != lastButtonState) {
 80007fa:	4b5f      	ldr	r3, [pc, #380]	@ (8000978 <handleButton+0x19c>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	7bfa      	ldrb	r2, [r7, #15]
 8000800:	429a      	cmp	r2, r3
 8000802:	d002      	beq.n	800080a <handleButton+0x2e>
    lastButtonDebounceTime = currentTime;
 8000804:	4a5d      	ldr	r2, [pc, #372]	@ (800097c <handleButton+0x1a0>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6013      	str	r3, [r2, #0]
  }

  // Pokud je stav tlačítka stabilní po dobu filtru
  if (currentTime - lastButtonDebounceTime > BTN_FILTER) {
 800080a:	4b5c      	ldr	r3, [pc, #368]	@ (800097c <handleButton+0x1a0>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	2b32      	cmp	r3, #50	@ 0x32
 8000814:	f240 80a6 	bls.w	8000964 <handleButton+0x188>
    // Pokud se stav změnil od posledního stabilního stavu
    if (currentButtonState != buttonPressed) {
 8000818:	4b59      	ldr	r3, [pc, #356]	@ (8000980 <handleButton+0x1a4>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	7bfa      	ldrb	r2, [r7, #15]
 800081e:	429a      	cmp	r2, r3
 8000820:	f000 80a0 	beq.w	8000964 <handleButton+0x188>
      buttonPressed = currentButtonState;
 8000824:	4a56      	ldr	r2, [pc, #344]	@ (8000980 <handleButton+0x1a4>)
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	7013      	strb	r3, [r2, #0]

      // Stisk tlačítka
      if (buttonPressed) {
 800082a:	4b55      	ldr	r3, [pc, #340]	@ (8000980 <handleButton+0x1a4>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d038      	beq.n	80008a4 <handleButton+0xc8>
        buttonPressTime = currentTime;
 8000832:	4a54      	ldr	r2, [pc, #336]	@ (8000984 <handleButton+0x1a8>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6013      	str	r3, [r2, #0]

        // Ve stavu 2 přepnout stav červené LED po stisku
        if (currentState == STATE_BUTTON_TOGGLE) {
 8000838:	4b53      	ldr	r3, [pc, #332]	@ (8000988 <handleButton+0x1ac>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d126      	bne.n	800088e <handleButton+0xb2>
          redLed.state = !redLed.state;
 8000840:	4b52      	ldr	r3, [pc, #328]	@ (800098c <handleButton+0x1b0>)
 8000842:	7c1b      	ldrb	r3, [r3, #16]
 8000844:	2b00      	cmp	r3, #0
 8000846:	bf14      	ite	ne
 8000848:	2301      	movne	r3, #1
 800084a:	2300      	moveq	r3, #0
 800084c:	b2db      	uxtb	r3, r3
 800084e:	f083 0301 	eor.w	r3, r3, #1
 8000852:	b2db      	uxtb	r3, r3
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b4c      	ldr	r3, [pc, #304]	@ (800098c <handleButton+0x1b0>)
 800085c:	741a      	strb	r2, [r3, #16]
          HAL_GPIO_WritePin(redLed.port, redLed.pin, redLed.state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800085e:	4b4b      	ldr	r3, [pc, #300]	@ (800098c <handleButton+0x1b0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a4a      	ldr	r2, [pc, #296]	@ (800098c <handleButton+0x1b0>)
 8000864:	8891      	ldrh	r1, [r2, #4]
 8000866:	4a49      	ldr	r2, [pc, #292]	@ (800098c <handleButton+0x1b0>)
 8000868:	7c12      	ldrb	r2, [r2, #16]
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fb7c 	bl	8001f68 <HAL_GPIO_WritePin>

          // Informace o změně stavu červené LED
          sprintf(outputBuffer, "\r\nRed LED %s\r\n", redLed.state ? "ON" : "OFF");
 8000870:	4b46      	ldr	r3, [pc, #280]	@ (800098c <handleButton+0x1b0>)
 8000872:	7c1b      	ldrb	r3, [r3, #16]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <handleButton+0xa0>
 8000878:	4b45      	ldr	r3, [pc, #276]	@ (8000990 <handleButton+0x1b4>)
 800087a:	e000      	b.n	800087e <handleButton+0xa2>
 800087c:	4b45      	ldr	r3, [pc, #276]	@ (8000994 <handleButton+0x1b8>)
 800087e:	461a      	mov	r2, r3
 8000880:	4945      	ldr	r1, [pc, #276]	@ (8000998 <handleButton+0x1bc>)
 8000882:	4846      	ldr	r0, [pc, #280]	@ (800099c <handleButton+0x1c0>)
 8000884:	f005 fb0e 	bl	8005ea4 <siprintf>
          sendUartMessage(outputBuffer);
 8000888:	4844      	ldr	r0, [pc, #272]	@ (800099c <handleButton+0x1c0>)
 800088a:	f000 f899 	bl	80009c0 <sendUartMessage>
        }

        // Přechod do pomocného stavu pro detekci dlouhého stisku
        if (currentState == STATE_BUTTON_TOGGLE) {
 800088e:	4b3e      	ldr	r3, [pc, #248]	@ (8000988 <handleButton+0x1ac>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d166      	bne.n	8000964 <handleButton+0x188>
          currentState = STATE_TRANSITIONAL;
 8000896:	4b3c      	ldr	r3, [pc, #240]	@ (8000988 <handleButton+0x1ac>)
 8000898:	2202      	movs	r2, #2
 800089a:	701a      	strb	r2, [r3, #0]

          // Informace o přechodu do přechodného stavu
          sendUartMessage("\r\nVstup do prechodoveho stavu\r\n");
 800089c:	4840      	ldr	r0, [pc, #256]	@ (80009a0 <handleButton+0x1c4>)
 800089e:	f000 f88f 	bl	80009c0 <sendUartMessage>
 80008a2:	e05f      	b.n	8000964 <handleButton+0x188>
        }
      }
      // Uvolnění tlačítka
      else {
        buttonReleaseTime = currentTime;
 80008a4:	4a3f      	ldr	r2, [pc, #252]	@ (80009a4 <handleButton+0x1c8>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6013      	str	r3, [r2, #0]
        uint32_t pressDuration = buttonReleaseTime - buttonPressTime;
 80008aa:	4b3e      	ldr	r3, [pc, #248]	@ (80009a4 <handleButton+0x1c8>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	4b35      	ldr	r3, [pc, #212]	@ (8000984 <handleButton+0x1a8>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	60bb      	str	r3, [r7, #8]

        // Dlouhý stisk - přechod do stavu 4
        if (currentState == STATE_TRANSITIONAL && pressDuration >= LONG_PRESS_DURATION) {
 80008b6:	4b34      	ldr	r3, [pc, #208]	@ (8000988 <handleButton+0x1ac>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d11e      	bne.n	80008fc <handleButton+0x120>
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008c4:	d31a      	bcc.n	80008fc <handleButton+0x120>
          currentState = STATE_CUSTOM_PERIOD;
 80008c6:	4b30      	ldr	r3, [pc, #192]	@ (8000988 <handleButton+0x1ac>)
 80008c8:	2203      	movs	r2, #3
 80008ca:	701a      	strb	r2, [r3, #0]
          customBlinkPeriod = pressDuration;
 80008cc:	4a36      	ldr	r2, [pc, #216]	@ (80009a8 <handleButton+0x1cc>)
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	6013      	str	r3, [r2, #0]
          redLed.mode = LED_MODE_BLINK;
 80008d2:	4b2e      	ldr	r3, [pc, #184]	@ (800098c <handleButton+0x1b0>)
 80008d4:	2202      	movs	r2, #2
 80008d6:	719a      	strb	r2, [r3, #6]
          redLed.blinkPeriod = customBlinkPeriod;
 80008d8:	4b33      	ldr	r3, [pc, #204]	@ (80009a8 <handleButton+0x1cc>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a2b      	ldr	r2, [pc, #172]	@ (800098c <handleButton+0x1b0>)
 80008de:	6093      	str	r3, [r2, #8]
          blueLed.mode = LED_MODE_BLINK_ASYM;
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <handleButton+0x1d0>)
 80008e2:	2203      	movs	r2, #3
 80008e4:	719a      	strb	r2, [r3, #6]

          // Informace o přechodu do stavu 4
          sprintf(outputBuffer, "\r\n Stav vlastni delky periody. Delka periody: %lu ms\r\n", customBlinkPeriod);
 80008e6:	4b30      	ldr	r3, [pc, #192]	@ (80009a8 <handleButton+0x1cc>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	4930      	ldr	r1, [pc, #192]	@ (80009b0 <handleButton+0x1d4>)
 80008ee:	482b      	ldr	r0, [pc, #172]	@ (800099c <handleButton+0x1c0>)
 80008f0:	f005 fad8 	bl	8005ea4 <siprintf>
          sendUartMessage(outputBuffer);
 80008f4:	4829      	ldr	r0, [pc, #164]	@ (800099c <handleButton+0x1c0>)
 80008f6:	f000 f863 	bl	80009c0 <sendUartMessage>
 80008fa:	e033      	b.n	8000964 <handleButton+0x188>
        }
        // Krátký stisk - návrat do stavu 2
        else if (currentState == STATE_TRANSITIONAL) {
 80008fc:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <handleButton+0x1ac>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b02      	cmp	r3, #2
 8000902:	d106      	bne.n	8000912 <handleButton+0x136>
          currentState = STATE_BUTTON_TOGGLE;
 8000904:	4b20      	ldr	r3, [pc, #128]	@ (8000988 <handleButton+0x1ac>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]

          // Informace o návratu do stavu 2
          sendUartMessage("\r\nVraceno do stavu klikani tlacitka\r\n");
 800090a:	482a      	ldr	r0, [pc, #168]	@ (80009b4 <handleButton+0x1d8>)
 800090c:	f000 f858 	bl	80009c0 <sendUartMessage>
 8000910:	e028      	b.n	8000964 <handleButton+0x188>
        }
        // Ve stavu 4 - nastavení nové periody blikání červené LED
        else if (currentState == STATE_CUSTOM_PERIOD) {
 8000912:	4b1d      	ldr	r3, [pc, #116]	@ (8000988 <handleButton+0x1ac>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b03      	cmp	r3, #3
 8000918:	d111      	bne.n	800093e <handleButton+0x162>
          customBlinkPeriod = pressDuration;
 800091a:	4a23      	ldr	r2, [pc, #140]	@ (80009a8 <handleButton+0x1cc>)
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	6013      	str	r3, [r2, #0]
          redLed.blinkPeriod = customBlinkPeriod;
 8000920:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <handleButton+0x1cc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a19      	ldr	r2, [pc, #100]	@ (800098c <handleButton+0x1b0>)
 8000926:	6093      	str	r3, [r2, #8]

          // Informace o nové periodě blikání
          sprintf(outputBuffer, "\r\nNova perioda blikani: %lu ms\r\n", customBlinkPeriod);
 8000928:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <handleButton+0x1cc>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	4922      	ldr	r1, [pc, #136]	@ (80009b8 <handleButton+0x1dc>)
 8000930:	481a      	ldr	r0, [pc, #104]	@ (800099c <handleButton+0x1c0>)
 8000932:	f005 fab7 	bl	8005ea4 <siprintf>
          sendUartMessage(outputBuffer);
 8000936:	4819      	ldr	r0, [pc, #100]	@ (800099c <handleButton+0x1c0>)
 8000938:	f000 f842 	bl	80009c0 <sendUartMessage>
 800093c:	e012      	b.n	8000964 <handleButton+0x188>
        }
        // Ve stavu 1 - přechod do stavu 2
        else if (currentState == STATE_INITIAL) {
 800093e:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <handleButton+0x1ac>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d10e      	bne.n	8000964 <handleButton+0x188>
          currentState = STATE_BUTTON_TOGGLE;
 8000946:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <handleButton+0x1ac>)
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
          redLed.mode = LED_MODE_OFF;
 800094c:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <handleButton+0x1b0>)
 800094e:	2200      	movs	r2, #0
 8000950:	719a      	strb	r2, [r3, #6]
          blueLed.mode = LED_MODE_BLINK;
 8000952:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <handleButton+0x1d0>)
 8000954:	2202      	movs	r2, #2
 8000956:	719a      	strb	r2, [r3, #6]
          blueLed.blinkPeriod = 200; // 100ms perioda (50ms on, 50ms off)
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <handleButton+0x1d0>)
 800095a:	22c8      	movs	r2, #200	@ 0xc8
 800095c:	609a      	str	r2, [r3, #8]

          // Informace o přechodu do stavu 2
          sendUartMessage("\r\nVstup do stavu klikani tlacitka\r\n");
 800095e:	4817      	ldr	r0, [pc, #92]	@ (80009bc <handleButton+0x1e0>)
 8000960:	f000 f82e 	bl	80009c0 <sendUartMessage>
      }
    }
  }

  // Uložení posledního stavu tlačítka
  lastButtonState = currentButtonState;
 8000964:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <handleButton+0x19c>)
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	7013      	strb	r3, [r2, #0]
}
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	48000800 	.word	0x48000800
 8000978:	20000318 	.word	0x20000318
 800097c:	20000314 	.word	0x20000314
 8000980:	20000310 	.word	0x20000310
 8000984:	20000308 	.word	0x20000308
 8000988:	20000307 	.word	0x20000307
 800098c:	20000004 	.word	0x20000004
 8000990:	080069f8 	.word	0x080069f8
 8000994:	080069fc 	.word	0x080069fc
 8000998:	08006a00 	.word	0x08006a00
 800099c:	20000224 	.word	0x20000224
 80009a0:	08006a10 	.word	0x08006a10
 80009a4:	2000030c 	.word	0x2000030c
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000020 	.word	0x20000020
 80009b0:	08006a30 	.word	0x08006a30
 80009b4:	08006a68 	.word	0x08006a68
 80009b8:	08006a90 	.word	0x08006a90
 80009bc:	08006ab4 	.word	0x08006ab4

080009c0 <sendUartMessage>:

// Odeslání zprávy přes UART
void sendUartMessage(const char* message)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)message, strlen(message), 1000);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fc23 	bl	8000214 <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	4803      	ldr	r0, [pc, #12]	@ (80009e8 <sendUartMessage+0x28>)
 80009da:	f002 fff1 	bl	80039c0 <HAL_UART_Transmit>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200000d0 	.word	0x200000d0

080009ec <startUartRxInterrupt>:

// Nastavení UART přerušení pro příjem
void startUartRxInterrupt(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&hlpuart1, &uartRxChar, 1);
 80009f0:	2201      	movs	r2, #1
 80009f2:	4903      	ldr	r1, [pc, #12]	@ (8000a00 <startUartRxInterrupt+0x14>)
 80009f4:	4803      	ldr	r0, [pc, #12]	@ (8000a04 <startUartRxInterrupt+0x18>)
 80009f6:	f003 f921 	bl	8003c3c <HAL_UART_Receive_IT>
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200002ec 	.word	0x200002ec
 8000a04:	200000d0 	.word	0x200000d0

08000a08 <processCommand>:

// Zpracování přijatého příkazu
void processCommand(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0
  // Konvertovat příkaz na velká písmena pro snadnější porovnání
  char upperCommand[MAX_COMMAND_LENGTH + 1];
  strcpy(upperCommand, commandBuffer);
 8000a0e:	463b      	mov	r3, r7
 8000a10:	4984      	ldr	r1, [pc, #528]	@ (8000c24 <processCommand+0x21c>)
 8000a12:	4618      	mov	r0, r3
 8000a14:	f005 fb32 	bl	800607c <strcpy>
  for (int i = 0; upperCommand[i]; i++) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
 8000a1c:	e019      	b.n	8000a52 <processCommand+0x4a>
    if (upperCommand[i] >= 'a' && upperCommand[i] <= 'z') {
 8000a1e:	463a      	mov	r2, r7
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b60      	cmp	r3, #96	@ 0x60
 8000a28:	d910      	bls.n	8000a4c <processCommand+0x44>
 8000a2a:	463a      	mov	r2, r7
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	4413      	add	r3, r2
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b7a      	cmp	r3, #122	@ 0x7a
 8000a34:	d80a      	bhi.n	8000a4c <processCommand+0x44>
      upperCommand[i] = upperCommand[i] - 'a' + 'A';
 8000a36:	463a      	mov	r2, r7
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	3b20      	subs	r3, #32
 8000a40:	b2d9      	uxtb	r1, r3
 8000a42:	463a      	mov	r2, r7
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	4413      	add	r3, r2
 8000a48:	460a      	mov	r2, r1
 8000a4a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; upperCommand[i]; i++) {
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	61fb      	str	r3, [r7, #28]
 8000a52:	463a      	mov	r2, r7
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	4413      	add	r3, r2
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1df      	bne.n	8000a1e <processCommand+0x16>
    }
  }

  // Příkaz pro rozsvícení červené LED
  if (strcmp(upperCommand, "RON") == 0) {
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4971      	ldr	r1, [pc, #452]	@ (8000c28 <processCommand+0x220>)
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fbcc 	bl	8000200 <strcmp>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10b      	bne.n	8000a86 <processCommand+0x7e>
    redLed.mode = LED_MODE_ON;
 8000a6e:	4b6f      	ldr	r3, [pc, #444]	@ (8000c2c <processCommand+0x224>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	719a      	strb	r2, [r3, #6]
    sprintf(outputBuffer, "\r\nCommand: %s - Cervena LED ON\r\n", commandBuffer);
 8000a74:	4a6b      	ldr	r2, [pc, #428]	@ (8000c24 <processCommand+0x21c>)
 8000a76:	496e      	ldr	r1, [pc, #440]	@ (8000c30 <processCommand+0x228>)
 8000a78:	486e      	ldr	r0, [pc, #440]	@ (8000c34 <processCommand+0x22c>)
 8000a7a:	f005 fa13 	bl	8005ea4 <siprintf>
    sendUartMessage(outputBuffer);
 8000a7e:	486d      	ldr	r0, [pc, #436]	@ (8000c34 <processCommand+0x22c>)
 8000a80:	f7ff ff9e 	bl	80009c0 <sendUartMessage>
  // Neznámý příkaz
  else {
    sprintf(outputBuffer, "\r\nError: Neznamy prikaz: '%s'\r\n", commandBuffer);
    sendUartMessage(outputBuffer);
  }
}
 8000a84:	e0c9      	b.n	8000c1a <processCommand+0x212>
  else if (strcmp(upperCommand, "BON") == 0) {
 8000a86:	463b      	mov	r3, r7
 8000a88:	496b      	ldr	r1, [pc, #428]	@ (8000c38 <processCommand+0x230>)
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fbb8 	bl	8000200 <strcmp>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d10b      	bne.n	8000aae <processCommand+0xa6>
    blueLed.mode = LED_MODE_ON;
 8000a96:	4b69      	ldr	r3, [pc, #420]	@ (8000c3c <processCommand+0x234>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	719a      	strb	r2, [r3, #6]
    sprintf(outputBuffer, "\r\nCommand: %s - Modra LED ON\r\n", commandBuffer);
 8000a9c:	4a61      	ldr	r2, [pc, #388]	@ (8000c24 <processCommand+0x21c>)
 8000a9e:	4968      	ldr	r1, [pc, #416]	@ (8000c40 <processCommand+0x238>)
 8000aa0:	4864      	ldr	r0, [pc, #400]	@ (8000c34 <processCommand+0x22c>)
 8000aa2:	f005 f9ff 	bl	8005ea4 <siprintf>
    sendUartMessage(outputBuffer);
 8000aa6:	4863      	ldr	r0, [pc, #396]	@ (8000c34 <processCommand+0x22c>)
 8000aa8:	f7ff ff8a 	bl	80009c0 <sendUartMessage>
}
 8000aac:	e0b5      	b.n	8000c1a <processCommand+0x212>
  else if (strcmp(upperCommand, "GON") == 0) {
 8000aae:	463b      	mov	r3, r7
 8000ab0:	4964      	ldr	r1, [pc, #400]	@ (8000c44 <processCommand+0x23c>)
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fba4 	bl	8000200 <strcmp>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d10b      	bne.n	8000ad6 <processCommand+0xce>
    greenLed.mode = LED_MODE_ON;
 8000abe:	4b62      	ldr	r3, [pc, #392]	@ (8000c48 <processCommand+0x240>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	719a      	strb	r2, [r3, #6]
    sprintf(outputBuffer, "\r\nCommand: %s - Zelena LED ON\r\n", commandBuffer);
 8000ac4:	4a57      	ldr	r2, [pc, #348]	@ (8000c24 <processCommand+0x21c>)
 8000ac6:	4961      	ldr	r1, [pc, #388]	@ (8000c4c <processCommand+0x244>)
 8000ac8:	485a      	ldr	r0, [pc, #360]	@ (8000c34 <processCommand+0x22c>)
 8000aca:	f005 f9eb 	bl	8005ea4 <siprintf>
    sendUartMessage(outputBuffer);
 8000ace:	4859      	ldr	r0, [pc, #356]	@ (8000c34 <processCommand+0x22c>)
 8000ad0:	f7ff ff76 	bl	80009c0 <sendUartMessage>
}
 8000ad4:	e0a1      	b.n	8000c1a <processCommand+0x212>
  else if (strcmp(upperCommand, "ROFF") == 0) {
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	495d      	ldr	r1, [pc, #372]	@ (8000c50 <processCommand+0x248>)
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fb90 	bl	8000200 <strcmp>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d10b      	bne.n	8000afe <processCommand+0xf6>
    redLed.mode = LED_MODE_OFF;
 8000ae6:	4b51      	ldr	r3, [pc, #324]	@ (8000c2c <processCommand+0x224>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	719a      	strb	r2, [r3, #6]
    sprintf(outputBuffer, "\r\nCommand: %s - Cervena LED OFF\r\n", commandBuffer);
 8000aec:	4a4d      	ldr	r2, [pc, #308]	@ (8000c24 <processCommand+0x21c>)
 8000aee:	4959      	ldr	r1, [pc, #356]	@ (8000c54 <processCommand+0x24c>)
 8000af0:	4850      	ldr	r0, [pc, #320]	@ (8000c34 <processCommand+0x22c>)
 8000af2:	f005 f9d7 	bl	8005ea4 <siprintf>
    sendUartMessage(outputBuffer);
 8000af6:	484f      	ldr	r0, [pc, #316]	@ (8000c34 <processCommand+0x22c>)
 8000af8:	f7ff ff62 	bl	80009c0 <sendUartMessage>
}
 8000afc:	e08d      	b.n	8000c1a <processCommand+0x212>
  else if (strcmp(upperCommand, "BOFF") == 0) {
 8000afe:	463b      	mov	r3, r7
 8000b00:	4955      	ldr	r1, [pc, #340]	@ (8000c58 <processCommand+0x250>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fb7c 	bl	8000200 <strcmp>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d10b      	bne.n	8000b26 <processCommand+0x11e>
    blueLed.mode = LED_MODE_OFF;
 8000b0e:	4b4b      	ldr	r3, [pc, #300]	@ (8000c3c <processCommand+0x234>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	719a      	strb	r2, [r3, #6]
    sprintf(outputBuffer, "\r\nCommand: %s - Modra LED OFF\r\n", commandBuffer);
 8000b14:	4a43      	ldr	r2, [pc, #268]	@ (8000c24 <processCommand+0x21c>)
 8000b16:	4951      	ldr	r1, [pc, #324]	@ (8000c5c <processCommand+0x254>)
 8000b18:	4846      	ldr	r0, [pc, #280]	@ (8000c34 <processCommand+0x22c>)
 8000b1a:	f005 f9c3 	bl	8005ea4 <siprintf>
    sendUartMessage(outputBuffer);
 8000b1e:	4845      	ldr	r0, [pc, #276]	@ (8000c34 <processCommand+0x22c>)
 8000b20:	f7ff ff4e 	bl	80009c0 <sendUartMessage>
}
 8000b24:	e079      	b.n	8000c1a <processCommand+0x212>
  else if (strcmp(upperCommand, "GOFF") == 0) {
 8000b26:	463b      	mov	r3, r7
 8000b28:	494d      	ldr	r1, [pc, #308]	@ (8000c60 <processCommand+0x258>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fb68 	bl	8000200 <strcmp>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10b      	bne.n	8000b4e <processCommand+0x146>
    greenLed.mode = LED_MODE_OFF;
 8000b36:	4b44      	ldr	r3, [pc, #272]	@ (8000c48 <processCommand+0x240>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	719a      	strb	r2, [r3, #6]
    sprintf(outputBuffer, "\r\nCommand: %s - Zelena LED OFF\r\n", commandBuffer);
 8000b3c:	4a39      	ldr	r2, [pc, #228]	@ (8000c24 <processCommand+0x21c>)
 8000b3e:	4949      	ldr	r1, [pc, #292]	@ (8000c64 <processCommand+0x25c>)
 8000b40:	483c      	ldr	r0, [pc, #240]	@ (8000c34 <processCommand+0x22c>)
 8000b42:	f005 f9af 	bl	8005ea4 <siprintf>
    sendUartMessage(outputBuffer);
 8000b46:	483b      	ldr	r0, [pc, #236]	@ (8000c34 <processCommand+0x22c>)
 8000b48:	f7ff ff3a 	bl	80009c0 <sendUartMessage>
}
 8000b4c:	e065      	b.n	8000c1a <processCommand+0x212>
  else if (strcmp(upperCommand, "RESET") == 0) {
 8000b4e:	463b      	mov	r3, r7
 8000b50:	4945      	ldr	r1, [pc, #276]	@ (8000c68 <processCommand+0x260>)
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fb54 	bl	8000200 <strcmp>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d11b      	bne.n	8000b96 <processCommand+0x18e>
    currentState = STATE_INITIAL;
 8000b5e:	4b43      	ldr	r3, [pc, #268]	@ (8000c6c <processCommand+0x264>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
    redLed.mode = LED_MODE_BLINK;
 8000b64:	4b31      	ldr	r3, [pc, #196]	@ (8000c2c <processCommand+0x224>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	719a      	strb	r2, [r3, #6]
    redLed.blinkPeriod = 250;
 8000b6a:	4b30      	ldr	r3, [pc, #192]	@ (8000c2c <processCommand+0x224>)
 8000b6c:	22fa      	movs	r2, #250	@ 0xfa
 8000b6e:	609a      	str	r2, [r3, #8]
    blueLed.mode = LED_MODE_BLINK;
 8000b70:	4b32      	ldr	r3, [pc, #200]	@ (8000c3c <processCommand+0x234>)
 8000b72:	2202      	movs	r2, #2
 8000b74:	719a      	strb	r2, [r3, #6]
    blueLed.blinkPeriod = 500;
 8000b76:	4b31      	ldr	r3, [pc, #196]	@ (8000c3c <processCommand+0x234>)
 8000b78:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000b7c:	609a      	str	r2, [r3, #8]
    greenLed.mode = LED_MODE_OFF;
 8000b7e:	4b32      	ldr	r3, [pc, #200]	@ (8000c48 <processCommand+0x240>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	719a      	strb	r2, [r3, #6]
    sprintf(outputBuffer, "\r\nPrikaz: %s - reset to inicialniho stavu\r\n", commandBuffer);
 8000b84:	4a27      	ldr	r2, [pc, #156]	@ (8000c24 <processCommand+0x21c>)
 8000b86:	493a      	ldr	r1, [pc, #232]	@ (8000c70 <processCommand+0x268>)
 8000b88:	482a      	ldr	r0, [pc, #168]	@ (8000c34 <processCommand+0x22c>)
 8000b8a:	f005 f98b 	bl	8005ea4 <siprintf>
    sendUartMessage(outputBuffer);
 8000b8e:	4829      	ldr	r0, [pc, #164]	@ (8000c34 <processCommand+0x22c>)
 8000b90:	f7ff ff16 	bl	80009c0 <sendUartMessage>
}
 8000b94:	e041      	b.n	8000c1a <processCommand+0x212>
  else if (strncmp(upperCommand, "BLIK ", 5) == 0) {
 8000b96:	463b      	mov	r3, r7
 8000b98:	2205      	movs	r2, #5
 8000b9a:	4936      	ldr	r1, [pc, #216]	@ (8000c74 <processCommand+0x26c>)
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f005 fa2f 	bl	8006000 <strncmp>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d130      	bne.n	8000c0a <processCommand+0x202>
    int period = atoi(&upperCommand[5]);
 8000ba8:	463b      	mov	r3, r7
 8000baa:	3305      	adds	r3, #5
 8000bac:	4618      	mov	r0, r3
 8000bae:	f005 f975 	bl	8005e9c <atoi>
 8000bb2:	61b8      	str	r0, [r7, #24]
    if (period > 0) {
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	dd1e      	ble.n	8000bf8 <processCommand+0x1f0>
      redLed.mode = LED_MODE_BLINK;
 8000bba:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <processCommand+0x224>)
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	719a      	strb	r2, [r3, #6]
      redLed.blinkPeriod = period;
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c2c <processCommand+0x224>)
 8000bc4:	6093      	str	r3, [r2, #8]
      blueLed.mode = LED_MODE_BLINK;
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c3c <processCommand+0x234>)
 8000bc8:	2202      	movs	r2, #2
 8000bca:	719a      	strb	r2, [r3, #6]
      blueLed.blinkPeriod = period;
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	4a1b      	ldr	r2, [pc, #108]	@ (8000c3c <processCommand+0x234>)
 8000bd0:	6093      	str	r3, [r2, #8]
      greenLed.mode = LED_MODE_BLINK;
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c48 <processCommand+0x240>)
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	719a      	strb	r2, [r3, #6]
      greenLed.blinkPeriod = period;
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	4a1b      	ldr	r2, [pc, #108]	@ (8000c48 <processCommand+0x240>)
 8000bdc:	6093      	str	r3, [r2, #8]
      currentState = STATE_BLINK_COMMAND;  // Nastavit nový stav
 8000bde:	4b23      	ldr	r3, [pc, #140]	@ (8000c6c <processCommand+0x264>)
 8000be0:	2204      	movs	r2, #4
 8000be2:	701a      	strb	r2, [r3, #0]
      sprintf(outputBuffer, "\r\nCommand: %s - Vsechny LED blikaji s periodou: %d ms\r\n", commandBuffer, period);
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c24 <processCommand+0x21c>)
 8000be8:	4923      	ldr	r1, [pc, #140]	@ (8000c78 <processCommand+0x270>)
 8000bea:	4812      	ldr	r0, [pc, #72]	@ (8000c34 <processCommand+0x22c>)
 8000bec:	f005 f95a 	bl	8005ea4 <siprintf>
      sendUartMessage(outputBuffer);
 8000bf0:	4810      	ldr	r0, [pc, #64]	@ (8000c34 <processCommand+0x22c>)
 8000bf2:	f7ff fee5 	bl	80009c0 <sendUartMessage>
}
 8000bf6:	e010      	b.n	8000c1a <processCommand+0x212>
      sprintf(outputBuffer, "\r\nError: Spatna perioda v prikazu '%s'\r\n", commandBuffer);
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <processCommand+0x21c>)
 8000bfa:	4920      	ldr	r1, [pc, #128]	@ (8000c7c <processCommand+0x274>)
 8000bfc:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <processCommand+0x22c>)
 8000bfe:	f005 f951 	bl	8005ea4 <siprintf>
      sendUartMessage(outputBuffer);
 8000c02:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <processCommand+0x22c>)
 8000c04:	f7ff fedc 	bl	80009c0 <sendUartMessage>
}
 8000c08:	e007      	b.n	8000c1a <processCommand+0x212>
    sprintf(outputBuffer, "\r\nError: Neznamy prikaz: '%s'\r\n", commandBuffer);
 8000c0a:	4a06      	ldr	r2, [pc, #24]	@ (8000c24 <processCommand+0x21c>)
 8000c0c:	491c      	ldr	r1, [pc, #112]	@ (8000c80 <processCommand+0x278>)
 8000c0e:	4809      	ldr	r0, [pc, #36]	@ (8000c34 <processCommand+0x22c>)
 8000c10:	f005 f948 	bl	8005ea4 <siprintf>
    sendUartMessage(outputBuffer);
 8000c14:	4807      	ldr	r0, [pc, #28]	@ (8000c34 <processCommand+0x22c>)
 8000c16:	f7ff fed3 	bl	80009c0 <sendUartMessage>
}
 8000c1a:	bf00      	nop
 8000c1c:	3720      	adds	r7, #32
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200002f0 	.word	0x200002f0
 8000c28:	08006ad8 	.word	0x08006ad8
 8000c2c:	20000004 	.word	0x20000004
 8000c30:	08006adc 	.word	0x08006adc
 8000c34:	20000224 	.word	0x20000224
 8000c38:	08006b00 	.word	0x08006b00
 8000c3c:	20000020 	.word	0x20000020
 8000c40:	08006b04 	.word	0x08006b04
 8000c44:	08006b24 	.word	0x08006b24
 8000c48:	2000003c 	.word	0x2000003c
 8000c4c:	08006b28 	.word	0x08006b28
 8000c50:	08006b48 	.word	0x08006b48
 8000c54:	08006b50 	.word	0x08006b50
 8000c58:	08006b74 	.word	0x08006b74
 8000c5c:	08006b7c 	.word	0x08006b7c
 8000c60:	08006b9c 	.word	0x08006b9c
 8000c64:	08006ba4 	.word	0x08006ba4
 8000c68:	08006bc8 	.word	0x08006bc8
 8000c6c:	20000307 	.word	0x20000307
 8000c70:	08006bd0 	.word	0x08006bd0
 8000c74:	08006bfc 	.word	0x08006bfc
 8000c78:	08006c04 	.word	0x08006c04
 8000c7c:	08006c3c 	.word	0x08006c3c
 8000c80:	08006c68 	.word	0x08006c68

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8a:	f000 fbc8 	bl	800141e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8e:	f000 f8f7 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c92:	f000 f9b9 	bl	8001008 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c96:	f000 f985 	bl	8000fa4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000c9a:	f000 f937 	bl	8000f0c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Nastavení pinů pro zelenou LED (PC7)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	4b66      	ldr	r3, [pc, #408]	@ (8000e48 <main+0x1c4>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb2:	4a65      	ldr	r2, [pc, #404]	@ (8000e48 <main+0x1c4>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cba:	4b63      	ldr	r3, [pc, #396]	@ (8000e48 <main+0x1c4>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cc6:	2380      	movs	r3, #128	@ 0x80
 8000cc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	4619      	mov	r1, r3
 8000cdc:	485b      	ldr	r0, [pc, #364]	@ (8000e4c <main+0x1c8>)
 8000cde:	f000 ff99 	bl	8001c14 <HAL_GPIO_Init>

  // Nastartování příjmu UART přes přerušení
  startUartRxInterrupt();
 8000ce2:	f7ff fe83 	bl	80009ec <startUartRxInterrupt>

  // Zaslání start zprávy
  sendUartMessage("\r\n--- LED ovladaci system ---\r\n");
 8000ce6:	485a      	ldr	r0, [pc, #360]	@ (8000e50 <main+0x1cc>)
 8000ce8:	f7ff fe6a 	bl	80009c0 <sendUartMessage>
  sendUartMessage("Dostupne prikazy:\r\n");
 8000cec:	4859      	ldr	r0, [pc, #356]	@ (8000e54 <main+0x1d0>)
 8000cee:	f7ff fe67 	bl	80009c0 <sendUartMessage>
  sendUartMessage("RON, BON, GON - Zapnuti  Cervene / Modre / Zelene LED\r\n");
 8000cf2:	4859      	ldr	r0, [pc, #356]	@ (8000e58 <main+0x1d4>)
 8000cf4:	f7ff fe64 	bl	80009c0 <sendUartMessage>
  sendUartMessage("ROFF, BOFF, GOFF - Vypnuti  Cervene / Modre / Zelene LED\r\n");
 8000cf8:	4858      	ldr	r0, [pc, #352]	@ (8000e5c <main+0x1d8>)
 8000cfa:	f7ff fe61 	bl	80009c0 <sendUartMessage>
  sendUartMessage("RESET - Reset na pocatecni stav\r\n");
 8000cfe:	4858      	ldr	r0, [pc, #352]	@ (8000e60 <main+0x1dc>)
 8000d00:	f7ff fe5e 	bl	80009c0 <sendUartMessage>
  sendUartMessage("BLIK n - Vsechny LED blikaji s periodou \"n\" \r\n");
 8000d04:	4857      	ldr	r0, [pc, #348]	@ (8000e64 <main+0x1e0>)
 8000d06:	f7ff fe5b 	bl	80009c0 <sendUartMessage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint32_t currentTime = HAL_GetTick();
 8000d0a:	f000 fbf1 	bl	80014f0 <HAL_GetTick>
 8000d0e:	61f8      	str	r0, [r7, #28]

    // Zpracování příkazů
    if (commandReady) {
 8000d10:	4b55      	ldr	r3, [pc, #340]	@ (8000e68 <main+0x1e4>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d004      	beq.n	8000d24 <main+0xa0>
      processCommand();
 8000d1a:	f7ff fe75 	bl	8000a08 <processCommand>
      commandReady = false;
 8000d1e:	4b52      	ldr	r3, [pc, #328]	@ (8000e68 <main+0x1e4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
    }

    // Zpracování tlačítka
    handleButton(currentTime);
 8000d24:	69f8      	ldr	r0, [r7, #28]
 8000d26:	f7ff fd59 	bl	80007dc <handleButton>

    // Aktualizace stavu LED diod

    // Červená LED - chování podle aktuálního stavu
    if (currentState != STATE_BLINK_COMMAND) {
 8000d2a:	4b50      	ldr	r3, [pc, #320]	@ (8000e6c <main+0x1e8>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	d035      	beq.n	8000d9e <main+0x11a>
      if (currentState == STATE_INITIAL) {
 8000d32:	4b4e      	ldr	r3, [pc, #312]	@ (8000e6c <main+0x1e8>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10e      	bne.n	8000d58 <main+0xd4>
        // Ve stavu 1 bliká s periodou 250ms
        if (redLed.mode != LED_MODE_ON && redLed.mode != LED_MODE_OFF) {
 8000d3a:	4b4d      	ldr	r3, [pc, #308]	@ (8000e70 <main+0x1ec>)
 8000d3c:	799b      	ldrb	r3, [r3, #6]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d02d      	beq.n	8000d9e <main+0x11a>
 8000d42:	4b4b      	ldr	r3, [pc, #300]	@ (8000e70 <main+0x1ec>)
 8000d44:	799b      	ldrb	r3, [r3, #6]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d029      	beq.n	8000d9e <main+0x11a>
          redLed.mode = LED_MODE_BLINK;
 8000d4a:	4b49      	ldr	r3, [pc, #292]	@ (8000e70 <main+0x1ec>)
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	719a      	strb	r2, [r3, #6]
          redLed.blinkPeriod = 250;
 8000d50:	4b47      	ldr	r3, [pc, #284]	@ (8000e70 <main+0x1ec>)
 8000d52:	22fa      	movs	r2, #250	@ 0xfa
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	e022      	b.n	8000d9e <main+0x11a>
        }
      } else if (currentState == STATE_BUTTON_TOGGLE) {
 8000d58:	4b44      	ldr	r3, [pc, #272]	@ (8000e6c <main+0x1e8>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d10b      	bne.n	8000d78 <main+0xf4>
        // Ve stavu 2 je ovládána tlačítkem
        if (redLed.mode != LED_MODE_ON && redLed.mode != LED_MODE_OFF) {
 8000d60:	4b43      	ldr	r3, [pc, #268]	@ (8000e70 <main+0x1ec>)
 8000d62:	799b      	ldrb	r3, [r3, #6]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d01a      	beq.n	8000d9e <main+0x11a>
 8000d68:	4b41      	ldr	r3, [pc, #260]	@ (8000e70 <main+0x1ec>)
 8000d6a:	799b      	ldrb	r3, [r3, #6]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d016      	beq.n	8000d9e <main+0x11a>
          redLed.mode = LED_MODE_OFF; // Základní stav, přepínán tlačítkem
 8000d70:	4b3f      	ldr	r3, [pc, #252]	@ (8000e70 <main+0x1ec>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	719a      	strb	r2, [r3, #6]
 8000d76:	e012      	b.n	8000d9e <main+0x11a>
        }
      } else if (currentState == STATE_CUSTOM_PERIOD) {
 8000d78:	4b3c      	ldr	r3, [pc, #240]	@ (8000e6c <main+0x1e8>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d10e      	bne.n	8000d9e <main+0x11a>
        // Ve stavu 4 bliká s periodou podle délky stisku
        if (redLed.mode != LED_MODE_ON && redLed.mode != LED_MODE_OFF) {
 8000d80:	4b3b      	ldr	r3, [pc, #236]	@ (8000e70 <main+0x1ec>)
 8000d82:	799b      	ldrb	r3, [r3, #6]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d00a      	beq.n	8000d9e <main+0x11a>
 8000d88:	4b39      	ldr	r3, [pc, #228]	@ (8000e70 <main+0x1ec>)
 8000d8a:	799b      	ldrb	r3, [r3, #6]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d006      	beq.n	8000d9e <main+0x11a>
          redLed.mode = LED_MODE_BLINK;
 8000d90:	4b37      	ldr	r3, [pc, #220]	@ (8000e70 <main+0x1ec>)
 8000d92:	2202      	movs	r2, #2
 8000d94:	719a      	strb	r2, [r3, #6]
          redLed.blinkPeriod = customBlinkPeriod;
 8000d96:	4b37      	ldr	r3, [pc, #220]	@ (8000e74 <main+0x1f0>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a35      	ldr	r2, [pc, #212]	@ (8000e70 <main+0x1ec>)
 8000d9c:	6093      	str	r3, [r2, #8]
        }
      }
    }

    // Modrá LED - chování podle aktuálního stavu
    if (currentState != STATE_BLINK_COMMAND) {
 8000d9e:	4b33      	ldr	r3, [pc, #204]	@ (8000e6c <main+0x1e8>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d042      	beq.n	8000e2c <main+0x1a8>
      if (currentState == STATE_INITIAL) {
 8000da6:	4b31      	ldr	r3, [pc, #196]	@ (8000e6c <main+0x1e8>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10f      	bne.n	8000dce <main+0x14a>
        // Ve stavu 1 bliká s periodou 500ms
        if (blueLed.mode != LED_MODE_ON && blueLed.mode != LED_MODE_OFF) {
 8000dae:	4b32      	ldr	r3, [pc, #200]	@ (8000e78 <main+0x1f4>)
 8000db0:	799b      	ldrb	r3, [r3, #6]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d03a      	beq.n	8000e2c <main+0x1a8>
 8000db6:	4b30      	ldr	r3, [pc, #192]	@ (8000e78 <main+0x1f4>)
 8000db8:	799b      	ldrb	r3, [r3, #6]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d036      	beq.n	8000e2c <main+0x1a8>
          blueLed.mode = LED_MODE_BLINK;
 8000dbe:	4b2e      	ldr	r3, [pc, #184]	@ (8000e78 <main+0x1f4>)
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	719a      	strb	r2, [r3, #6]
          blueLed.blinkPeriod = 500;
 8000dc4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e78 <main+0x1f4>)
 8000dc6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	e02e      	b.n	8000e2c <main+0x1a8>
        }
      } else if (currentState == STATE_BUTTON_TOGGLE || currentState == STATE_TRANSITIONAL) {
 8000dce:	4b27      	ldr	r3, [pc, #156]	@ (8000e6c <main+0x1e8>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d003      	beq.n	8000dde <main+0x15a>
 8000dd6:	4b25      	ldr	r3, [pc, #148]	@ (8000e6c <main+0x1e8>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d10e      	bne.n	8000dfc <main+0x178>
        // Ve stavu 2 a přechodném stavu bliká s periodou 100ms
        if (blueLed.mode != LED_MODE_ON && blueLed.mode != LED_MODE_OFF) {
 8000dde:	4b26      	ldr	r3, [pc, #152]	@ (8000e78 <main+0x1f4>)
 8000de0:	799b      	ldrb	r3, [r3, #6]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d021      	beq.n	8000e2a <main+0x1a6>
 8000de6:	4b24      	ldr	r3, [pc, #144]	@ (8000e78 <main+0x1f4>)
 8000de8:	799b      	ldrb	r3, [r3, #6]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d01d      	beq.n	8000e2a <main+0x1a6>
          blueLed.mode = LED_MODE_BLINK;
 8000dee:	4b22      	ldr	r3, [pc, #136]	@ (8000e78 <main+0x1f4>)
 8000df0:	2202      	movs	r2, #2
 8000df2:	719a      	strb	r2, [r3, #6]
          blueLed.blinkPeriod = 200; // 100ms perioda (50ms on, 50ms off)
 8000df4:	4b20      	ldr	r3, [pc, #128]	@ (8000e78 <main+0x1f4>)
 8000df6:	22c8      	movs	r2, #200	@ 0xc8
 8000df8:	609a      	str	r2, [r3, #8]
        if (blueLed.mode != LED_MODE_ON && blueLed.mode != LED_MODE_OFF) {
 8000dfa:	e016      	b.n	8000e2a <main+0x1a6>
        }
      } else if (currentState == STATE_CUSTOM_PERIOD) {
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e6c <main+0x1e8>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d113      	bne.n	8000e2c <main+0x1a8>
        // Ve stavu 4 bliká asynchronně 100ms svítí/400ms nesvítí
        if (blueLed.mode != LED_MODE_ON && blueLed.mode != LED_MODE_OFF) {
 8000e04:	4b1c      	ldr	r3, [pc, #112]	@ (8000e78 <main+0x1f4>)
 8000e06:	799b      	ldrb	r3, [r3, #6]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d00f      	beq.n	8000e2c <main+0x1a8>
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <main+0x1f4>)
 8000e0e:	799b      	ldrb	r3, [r3, #6]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00b      	beq.n	8000e2c <main+0x1a8>
          blueLed.mode = LED_MODE_BLINK_ASYM;
 8000e14:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <main+0x1f4>)
 8000e16:	2203      	movs	r2, #3
 8000e18:	719a      	strb	r2, [r3, #6]
          blueLed.onTime = 100;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	@ (8000e78 <main+0x1f4>)
 8000e1c:	2264      	movs	r2, #100	@ 0x64
 8000e1e:	615a      	str	r2, [r3, #20]
          blueLed.offTime = 400;
 8000e20:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <main+0x1f4>)
 8000e22:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000e26:	619a      	str	r2, [r3, #24]
 8000e28:	e000      	b.n	8000e2c <main+0x1a8>
        if (blueLed.mode != LED_MODE_ON && blueLed.mode != LED_MODE_OFF) {
 8000e2a:	bf00      	nop
        }
      }
    }

    // Aktualizace stavu jednotlivých LED
    updateLed(&redLed, currentTime);
 8000e2c:	69f9      	ldr	r1, [r7, #28]
 8000e2e:	4810      	ldr	r0, [pc, #64]	@ (8000e70 <main+0x1ec>)
 8000e30:	f7ff fc46 	bl	80006c0 <updateLed>
    updateLed(&blueLed, currentTime);
 8000e34:	69f9      	ldr	r1, [r7, #28]
 8000e36:	4810      	ldr	r0, [pc, #64]	@ (8000e78 <main+0x1f4>)
 8000e38:	f7ff fc42 	bl	80006c0 <updateLed>
    updateLed(&greenLed, currentTime);
 8000e3c:	69f9      	ldr	r1, [r7, #28]
 8000e3e:	480f      	ldr	r0, [pc, #60]	@ (8000e7c <main+0x1f8>)
 8000e40:	f7ff fc3e 	bl	80006c0 <updateLed>
  {
 8000e44:	e761      	b.n	8000d0a <main+0x86>
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	48000800 	.word	0x48000800
 8000e50:	08006c88 	.word	0x08006c88
 8000e54:	08006ca8 	.word	0x08006ca8
 8000e58:	08006cbc 	.word	0x08006cbc
 8000e5c:	08006cf4 	.word	0x08006cf4
 8000e60:	08006d30 	.word	0x08006d30
 8000e64:	08006d54 	.word	0x08006d54
 8000e68:	20000306 	.word	0x20000306
 8000e6c:	20000307 	.word	0x20000307
 8000e70:	20000004 	.word	0x20000004
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000020 	.word	0x20000020
 8000e7c:	2000003c 	.word	0x2000003c

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b096      	sub	sp, #88	@ 0x58
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	2244      	movs	r2, #68	@ 0x44
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f005 f8ae 	bl	8005ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	463b      	mov	r3, r7
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ea2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ea6:	f001 f897 	bl	8001fd8 <HAL_PWREx_ControlVoltageScaling>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000eb0:	f000 f908 	bl	80010c4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000eb4:	2310      	movs	r3, #16
 8000eb6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ec0:	2360      	movs	r3, #96	@ 0x60
 8000ec2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f001 f937 	bl	8002140 <HAL_RCC_OscConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000ed8:	f000 f8f4 	bl	80010c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000edc:	230f      	movs	r3, #15
 8000ede:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fd3d 	bl	8002974 <HAL_RCC_ClockConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000f00:	f000 f8e0 	bl	80010c4 <Error_Handler>
  }
}
 8000f04:	bf00      	nop
 8000f06:	3758      	adds	r7, #88	@ 0x58
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f10:	4b22      	ldr	r3, [pc, #136]	@ (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f12:	4a23      	ldr	r2, [pc, #140]	@ (8000fa0 <MX_LPUART1_UART_Init+0x94>)
 8000f14:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f16:	4b21      	ldr	r3, [pc, #132]	@ (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f1c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b1d      	ldr	r3, [pc, #116]	@ (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	@ (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	@ (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f42:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f48:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f54:	4811      	ldr	r0, [pc, #68]	@ (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f56:	f002 fce3 	bl	8003920 <HAL_UART_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f60:	f000 f8b0 	bl	80010c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f64:	2100      	movs	r1, #0
 8000f66:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f68:	f004 fecd 	bl	8005d06 <HAL_UARTEx_SetTxFifoThreshold>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f72:	f000 f8a7 	bl	80010c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f76:	2100      	movs	r1, #0
 8000f78:	4808      	ldr	r0, [pc, #32]	@ (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f7a:	f004 ff02 	bl	8005d82 <HAL_UARTEx_SetRxFifoThreshold>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f84:	f000 f89e 	bl	80010c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f88:	4804      	ldr	r0, [pc, #16]	@ (8000f9c <MX_LPUART1_UART_Init+0x90>)
 8000f8a:	f004 fe83 	bl	8005c94 <HAL_UARTEx_DisableFifoMode>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f94:	f000 f896 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200000d0 	.word	0x200000d0
 8000fa0:	40008000 	.word	0x40008000

08000fa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000faa:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <MX_DMA_Init+0x60>)
 8000fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fae:	4a15      	ldr	r2, [pc, #84]	@ (8001004 <MX_DMA_Init+0x60>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <MX_DMA_Init+0x60>)
 8000fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fc2:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <MX_DMA_Init+0x60>)
 8000fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	@ (8001004 <MX_DMA_Init+0x60>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fce:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <MX_DMA_Init+0x60>)
 8000fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	200b      	movs	r0, #11
 8000fe0:	f000 fb6d 	bl	80016be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fe4:	200b      	movs	r0, #11
 8000fe6:	f000 fb86 	bl	80016f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	200c      	movs	r0, #12
 8000ff0:	f000 fb65 	bl	80016be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ff4:	200c      	movs	r0, #12
 8000ff6:	f000 fb7e 	bl	80016f6 <HAL_NVIC_EnableIRQ>

}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000

08001008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	4b26      	ldr	r3, [pc, #152]	@ (80010b8 <MX_GPIO_Init+0xb0>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	4a25      	ldr	r2, [pc, #148]	@ (80010b8 <MX_GPIO_Init+0xb0>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102a:	4b23      	ldr	r3, [pc, #140]	@ (80010b8 <MX_GPIO_Init+0xb0>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <MX_GPIO_Init+0xb0>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	4a1f      	ldr	r2, [pc, #124]	@ (80010b8 <MX_GPIO_Init+0xb0>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001042:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <MX_GPIO_Init+0xb0>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800104e:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <MX_GPIO_Init+0xb0>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	4a19      	ldr	r2, [pc, #100]	@ (80010b8 <MX_GPIO_Init+0xb0>)
 8001054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001058:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105a:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <MX_GPIO_Init+0xb0>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8001066:	f001 f85b 	bl	8002120 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001070:	4812      	ldr	r0, [pc, #72]	@ (80010bc <MX_GPIO_Init+0xb4>)
 8001072:	f000 ff79 	bl	8001f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001076:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800107a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	4619      	mov	r1, r3
 800108c:	480c      	ldr	r0, [pc, #48]	@ (80010c0 <MX_GPIO_Init+0xb8>)
 800108e:	f000 fdc1 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001092:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8001096:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	4619      	mov	r1, r3
 80010aa:	4804      	ldr	r0, [pc, #16]	@ (80010bc <MX_GPIO_Init+0xb4>)
 80010ac:	f000 fdb2 	bl	8001c14 <HAL_GPIO_Init>

}
 80010b0:	bf00      	nop
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40021000 	.word	0x40021000
 80010bc:	48000400 	.word	0x48000400
 80010c0:	48000800 	.word	0x48000800

080010c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <Error_Handler+0x8>

080010d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <HAL_MspInit+0x44>)
 80010d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010da:	4a0e      	ldr	r2, [pc, #56]	@ (8001114 <HAL_MspInit+0x44>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <HAL_MspInit+0x44>)
 80010e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <HAL_MspInit+0x44>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f2:	4a08      	ldr	r2, [pc, #32]	@ (8001114 <HAL_MspInit+0x44>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_MspInit+0x44>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000

08001118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b0ae      	sub	sp, #184	@ 0xb8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	2294      	movs	r2, #148	@ 0x94
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f004 ff59 	bl	8005ff0 <memset>
  if(huart->Instance==LPUART1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a50      	ldr	r2, [pc, #320]	@ (8001284 <HAL_UART_MspInit+0x16c>)
 8001144:	4293      	cmp	r3, r2
 8001146:	f040 8098 	bne.w	800127a <HAL_UART_MspInit+0x162>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800114a:	2320      	movs	r3, #32
 800114c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800114e:	2300      	movs	r3, #0
 8001150:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	4618      	mov	r0, r3
 8001158:	f001 feca 	bl	8002ef0 <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001162:	f7ff ffaf 	bl	80010c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001166:	4b48      	ldr	r3, [pc, #288]	@ (8001288 <HAL_UART_MspInit+0x170>)
 8001168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800116a:	4a47      	ldr	r2, [pc, #284]	@ (8001288 <HAL_UART_MspInit+0x170>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001172:	4b45      	ldr	r3, [pc, #276]	@ (8001288 <HAL_UART_MspInit+0x170>)
 8001174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800117e:	4b42      	ldr	r3, [pc, #264]	@ (8001288 <HAL_UART_MspInit+0x170>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	4a41      	ldr	r2, [pc, #260]	@ (8001288 <HAL_UART_MspInit+0x170>)
 8001184:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118a:	4b3f      	ldr	r3, [pc, #252]	@ (8001288 <HAL_UART_MspInit+0x170>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001196:	f000 ffc3 	bl	8002120 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800119a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800119e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80011b4:	2308      	movs	r3, #8
 80011b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011be:	4619      	mov	r1, r3
 80011c0:	4832      	ldr	r0, [pc, #200]	@ (800128c <HAL_UART_MspInit+0x174>)
 80011c2:	f000 fd27 	bl	8001c14 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80011c6:	4b32      	ldr	r3, [pc, #200]	@ (8001290 <HAL_UART_MspInit+0x178>)
 80011c8:	4a32      	ldr	r2, [pc, #200]	@ (8001294 <HAL_UART_MspInit+0x17c>)
 80011ca:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80011cc:	4b30      	ldr	r3, [pc, #192]	@ (8001290 <HAL_UART_MspInit+0x178>)
 80011ce:	2222      	movs	r2, #34	@ 0x22
 80011d0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001290 <HAL_UART_MspInit+0x178>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <HAL_UART_MspInit+0x178>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011de:	4b2c      	ldr	r3, [pc, #176]	@ (8001290 <HAL_UART_MspInit+0x178>)
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <HAL_UART_MspInit+0x178>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ea:	4b29      	ldr	r3, [pc, #164]	@ (8001290 <HAL_UART_MspInit+0x178>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80011f0:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <HAL_UART_MspInit+0x178>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011f6:	4b26      	ldr	r3, [pc, #152]	@ (8001290 <HAL_UART_MspInit+0x178>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80011fc:	4824      	ldr	r0, [pc, #144]	@ (8001290 <HAL_UART_MspInit+0x178>)
 80011fe:	f000 fa95 	bl	800172c <HAL_DMA_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8001208:	f7ff ff5c 	bl	80010c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a20      	ldr	r2, [pc, #128]	@ (8001290 <HAL_UART_MspInit+0x178>)
 8001210:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001212:	4a1f      	ldr	r2, [pc, #124]	@ (8001290 <HAL_UART_MspInit+0x178>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8001218:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <HAL_UART_MspInit+0x180>)
 800121a:	4a20      	ldr	r2, [pc, #128]	@ (800129c <HAL_UART_MspInit+0x184>)
 800121c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800121e:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <HAL_UART_MspInit+0x180>)
 8001220:	2223      	movs	r2, #35	@ 0x23
 8001222:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001224:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <HAL_UART_MspInit+0x180>)
 8001226:	2210      	movs	r2, #16
 8001228:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800122a:	4b1b      	ldr	r3, [pc, #108]	@ (8001298 <HAL_UART_MspInit+0x180>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001230:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <HAL_UART_MspInit+0x180>)
 8001232:	2280      	movs	r2, #128	@ 0x80
 8001234:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001236:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <HAL_UART_MspInit+0x180>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123c:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <HAL_UART_MspInit+0x180>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <HAL_UART_MspInit+0x180>)
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <HAL_UART_MspInit+0x180>)
 800124a:	2200      	movs	r2, #0
 800124c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800124e:	4812      	ldr	r0, [pc, #72]	@ (8001298 <HAL_UART_MspInit+0x180>)
 8001250:	f000 fa6c 	bl	800172c <HAL_DMA_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_UART_MspInit+0x146>
    {
      Error_Handler();
 800125a:	f7ff ff33 	bl	80010c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a0d      	ldr	r2, [pc, #52]	@ (8001298 <HAL_UART_MspInit+0x180>)
 8001262:	679a      	str	r2, [r3, #120]	@ 0x78
 8001264:	4a0c      	ldr	r2, [pc, #48]	@ (8001298 <HAL_UART_MspInit+0x180>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	2046      	movs	r0, #70	@ 0x46
 8001270:	f000 fa25 	bl	80016be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001274:	2046      	movs	r0, #70	@ 0x46
 8001276:	f000 fa3e 	bl	80016f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800127a:	bf00      	nop
 800127c:	37b8      	adds	r7, #184	@ 0xb8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40008000 	.word	0x40008000
 8001288:	40021000 	.word	0x40021000
 800128c:	48001800 	.word	0x48001800
 8001290:	20000160 	.word	0x20000160
 8001294:	40020008 	.word	0x40020008
 8001298:	200001c0 	.word	0x200001c0
 800129c:	4002001c 	.word	0x4002001c

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <NMI_Handler+0x4>

080012a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <HardFault_Handler+0x4>

080012b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <MemManage_Handler+0x4>

080012b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f6:	f000 f8e7 	bl	80014c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001304:	4802      	ldr	r0, [pc, #8]	@ (8001310 <DMA1_Channel1_IRQHandler+0x10>)
 8001306:	f000 fb74 	bl	80019f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000160 	.word	0x20000160

08001314 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <DMA1_Channel2_IRQHandler+0x10>)
 800131a:	f000 fb6a 	bl	80019f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200001c0 	.word	0x200001c0

08001328 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <LPUART1_IRQHandler+0x10>)
 800132e:	f002 fcdb 	bl	8003ce8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200000d0 	.word	0x200000d0

0800133c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001344:	4a14      	ldr	r2, [pc, #80]	@ (8001398 <_sbrk+0x5c>)
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <_sbrk+0x60>)
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001350:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <_sbrk+0x64>)
 800135a:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <_sbrk+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800136c:	f004 fe5a 	bl	8006024 <__errno>
 8001370:	4603      	mov	r3, r0
 8001372:	220c      	movs	r2, #12
 8001374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800137a:	e009      	b.n	8001390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001382:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <_sbrk+0x64>)
 800138c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200a0000 	.word	0x200a0000
 800139c:	00000400 	.word	0x00000400
 80013a0:	2000031c 	.word	0x2000031c
 80013a4:	20000470 	.word	0x20000470

080013a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <SystemInit+0x20>)
 80013ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013b2:	4a05      	ldr	r2, [pc, #20]	@ (80013c8 <SystemInit+0x20>)
 80013b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001404 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d0:	f7ff ffea 	bl	80013a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	@ (8001408 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	@ (800140c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <LoopForever+0xe>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001418 <LoopForever+0x16>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fa:	f004 fe19 	bl	8006030 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fe:	f7ff fc41 	bl	8000c84 <main>

08001402 <LoopForever>:

LoopForever:
    b LoopForever
 8001402:	e7fe      	b.n	8001402 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001404:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001410:	08006f38 	.word	0x08006f38
  ldr r2, =_sbss
 8001414:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001418:	2000046c 	.word	0x2000046c

0800141c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_IRQHandler>

0800141e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001428:	2003      	movs	r0, #3
 800142a:	f000 f93d 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800142e:	200f      	movs	r0, #15
 8001430:	f000 f80e 	bl	8001450 <HAL_InitTick>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d002      	beq.n	8001440 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	71fb      	strb	r3, [r7, #7]
 800143e:	e001      	b.n	8001444 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001440:	f7ff fe46 	bl	80010d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001444:	79fb      	ldrb	r3, [r7, #7]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800145c:	4b17      	ldr	r3, [pc, #92]	@ (80014bc <HAL_InitTick+0x6c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d023      	beq.n	80014ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001464:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <HAL_InitTick+0x70>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <HAL_InitTick+0x6c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001472:	fbb3 f3f1 	udiv	r3, r3, r1
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f949 	bl	8001712 <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10f      	bne.n	80014a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b0f      	cmp	r3, #15
 800148a:	d809      	bhi.n	80014a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800148c:	2200      	movs	r2, #0
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001494:	f000 f913 	bl	80016be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001498:	4a0a      	ldr	r2, [pc, #40]	@ (80014c4 <HAL_InitTick+0x74>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e007      	b.n	80014b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	e004      	b.n	80014b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	e001      	b.n	80014b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000060 	.word	0x20000060
 80014c0:	20000058 	.word	0x20000058
 80014c4:	2000005c 	.word	0x2000005c

080014c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_IncTick+0x20>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_IncTick+0x24>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a04      	ldr	r2, [pc, #16]	@ (80014ec <HAL_IncTick+0x24>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000060 	.word	0x20000060
 80014ec:	20000320 	.word	0x20000320

080014f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b03      	ldr	r3, [pc, #12]	@ (8001504 <HAL_GetTick+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000320 	.word	0x20000320

08001508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001518:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001524:	4013      	ands	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001530:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001534:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153a:	4a04      	ldr	r2, [pc, #16]	@ (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	60d3      	str	r3, [r2, #12]
}
 8001540:	bf00      	nop
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001554:	4b04      	ldr	r3, [pc, #16]	@ (8001568 <__NVIC_GetPriorityGrouping+0x18>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	f003 0307 	and.w	r3, r3, #7
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	2b00      	cmp	r3, #0
 800157c:	db0b      	blt.n	8001596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	f003 021f 	and.w	r2, r3, #31
 8001584:	4907      	ldr	r1, [pc, #28]	@ (80015a4 <__NVIC_EnableIRQ+0x38>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	095b      	lsrs	r3, r3, #5
 800158c:	2001      	movs	r0, #1
 800158e:	fa00 f202 	lsl.w	r2, r0, r2
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e100 	.word	0xe000e100

080015a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db0a      	blt.n	80015d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	@ (80015f4 <__NVIC_SetPriority+0x4c>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d0:	e00a      	b.n	80015e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4908      	ldr	r1, [pc, #32]	@ (80015f8 <__NVIC_SetPriority+0x50>)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3b04      	subs	r3, #4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	761a      	strb	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	@ 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f1c3 0307 	rsb	r3, r3, #7
 8001616:	2b04      	cmp	r3, #4
 8001618:	bf28      	it	cs
 800161a:	2304      	movcs	r3, #4
 800161c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	2b06      	cmp	r3, #6
 8001624:	d902      	bls.n	800162c <NVIC_EncodePriority+0x30>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b03      	subs	r3, #3
 800162a:	e000      	b.n	800162e <NVIC_EncodePriority+0x32>
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43d9      	mvns	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	4313      	orrs	r3, r2
         );
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	@ 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001674:	d301      	bcc.n	800167a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001676:	2301      	movs	r3, #1
 8001678:	e00f      	b.n	800169a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167a:	4a0a      	ldr	r2, [pc, #40]	@ (80016a4 <SysTick_Config+0x40>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001682:	210f      	movs	r1, #15
 8001684:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001688:	f7ff ff8e 	bl	80015a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168c:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <SysTick_Config+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <SysTick_Config+0x40>)
 8001694:	2207      	movs	r2, #7
 8001696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	e000e010 	.word	0xe000e010

080016a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff29 	bl	8001508 <__NVIC_SetPriorityGrouping>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016d0:	f7ff ff3e 	bl	8001550 <__NVIC_GetPriorityGrouping>
 80016d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	6978      	ldr	r0, [r7, #20]
 80016dc:	f7ff ff8e 	bl	80015fc <NVIC_EncodePriority>
 80016e0:	4602      	mov	r2, r0
 80016e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff5d 	bl	80015a8 <__NVIC_SetPriority>
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff31 	bl	800156c <__NVIC_EnableIRQ>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ffa2 	bl	8001664 <SysTick_Config>
 8001720:	4603      	mov	r3, r0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e08d      	b.n	800185a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	4b47      	ldr	r3, [pc, #284]	@ (8001864 <HAL_DMA_Init+0x138>)
 8001746:	429a      	cmp	r2, r3
 8001748:	d80f      	bhi.n	800176a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	4b45      	ldr	r3, [pc, #276]	@ (8001868 <HAL_DMA_Init+0x13c>)
 8001752:	4413      	add	r3, r2
 8001754:	4a45      	ldr	r2, [pc, #276]	@ (800186c <HAL_DMA_Init+0x140>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	009a      	lsls	r2, r3, #2
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a42      	ldr	r2, [pc, #264]	@ (8001870 <HAL_DMA_Init+0x144>)
 8001766:	641a      	str	r2, [r3, #64]	@ 0x40
 8001768:	e00e      	b.n	8001788 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	4b40      	ldr	r3, [pc, #256]	@ (8001874 <HAL_DMA_Init+0x148>)
 8001772:	4413      	add	r3, r2
 8001774:	4a3d      	ldr	r2, [pc, #244]	@ (800186c <HAL_DMA_Init+0x140>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	009a      	lsls	r2, r3, #2
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a3c      	ldr	r2, [pc, #240]	@ (8001878 <HAL_DMA_Init+0x14c>)
 8001786:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2202      	movs	r2, #2
 800178c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800179e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f9b8 	bl	8001b50 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017e8:	d102      	bne.n	80017f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001804:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d010      	beq.n	8001830 <HAL_DMA_Init+0x104>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b04      	cmp	r3, #4
 8001814:	d80c      	bhi.n	8001830 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f9d8 	bl	8001bcc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	e008      	b.n	8001842 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40020407 	.word	0x40020407
 8001868:	bffdfff8 	.word	0xbffdfff8
 800186c:	cccccccd 	.word	0xcccccccd
 8001870:	40020000 	.word	0x40020000
 8001874:	bffdfbf8 	.word	0xbffdfbf8
 8001878:	40020400 	.word	0x40020400

0800187c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d008      	beq.n	80018a6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2204      	movs	r2, #4
 8001898:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e040      	b.n	8001928 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 020e 	bic.w	r2, r2, #14
 80018b4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018c4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0201 	bic.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018da:	f003 021c 	and.w	r2, r3, #28
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	2101      	movs	r1, #1
 80018e4:	fa01 f202 	lsl.w	r2, r1, r2
 80018e8:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018f2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00c      	beq.n	8001916 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001906:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800190a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001914:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d005      	beq.n	8001958 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2204      	movs	r2, #4
 8001950:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	e047      	b.n	80019e8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 020e 	bic.w	r2, r2, #14
 8001966:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001982:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001986:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198c:	f003 021c 	and.w	r2, r3, #28
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	2101      	movs	r1, #1
 8001996:	fa01 f202 	lsl.w	r2, r1, r2
 800199a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019a4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00c      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80019c6:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4798      	blx	r3
    }
  }
  return status;
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0e:	f003 031c 	and.w	r3, r3, #28
 8001a12:	2204      	movs	r2, #4
 8001a14:	409a      	lsls	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d026      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x7a>
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d021      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0320 	and.w	r3, r3, #32
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d107      	bne.n	8001a46 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0204 	bic.w	r2, r2, #4
 8001a44:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	f003 021c 	and.w	r2, r3, #28
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	2104      	movs	r1, #4
 8001a54:	fa01 f202 	lsl.w	r2, r1, r2
 8001a58:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d071      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001a6a:	e06c      	b.n	8001b46 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a70:	f003 031c 	and.w	r3, r3, #28
 8001a74:	2202      	movs	r2, #2
 8001a76:	409a      	lsls	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d02e      	beq.n	8001ade <HAL_DMA_IRQHandler+0xec>
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d029      	beq.n	8001ade <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0320 	and.w	r3, r3, #32
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10b      	bne.n	8001ab0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 020a 	bic.w	r2, r2, #10
 8001aa6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab4:	f003 021c 	and.w	r2, r3, #28
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	2102      	movs	r1, #2
 8001abe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if(hdma->XferCpltCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d038      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001adc:	e033      	b.n	8001b46 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	f003 031c 	and.w	r3, r3, #28
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d02a      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x156>
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d025      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 020e 	bic.w	r2, r2, #14
 8001b0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b10:	f003 021c 	and.w	r2, r3, #28
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b18:	2101      	movs	r1, #1
 8001b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b46:	bf00      	nop
 8001b48:	bf00      	nop
}
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b17      	ldr	r3, [pc, #92]	@ (8001bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d80a      	bhi.n	8001b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b68:	089b      	lsrs	r3, r3, #2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001b70:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b78:	e007      	b.n	8001b8a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	009a      	lsls	r2, r3, #2
 8001b82:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b84:	4413      	add	r3, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	3b08      	subs	r3, #8
 8001b92:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001ba0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f003 031f 	and.w	r3, r3, #31
 8001ba8:	2201      	movs	r2, #1
 8001baa:	409a      	lsls	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	40020407 	.word	0x40020407
 8001bc0:	4002081c 	.word	0x4002081c
 8001bc4:	cccccccd 	.word	0xcccccccd
 8001bc8:	40020880 	.word	0x40020880

08001bcc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	461a      	mov	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a08      	ldr	r2, [pc, #32]	@ (8001c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001bee:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	1000823f 	.word	0x1000823f
 8001c10:	40020940 	.word	0x40020940

08001c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c22:	e166      	b.n	8001ef2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2101      	movs	r1, #1
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8158 	beq.w	8001eec <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d005      	beq.n	8001c54 <HAL_GPIO_Init+0x40>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d130      	bne.n	8001cb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	f003 0201 	and.w	r2, r3, #1
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d017      	beq.n	8001cf2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	2203      	movs	r2, #3
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d123      	bne.n	8001d46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3208      	adds	r2, #8
 8001d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	220f      	movs	r2, #15
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	08da      	lsrs	r2, r3, #3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3208      	adds	r2, #8
 8001d40:	6939      	ldr	r1, [r7, #16]
 8001d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	2203      	movs	r2, #3
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 0203 	and.w	r2, r3, #3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 80b2 	beq.w	8001eec <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d88:	4b61      	ldr	r3, [pc, #388]	@ (8001f10 <HAL_GPIO_Init+0x2fc>)
 8001d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d8c:	4a60      	ldr	r2, [pc, #384]	@ (8001f10 <HAL_GPIO_Init+0x2fc>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d94:	4b5e      	ldr	r3, [pc, #376]	@ (8001f10 <HAL_GPIO_Init+0x2fc>)
 8001d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001da0:	4a5c      	ldr	r2, [pc, #368]	@ (8001f14 <HAL_GPIO_Init+0x300>)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	3302      	adds	r3, #2
 8001da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	220f      	movs	r2, #15
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dca:	d02b      	beq.n	8001e24 <HAL_GPIO_Init+0x210>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a52      	ldr	r2, [pc, #328]	@ (8001f18 <HAL_GPIO_Init+0x304>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d025      	beq.n	8001e20 <HAL_GPIO_Init+0x20c>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a51      	ldr	r2, [pc, #324]	@ (8001f1c <HAL_GPIO_Init+0x308>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d01f      	beq.n	8001e1c <HAL_GPIO_Init+0x208>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a50      	ldr	r2, [pc, #320]	@ (8001f20 <HAL_GPIO_Init+0x30c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d019      	beq.n	8001e18 <HAL_GPIO_Init+0x204>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a4f      	ldr	r2, [pc, #316]	@ (8001f24 <HAL_GPIO_Init+0x310>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d013      	beq.n	8001e14 <HAL_GPIO_Init+0x200>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a4e      	ldr	r2, [pc, #312]	@ (8001f28 <HAL_GPIO_Init+0x314>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d00d      	beq.n	8001e10 <HAL_GPIO_Init+0x1fc>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a4d      	ldr	r2, [pc, #308]	@ (8001f2c <HAL_GPIO_Init+0x318>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d007      	beq.n	8001e0c <HAL_GPIO_Init+0x1f8>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a4c      	ldr	r2, [pc, #304]	@ (8001f30 <HAL_GPIO_Init+0x31c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d101      	bne.n	8001e08 <HAL_GPIO_Init+0x1f4>
 8001e04:	2307      	movs	r3, #7
 8001e06:	e00e      	b.n	8001e26 <HAL_GPIO_Init+0x212>
 8001e08:	2308      	movs	r3, #8
 8001e0a:	e00c      	b.n	8001e26 <HAL_GPIO_Init+0x212>
 8001e0c:	2306      	movs	r3, #6
 8001e0e:	e00a      	b.n	8001e26 <HAL_GPIO_Init+0x212>
 8001e10:	2305      	movs	r3, #5
 8001e12:	e008      	b.n	8001e26 <HAL_GPIO_Init+0x212>
 8001e14:	2304      	movs	r3, #4
 8001e16:	e006      	b.n	8001e26 <HAL_GPIO_Init+0x212>
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e004      	b.n	8001e26 <HAL_GPIO_Init+0x212>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e002      	b.n	8001e26 <HAL_GPIO_Init+0x212>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <HAL_GPIO_Init+0x212>
 8001e24:	2300      	movs	r3, #0
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	f002 0203 	and.w	r2, r2, #3
 8001e2c:	0092      	lsls	r2, r2, #2
 8001e2e:	4093      	lsls	r3, r2
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e36:	4937      	ldr	r1, [pc, #220]	@ (8001f14 <HAL_GPIO_Init+0x300>)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e44:	4b3b      	ldr	r3, [pc, #236]	@ (8001f34 <HAL_GPIO_Init+0x320>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e68:	4a32      	ldr	r2, [pc, #200]	@ (8001f34 <HAL_GPIO_Init+0x320>)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e6e:	4b31      	ldr	r3, [pc, #196]	@ (8001f34 <HAL_GPIO_Init+0x320>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e92:	4a28      	ldr	r2, [pc, #160]	@ (8001f34 <HAL_GPIO_Init+0x320>)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e98:	4b26      	ldr	r3, [pc, #152]	@ (8001f34 <HAL_GPIO_Init+0x320>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f34 <HAL_GPIO_Init+0x320>)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f34 <HAL_GPIO_Init+0x320>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ee6:	4a13      	ldr	r2, [pc, #76]	@ (8001f34 <HAL_GPIO_Init+0x320>)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f47f ae91 	bne.w	8001c24 <HAL_GPIO_Init+0x10>
  }
}
 8001f02:	bf00      	nop
 8001f04:	bf00      	nop
 8001f06:	371c      	adds	r7, #28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40010000 	.word	0x40010000
 8001f18:	48000400 	.word	0x48000400
 8001f1c:	48000800 	.word	0x48000800
 8001f20:	48000c00 	.word	0x48000c00
 8001f24:	48001000 	.word	0x48001000
 8001f28:	48001400 	.word	0x48001400
 8001f2c:	48001800 	.word	0x48001800
 8001f30:	48001c00 	.word	0x48001c00
 8001f34:	40010400 	.word	0x40010400

08001f38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	887b      	ldrh	r3, [r7, #2]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d002      	beq.n	8001f56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
 8001f54:	e001      	b.n	8001f5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]
 8001f74:	4613      	mov	r3, r2
 8001f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f78:	787b      	ldrb	r3, [r7, #1]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f7e:	887a      	ldrh	r2, [r7, #2]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f84:	e002      	b.n	8001f8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fa8:	d102      	bne.n	8001fb0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001faa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fae:	e00b      	b.n	8001fc8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001fb0:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fbe:	d102      	bne.n	8001fc6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001fc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fc4:	e000      	b.n	8001fc8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001fc6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40007000 	.word	0x40007000

08001fd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d141      	bne.n	800206a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fe6:	4b4b      	ldr	r3, [pc, #300]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ff2:	d131      	bne.n	8002058 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ff4:	4b47      	ldr	r3, [pc, #284]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ffa:	4a46      	ldr	r2, [pc, #280]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002000:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002004:	4b43      	ldr	r3, [pc, #268]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800200c:	4a41      	ldr	r2, [pc, #260]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002012:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002014:	4b40      	ldr	r3, [pc, #256]	@ (8002118 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2232      	movs	r2, #50	@ 0x32
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	4a3f      	ldr	r2, [pc, #252]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	0c9b      	lsrs	r3, r3, #18
 8002026:	3301      	adds	r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800202a:	e002      	b.n	8002032 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3b01      	subs	r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002032:	4b38      	ldr	r3, [pc, #224]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800203a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800203e:	d102      	bne.n	8002046 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f2      	bne.n	800202c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002046:	4b33      	ldr	r3, [pc, #204]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002052:	d158      	bne.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e057      	b.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002058:	4b2e      	ldr	r3, [pc, #184]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800205e:	4a2d      	ldr	r2, [pc, #180]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002064:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002068:	e04d      	b.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002070:	d141      	bne.n	80020f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002072:	4b28      	ldr	r3, [pc, #160]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800207a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800207e:	d131      	bne.n	80020e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002080:	4b24      	ldr	r3, [pc, #144]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002086:	4a23      	ldr	r2, [pc, #140]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002090:	4b20      	ldr	r3, [pc, #128]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002098:	4a1e      	ldr	r2, [pc, #120]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800209e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002118 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2232      	movs	r2, #50	@ 0x32
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	4a1c      	ldr	r2, [pc, #112]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020ac:	fba2 2303 	umull	r2, r3, r2, r3
 80020b0:	0c9b      	lsrs	r3, r3, #18
 80020b2:	3301      	adds	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b6:	e002      	b.n	80020be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020be:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ca:	d102      	bne.n	80020d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f2      	bne.n	80020b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020de:	d112      	bne.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e011      	b.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020f4:	e007      	b.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020f6:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020fe:	4a05      	ldr	r2, [pc, #20]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002100:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002104:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	40007000 	.word	0x40007000
 8002118:	20000058 	.word	0x20000058
 800211c:	431bde83 	.word	0x431bde83

08002120 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002124:	4b05      	ldr	r3, [pc, #20]	@ (800213c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4a04      	ldr	r2, [pc, #16]	@ (800213c <HAL_PWREx_EnableVddIO2+0x1c>)
 800212a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800212e:	6053      	str	r3, [r2, #4]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40007000 	.word	0x40007000

08002140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	f000 bc08 	b.w	8002964 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002154:	4b96      	ldr	r3, [pc, #600]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800215e:	4b94      	ldr	r3, [pc, #592]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80e4 	beq.w	800233e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <HAL_RCC_OscConfig+0x4c>
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2b0c      	cmp	r3, #12
 8002180:	f040 808b 	bne.w	800229a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2b01      	cmp	r3, #1
 8002188:	f040 8087 	bne.w	800229a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800218c:	4b88      	ldr	r3, [pc, #544]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_OscConfig+0x64>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e3df      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	4b81      	ldr	r3, [pc, #516]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d004      	beq.n	80021be <HAL_RCC_OscConfig+0x7e>
 80021b4:	4b7e      	ldr	r3, [pc, #504]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021bc:	e005      	b.n	80021ca <HAL_RCC_OscConfig+0x8a>
 80021be:	4b7c      	ldr	r3, [pc, #496]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 80021c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d223      	bcs.n	8002216 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fdcc 	bl	8002d70 <RCC_SetFlashLatencyFromMSIRange>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e3c0      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e2:	4b73      	ldr	r3, [pc, #460]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a72      	ldr	r2, [pc, #456]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 80021e8:	f043 0308 	orr.w	r3, r3, #8
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b70      	ldr	r3, [pc, #448]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	496d      	ldr	r1, [pc, #436]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002200:	4b6b      	ldr	r3, [pc, #428]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	4968      	ldr	r1, [pc, #416]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
 8002214:	e025      	b.n	8002262 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002216:	4b66      	ldr	r3, [pc, #408]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a65      	ldr	r2, [pc, #404]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 800221c:	f043 0308 	orr.w	r3, r3, #8
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b63      	ldr	r3, [pc, #396]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4960      	ldr	r1, [pc, #384]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002234:	4b5e      	ldr	r3, [pc, #376]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	495b      	ldr	r1, [pc, #364]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fd8c 	bl	8002d70 <RCC_SetFlashLatencyFromMSIRange>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e380      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002262:	f000 fcc1 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8002266:	4602      	mov	r2, r0
 8002268:	4b51      	ldr	r3, [pc, #324]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	4950      	ldr	r1, [pc, #320]	@ (80023b4 <HAL_RCC_OscConfig+0x274>)
 8002274:	5ccb      	ldrb	r3, [r1, r3]
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	4a4e      	ldr	r2, [pc, #312]	@ (80023b8 <HAL_RCC_OscConfig+0x278>)
 8002280:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002282:	4b4e      	ldr	r3, [pc, #312]	@ (80023bc <HAL_RCC_OscConfig+0x27c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff f8e2 	bl	8001450 <HAL_InitTick>
 800228c:	4603      	mov	r3, r0
 800228e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d052      	beq.n	800233c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	e364      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d032      	beq.n	8002308 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022a2:	4b43      	ldr	r3, [pc, #268]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a42      	ldr	r2, [pc, #264]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022ae:	f7ff f91f 	bl	80014f0 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022b6:	f7ff f91b 	bl	80014f0 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e34d      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022c8:	4b39      	ldr	r3, [pc, #228]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d4:	4b36      	ldr	r3, [pc, #216]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a35      	ldr	r2, [pc, #212]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022da:	f043 0308 	orr.w	r3, r3, #8
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b33      	ldr	r3, [pc, #204]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	4930      	ldr	r1, [pc, #192]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f2:	4b2f      	ldr	r3, [pc, #188]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	492b      	ldr	r1, [pc, #172]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
 8002306:	e01a      	b.n	800233e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002308:	4b29      	ldr	r3, [pc, #164]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a28      	ldr	r2, [pc, #160]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002314:	f7ff f8ec 	bl	80014f0 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800231c:	f7ff f8e8 	bl	80014f0 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e31a      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800232e:	4b20      	ldr	r3, [pc, #128]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x1dc>
 800233a:	e000      	b.n	800233e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800233c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d073      	beq.n	8002432 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	2b08      	cmp	r3, #8
 800234e:	d005      	beq.n	800235c <HAL_RCC_OscConfig+0x21c>
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2b0c      	cmp	r3, #12
 8002354:	d10e      	bne.n	8002374 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d10b      	bne.n	8002374 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235c:	4b14      	ldr	r3, [pc, #80]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d063      	beq.n	8002430 <HAL_RCC_OscConfig+0x2f0>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d15f      	bne.n	8002430 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e2f7      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800237c:	d106      	bne.n	800238c <HAL_RCC_OscConfig+0x24c>
 800237e:	4b0c      	ldr	r3, [pc, #48]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a0b      	ldr	r2, [pc, #44]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e025      	b.n	80023d8 <HAL_RCC_OscConfig+0x298>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002394:	d114      	bne.n	80023c0 <HAL_RCC_OscConfig+0x280>
 8002396:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a05      	ldr	r2, [pc, #20]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 800239c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b03      	ldr	r3, [pc, #12]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a02      	ldr	r2, [pc, #8]	@ (80023b0 <HAL_RCC_OscConfig+0x270>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e013      	b.n	80023d8 <HAL_RCC_OscConfig+0x298>
 80023b0:	40021000 	.word	0x40021000
 80023b4:	08006d84 	.word	0x08006d84
 80023b8:	20000058 	.word	0x20000058
 80023bc:	2000005c 	.word	0x2000005c
 80023c0:	4ba0      	ldr	r3, [pc, #640]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a9f      	ldr	r2, [pc, #636]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b9d      	ldr	r3, [pc, #628]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a9c      	ldr	r2, [pc, #624]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 80023d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d013      	beq.n	8002408 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7ff f886 	bl	80014f0 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e8:	f7ff f882 	bl	80014f0 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	@ 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e2b4      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fa:	4b92      	ldr	r3, [pc, #584]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x2a8>
 8002406:	e014      	b.n	8002432 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7ff f872 	bl	80014f0 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002410:	f7ff f86e 	bl	80014f0 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	@ 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e2a0      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002422:	4b88      	ldr	r3, [pc, #544]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x2d0>
 800242e:	e000      	b.n	8002432 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d060      	beq.n	8002500 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	2b04      	cmp	r3, #4
 8002442:	d005      	beq.n	8002450 <HAL_RCC_OscConfig+0x310>
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	2b0c      	cmp	r3, #12
 8002448:	d119      	bne.n	800247e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d116      	bne.n	800247e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002450:	4b7c      	ldr	r3, [pc, #496]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_OscConfig+0x328>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e27d      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002468:	4b76      	ldr	r3, [pc, #472]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	061b      	lsls	r3, r3, #24
 8002476:	4973      	ldr	r1, [pc, #460]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800247c:	e040      	b.n	8002500 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d023      	beq.n	80024ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002486:	4b6f      	ldr	r3, [pc, #444]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a6e      	ldr	r2, [pc, #440]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7ff f82d 	bl	80014f0 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249a:	f7ff f829 	bl	80014f0 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e25b      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ac:	4b65      	ldr	r3, [pc, #404]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b8:	4b62      	ldr	r3, [pc, #392]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	495f      	ldr	r1, [pc, #380]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
 80024cc:	e018      	b.n	8002500 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a5c      	ldr	r2, [pc, #368]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 80024d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f7ff f809 	bl	80014f0 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e2:	f7ff f805 	bl	80014f0 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e237      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024f4:	4b53      	ldr	r3, [pc, #332]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f0      	bne.n	80024e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b00      	cmp	r3, #0
 800250a:	d03c      	beq.n	8002586 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01c      	beq.n	800254e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002514:	4b4b      	ldr	r3, [pc, #300]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 8002516:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800251a:	4a4a      	ldr	r2, [pc, #296]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002524:	f7fe ffe4 	bl	80014f0 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252c:	f7fe ffe0 	bl	80014f0 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e212      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800253e:	4b41      	ldr	r3, [pc, #260]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 8002540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0ef      	beq.n	800252c <HAL_RCC_OscConfig+0x3ec>
 800254c:	e01b      	b.n	8002586 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254e:	4b3d      	ldr	r3, [pc, #244]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 8002550:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002554:	4a3b      	ldr	r2, [pc, #236]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255e:	f7fe ffc7 	bl	80014f0 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe ffc3 	bl	80014f0 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e1f5      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002578:	4b32      	ldr	r3, [pc, #200]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 800257a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1ef      	bne.n	8002566 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 80a6 	beq.w	80026e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002594:	2300      	movs	r3, #0
 8002596:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002598:	4b2a      	ldr	r3, [pc, #168]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10d      	bne.n	80025c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a4:	4b27      	ldr	r3, [pc, #156]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 80025a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a8:	4a26      	ldr	r2, [pc, #152]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 80025aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80025b0:	4b24      	ldr	r3, [pc, #144]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 80025b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025bc:	2301      	movs	r3, #1
 80025be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c0:	4b21      	ldr	r3, [pc, #132]	@ (8002648 <HAL_RCC_OscConfig+0x508>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d118      	bne.n	80025fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002648 <HAL_RCC_OscConfig+0x508>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002648 <HAL_RCC_OscConfig+0x508>)
 80025d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d8:	f7fe ff8a 	bl	80014f0 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e0:	f7fe ff86 	bl	80014f0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e1b8      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f2:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <HAL_RCC_OscConfig+0x508>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d108      	bne.n	8002618 <HAL_RCC_OscConfig+0x4d8>
 8002606:	4b0f      	ldr	r3, [pc, #60]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 8002608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260c:	4a0d      	ldr	r2, [pc, #52]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002616:	e029      	b.n	800266c <HAL_RCC_OscConfig+0x52c>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b05      	cmp	r3, #5
 800261e:	d115      	bne.n	800264c <HAL_RCC_OscConfig+0x50c>
 8002620:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002626:	4a07      	ldr	r2, [pc, #28]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002630:	4b04      	ldr	r3, [pc, #16]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002636:	4a03      	ldr	r2, [pc, #12]	@ (8002644 <HAL_RCC_OscConfig+0x504>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002640:	e014      	b.n	800266c <HAL_RCC_OscConfig+0x52c>
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	40007000 	.word	0x40007000
 800264c:	4b9d      	ldr	r3, [pc, #628]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002652:	4a9c      	ldr	r2, [pc, #624]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800265c:	4b99      	ldr	r3, [pc, #612]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002662:	4a98      	ldr	r2, [pc, #608]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002664:	f023 0304 	bic.w	r3, r3, #4
 8002668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d016      	beq.n	80026a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7fe ff3c 	bl	80014f0 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800267a:	e00a      	b.n	8002692 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267c:	f7fe ff38 	bl	80014f0 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e168      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002692:	4b8c      	ldr	r3, [pc, #560]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0ed      	beq.n	800267c <HAL_RCC_OscConfig+0x53c>
 80026a0:	e015      	b.n	80026ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a2:	f7fe ff25 	bl	80014f0 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026a8:	e00a      	b.n	80026c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026aa:	f7fe ff21 	bl	80014f0 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e151      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026c0:	4b80      	ldr	r3, [pc, #512]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1ed      	bne.n	80026aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ce:	7ffb      	ldrb	r3, [r7, #31]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d4:	4b7b      	ldr	r3, [pc, #492]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 80026d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d8:	4a7a      	ldr	r2, [pc, #488]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 80026da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d03c      	beq.n	8002766 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d01c      	beq.n	800272e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026f4:	4b73      	ldr	r3, [pc, #460]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 80026f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026fa:	4a72      	ldr	r2, [pc, #456]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7fe fef4 	bl	80014f0 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800270c:	f7fe fef0 	bl	80014f0 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e122      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800271e:	4b69      	ldr	r3, [pc, #420]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002720:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ef      	beq.n	800270c <HAL_RCC_OscConfig+0x5cc>
 800272c:	e01b      	b.n	8002766 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800272e:	4b65      	ldr	r3, [pc, #404]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002730:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002734:	4a63      	ldr	r2, [pc, #396]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002736:	f023 0301 	bic.w	r3, r3, #1
 800273a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7fe fed7 	bl	80014f0 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002746:	f7fe fed3 	bl	80014f0 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e105      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002758:	4b5a      	ldr	r3, [pc, #360]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 800275a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1ef      	bne.n	8002746 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 80f9 	beq.w	8002962 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002774:	2b02      	cmp	r3, #2
 8002776:	f040 80cf 	bne.w	8002918 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800277a:	4b52      	ldr	r3, [pc, #328]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 0203 	and.w	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278a:	429a      	cmp	r2, r3
 800278c:	d12c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	3b01      	subs	r3, #1
 800279a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d123      	bne.n	80027e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d11b      	bne.n	80027e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d113      	bne.n	80027e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ca:	085b      	lsrs	r3, r3, #1
 80027cc:	3b01      	subs	r3, #1
 80027ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d109      	bne.n	80027e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	085b      	lsrs	r3, r3, #1
 80027e0:	3b01      	subs	r3, #1
 80027e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d071      	beq.n	80028cc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	2b0c      	cmp	r3, #12
 80027ec:	d068      	beq.n	80028c0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027ee:	4b35      	ldr	r3, [pc, #212]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d105      	bne.n	8002806 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027fa:	4b32      	ldr	r3, [pc, #200]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0ac      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800280a:	4b2e      	ldr	r3, [pc, #184]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2d      	ldr	r2, [pc, #180]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002810:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002814:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002816:	f7fe fe6b 	bl	80014f0 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281e:	f7fe fe67 	bl	80014f0 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e099      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002830:	4b24      	ldr	r3, [pc, #144]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f0      	bne.n	800281e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800283c:	4b21      	ldr	r3, [pc, #132]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	4b21      	ldr	r3, [pc, #132]	@ (80028c8 <HAL_RCC_OscConfig+0x788>)
 8002842:	4013      	ands	r3, r2
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800284c:	3a01      	subs	r2, #1
 800284e:	0112      	lsls	r2, r2, #4
 8002850:	4311      	orrs	r1, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002856:	0212      	lsls	r2, r2, #8
 8002858:	4311      	orrs	r1, r2
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800285e:	0852      	lsrs	r2, r2, #1
 8002860:	3a01      	subs	r2, #1
 8002862:	0552      	lsls	r2, r2, #21
 8002864:	4311      	orrs	r1, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800286a:	0852      	lsrs	r2, r2, #1
 800286c:	3a01      	subs	r2, #1
 800286e:	0652      	lsls	r2, r2, #25
 8002870:	4311      	orrs	r1, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002876:	06d2      	lsls	r2, r2, #27
 8002878:	430a      	orrs	r2, r1
 800287a:	4912      	ldr	r1, [pc, #72]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 800287c:	4313      	orrs	r3, r2
 800287e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002880:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0f      	ldr	r2, [pc, #60]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002886:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800288a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800288c:	4b0d      	ldr	r3, [pc, #52]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a0c      	ldr	r2, [pc, #48]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 8002892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002896:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002898:	f7fe fe2a 	bl	80014f0 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fe fe26 	bl	80014f0 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e058      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b2:	4b04      	ldr	r3, [pc, #16]	@ (80028c4 <HAL_RCC_OscConfig+0x784>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028be:	e050      	b.n	8002962 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e04f      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
 80028c4:	40021000 	.word	0x40021000
 80028c8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028cc:	4b27      	ldr	r3, [pc, #156]	@ (800296c <HAL_RCC_OscConfig+0x82c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d144      	bne.n	8002962 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028d8:	4b24      	ldr	r3, [pc, #144]	@ (800296c <HAL_RCC_OscConfig+0x82c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a23      	ldr	r2, [pc, #140]	@ (800296c <HAL_RCC_OscConfig+0x82c>)
 80028de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028e4:	4b21      	ldr	r3, [pc, #132]	@ (800296c <HAL_RCC_OscConfig+0x82c>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a20      	ldr	r2, [pc, #128]	@ (800296c <HAL_RCC_OscConfig+0x82c>)
 80028ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028f0:	f7fe fdfe 	bl	80014f0 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe fdfa 	bl	80014f0 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e02c      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290a:	4b18      	ldr	r3, [pc, #96]	@ (800296c <HAL_RCC_OscConfig+0x82c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x7b8>
 8002916:	e024      	b.n	8002962 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b0c      	cmp	r3, #12
 800291c:	d01f      	beq.n	800295e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291e:	4b13      	ldr	r3, [pc, #76]	@ (800296c <HAL_RCC_OscConfig+0x82c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a12      	ldr	r2, [pc, #72]	@ (800296c <HAL_RCC_OscConfig+0x82c>)
 8002924:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292a:	f7fe fde1 	bl	80014f0 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002932:	f7fe fddd 	bl	80014f0 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e00f      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002944:	4b09      	ldr	r3, [pc, #36]	@ (800296c <HAL_RCC_OscConfig+0x82c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f0      	bne.n	8002932 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002950:	4b06      	ldr	r3, [pc, #24]	@ (800296c <HAL_RCC_OscConfig+0x82c>)
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	4905      	ldr	r1, [pc, #20]	@ (800296c <HAL_RCC_OscConfig+0x82c>)
 8002956:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <HAL_RCC_OscConfig+0x830>)
 8002958:	4013      	ands	r3, r2
 800295a:	60cb      	str	r3, [r1, #12]
 800295c:	e001      	b.n	8002962 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3720      	adds	r7, #32
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40021000 	.word	0x40021000
 8002970:	feeefffc 	.word	0xfeeefffc

08002974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e11d      	b.n	8002bc8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800298c:	4b90      	ldr	r3, [pc, #576]	@ (8002bd0 <HAL_RCC_ClockConfig+0x25c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d910      	bls.n	80029bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299a:	4b8d      	ldr	r3, [pc, #564]	@ (8002bd0 <HAL_RCC_ClockConfig+0x25c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 020f 	bic.w	r2, r3, #15
 80029a2:	498b      	ldr	r1, [pc, #556]	@ (8002bd0 <HAL_RCC_ClockConfig+0x25c>)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b89      	ldr	r3, [pc, #548]	@ (8002bd0 <HAL_RCC_ClockConfig+0x25c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e105      	b.n	8002bc8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d010      	beq.n	80029ea <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	4b81      	ldr	r3, [pc, #516]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d908      	bls.n	80029ea <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d8:	4b7e      	ldr	r3, [pc, #504]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	497b      	ldr	r1, [pc, #492]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d079      	beq.n	8002aea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d11e      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fe:	4b75      	ldr	r3, [pc, #468]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0dc      	b.n	8002bc8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002a0e:	f000 fa09 	bl	8002e24 <RCC_GetSysClockFreqFromPLLSource>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4a70      	ldr	r2, [pc, #448]	@ (8002bd8 <HAL_RCC_ClockConfig+0x264>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d946      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a1a:	4b6e      	ldr	r3, [pc, #440]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d140      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a26:	4b6b      	ldr	r3, [pc, #428]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a2e:	4a69      	ldr	r2, [pc, #420]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a36:	2380      	movs	r3, #128	@ 0x80
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	e035      	b.n	8002aa8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a44:	4b63      	ldr	r3, [pc, #396]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d115      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0b9      	b.n	8002bc8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a5c:	4b5d      	ldr	r3, [pc, #372]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0ad      	b.n	8002bc8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a6c:	4b59      	ldr	r3, [pc, #356]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0a5      	b.n	8002bc8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002a7c:	f000 f8b4 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8002a80:	4603      	mov	r3, r0
 8002a82:	4a55      	ldr	r2, [pc, #340]	@ (8002bd8 <HAL_RCC_ClockConfig+0x264>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d90f      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a88:	4b52      	ldr	r3, [pc, #328]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d109      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a94:	4b4f      	ldr	r3, [pc, #316]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a9c:	4a4d      	ldr	r2, [pc, #308]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002aa2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002aa4:	2380      	movs	r3, #128	@ 0x80
 8002aa6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002aa8:	4b4a      	ldr	r3, [pc, #296]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f023 0203 	bic.w	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4947      	ldr	r1, [pc, #284]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aba:	f7fe fd19 	bl	80014f0 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac2:	f7fe fd15 	bl	80014f0 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e077      	b.n	8002bc8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 020c 	and.w	r2, r3, #12
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d1eb      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b80      	cmp	r3, #128	@ 0x80
 8002aee:	d105      	bne.n	8002afc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002af0:	4b38      	ldr	r3, [pc, #224]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4a37      	ldr	r2, [pc, #220]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002af6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002afa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d010      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	4b31      	ldr	r3, [pc, #196]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d208      	bcs.n	8002b2a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b18:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	492b      	ldr	r1, [pc, #172]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2a:	4b29      	ldr	r3, [pc, #164]	@ (8002bd0 <HAL_RCC_ClockConfig+0x25c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d210      	bcs.n	8002b5a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b38:	4b25      	ldr	r3, [pc, #148]	@ (8002bd0 <HAL_RCC_ClockConfig+0x25c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f023 020f 	bic.w	r2, r3, #15
 8002b40:	4923      	ldr	r1, [pc, #140]	@ (8002bd0 <HAL_RCC_ClockConfig+0x25c>)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b48:	4b21      	ldr	r3, [pc, #132]	@ (8002bd0 <HAL_RCC_ClockConfig+0x25c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d001      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e036      	b.n	8002bc8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b66:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	4918      	ldr	r1, [pc, #96]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d009      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b84:	4b13      	ldr	r3, [pc, #76]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4910      	ldr	r1, [pc, #64]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b98:	f000 f826 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd4 <HAL_RCC_ClockConfig+0x260>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	490c      	ldr	r1, [pc, #48]	@ (8002bdc <HAL_RCC_ClockConfig+0x268>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8002be0 <HAL_RCC_ClockConfig+0x26c>)
 8002bb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002be4 <HAL_RCC_ClockConfig+0x270>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fe fc47 	bl	8001450 <HAL_InitTick>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	73fb      	strb	r3, [r7, #15]

  return status;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40022000 	.word	0x40022000
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	04c4b400 	.word	0x04c4b400
 8002bdc:	08006d84 	.word	0x08006d84
 8002be0:	20000058 	.word	0x20000058
 8002be4:	2000005c 	.word	0x2000005c

08002be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b089      	sub	sp, #36	@ 0x24
 8002bec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c00:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x34>
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d121      	bne.n	8002c5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d11e      	bne.n	8002c5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c1c:	4b34      	ldr	r3, [pc, #208]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c28:	4b31      	ldr	r3, [pc, #196]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c2e:	0a1b      	lsrs	r3, r3, #8
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	e005      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c38:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c44:	4a2b      	ldr	r2, [pc, #172]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10d      	bne.n	8002c70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d102      	bne.n	8002c66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c60:	4b25      	ldr	r3, [pc, #148]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	e004      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c6c:	4b23      	ldr	r3, [pc, #140]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x114>)
 8002c6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	2b0c      	cmp	r3, #12
 8002c74:	d134      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c76:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d003      	beq.n	8002c8e <HAL_RCC_GetSysClockFreq+0xa6>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d003      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0xac>
 8002c8c:	e005      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c90:	617b      	str	r3, [r7, #20]
      break;
 8002c92:	e005      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c94:	4b19      	ldr	r3, [pc, #100]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x114>)
 8002c96:	617b      	str	r3, [r7, #20]
      break;
 8002c98:	e002      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	617b      	str	r3, [r7, #20]
      break;
 8002c9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ca0:	4b13      	ldr	r3, [pc, #76]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	3301      	adds	r3, #1
 8002cac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cae:	4b10      	ldr	r3, [pc, #64]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	fb03 f202 	mul.w	r2, r3, r2
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	0e5b      	lsrs	r3, r3, #25
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ce0:	69bb      	ldr	r3, [r7, #24]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3724      	adds	r7, #36	@ 0x24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	08006d9c 	.word	0x08006d9c
 8002cf8:	00f42400 	.word	0x00f42400
 8002cfc:	007a1200 	.word	0x007a1200

08002d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d04:	4b03      	ldr	r3, [pc, #12]	@ (8002d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000058 	.word	0x20000058

08002d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d1c:	f7ff fff0 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4904      	ldr	r1, [pc, #16]	@ (8002d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	08006d94 	.word	0x08006d94

08002d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d48:	f7ff ffda 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	0adb      	lsrs	r3, r3, #11
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	4904      	ldr	r1, [pc, #16]	@ (8002d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d5a:	5ccb      	ldrb	r3, [r1, r3]
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	08006d94 	.word	0x08006d94

08002d70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d7c:	4b27      	ldr	r3, [pc, #156]	@ (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d88:	f7ff f906 	bl	8001f98 <HAL_PWREx_GetVoltageRange>
 8002d8c:	6178      	str	r0, [r7, #20]
 8002d8e:	e014      	b.n	8002dba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d90:	4b22      	ldr	r3, [pc, #136]	@ (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d94:	4a21      	ldr	r2, [pc, #132]	@ (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002da8:	f7ff f8f6 	bl	8001f98 <HAL_PWREx_GetVoltageRange>
 8002dac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dae:	4b1b      	ldr	r3, [pc, #108]	@ (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002db4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002db8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dc0:	d10b      	bne.n	8002dda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b80      	cmp	r3, #128	@ 0x80
 8002dc6:	d913      	bls.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2ba0      	cmp	r3, #160	@ 0xa0
 8002dcc:	d902      	bls.n	8002dd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dce:	2302      	movs	r3, #2
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	e00d      	b.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	e00a      	b.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002dde:	d902      	bls.n	8002de6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002de0:	2302      	movs	r3, #2
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	e004      	b.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b70      	cmp	r3, #112	@ 0x70
 8002dea:	d101      	bne.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dec:	2301      	movs	r3, #1
 8002dee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002df0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f023 020f 	bic.w	r2, r3, #15
 8002df8:	4909      	ldr	r1, [pc, #36]	@ (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e00:	4b07      	ldr	r3, [pc, #28]	@ (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d001      	beq.n	8002e12 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40022000 	.word	0x40022000

08002e24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d00b      	beq.n	8002e52 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d825      	bhi.n	8002e8c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d008      	beq.n	8002e58 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d11f      	bne.n	8002e8c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002e4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ee4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e4e:	613b      	str	r3, [r7, #16]
    break;
 8002e50:	e01f      	b.n	8002e92 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002e52:	4b25      	ldr	r3, [pc, #148]	@ (8002ee8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002e54:	613b      	str	r3, [r7, #16]
    break;
 8002e56:	e01c      	b.n	8002e92 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e58:	4b21      	ldr	r3, [pc, #132]	@ (8002ee0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d107      	bne.n	8002e74 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e64:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	e005      	b.n	8002e80 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e74:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002e80:	4a1a      	ldr	r2, [pc, #104]	@ (8002eec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e88:	613b      	str	r3, [r7, #16]
    break;
 8002e8a:	e002      	b.n	8002e92 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	613b      	str	r3, [r7, #16]
    break;
 8002e90:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e92:	4b13      	ldr	r3, [pc, #76]	@ (8002ee0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	091b      	lsrs	r3, r3, #4
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	fb03 f202 	mul.w	r2, r3, r2
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002eb8:	4b09      	ldr	r3, [pc, #36]	@ (8002ee0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	0e5b      	lsrs	r3, r3, #25
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002ed2:	683b      	ldr	r3, [r7, #0]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	00f42400 	.word	0x00f42400
 8002ee8:	007a1200 	.word	0x007a1200
 8002eec:	08006d9c 	.word	0x08006d9c

08002ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ef8:	2300      	movs	r3, #0
 8002efa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002efc:	2300      	movs	r3, #0
 8002efe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d040      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f10:	2b80      	cmp	r3, #128	@ 0x80
 8002f12:	d02a      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f14:	2b80      	cmp	r3, #128	@ 0x80
 8002f16:	d825      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f18:	2b60      	cmp	r3, #96	@ 0x60
 8002f1a:	d026      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f1c:	2b60      	cmp	r3, #96	@ 0x60
 8002f1e:	d821      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f20:	2b40      	cmp	r3, #64	@ 0x40
 8002f22:	d006      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002f24:	2b40      	cmp	r3, #64	@ 0x40
 8002f26:	d81d      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d009      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d010      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002f30:	e018      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f32:	4b89      	ldr	r3, [pc, #548]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	4a88      	ldr	r2, [pc, #544]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f3c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f3e:	e015      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fb02 	bl	8003550 <RCCEx_PLLSAI1_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f50:	e00c      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3320      	adds	r3, #32
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fbed 	bl	8003738 <RCCEx_PLLSAI2_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f62:	e003      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	74fb      	strb	r3, [r7, #19]
      break;
 8002f68:	e000      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10b      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f72:	4b79      	ldr	r3, [pc, #484]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f78:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f80:	4975      	ldr	r1, [pc, #468]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002f88:	e001      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8a:	7cfb      	ldrb	r3, [r7, #19]
 8002f8c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d047      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa2:	d030      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa8:	d82a      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002faa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fae:	d02a      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002fb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fb4:	d824      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002fb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fba:	d008      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fc0:	d81e      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002fc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fca:	d010      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002fcc:	e018      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fce:	4b62      	ldr	r3, [pc, #392]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	4a61      	ldr	r2, [pc, #388]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fda:	e015      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fab4 	bl	8003550 <RCCEx_PLLSAI1_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fec:	e00c      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3320      	adds	r3, #32
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fb9f 	bl	8003738 <RCCEx_PLLSAI2_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ffe:	e003      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	74fb      	strb	r3, [r7, #19]
      break;
 8003004:	e000      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003008:	7cfb      	ldrb	r3, [r7, #19]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10b      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800300e:	4b52      	ldr	r3, [pc, #328]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003010:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003014:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301c:	494e      	ldr	r1, [pc, #312]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003024:	e001      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003026:	7cfb      	ldrb	r3, [r7, #19]
 8003028:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 809f 	beq.w	8003176 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003038:	2300      	movs	r3, #0
 800303a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800303c:	4b46      	ldr	r3, [pc, #280]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800303e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800304c:	2300      	movs	r3, #0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00d      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003052:	4b41      	ldr	r3, [pc, #260]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003056:	4a40      	ldr	r2, [pc, #256]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800305c:	6593      	str	r3, [r2, #88]	@ 0x58
 800305e:	4b3e      	ldr	r3, [pc, #248]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800306a:	2301      	movs	r3, #1
 800306c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800306e:	4b3b      	ldr	r3, [pc, #236]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a3a      	ldr	r2, [pc, #232]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003078:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800307a:	f7fe fa39 	bl	80014f0 <HAL_GetTick>
 800307e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003080:	e009      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003082:	f7fe fa35 	bl	80014f0 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d902      	bls.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	74fb      	strb	r3, [r7, #19]
        break;
 8003094:	e005      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003096:	4b31      	ldr	r3, [pc, #196]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0ef      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80030a2:	7cfb      	ldrb	r3, [r7, #19]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d15b      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030b2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d01f      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d019      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030c6:	4b24      	ldr	r3, [pc, #144]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030d2:	4b21      	ldr	r3, [pc, #132]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030f2:	4a19      	ldr	r2, [pc, #100]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d016      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7fe f9f4 	bl	80014f0 <HAL_GetTick>
 8003108:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800310a:	e00b      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310c:	f7fe f9f0 	bl	80014f0 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d902      	bls.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	74fb      	strb	r3, [r7, #19]
            break;
 8003122:	e006      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003124:	4b0c      	ldr	r3, [pc, #48]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0ec      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003132:	7cfb      	ldrb	r3, [r7, #19]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10c      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003138:	4b07      	ldr	r3, [pc, #28]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003148:	4903      	ldr	r1, [pc, #12]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003150:	e008      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003152:	7cfb      	ldrb	r3, [r7, #19]
 8003154:	74bb      	strb	r3, [r7, #18]
 8003156:	e005      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003158:	40021000 	.word	0x40021000
 800315c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003160:	7cfb      	ldrb	r3, [r7, #19]
 8003162:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003164:	7c7b      	ldrb	r3, [r7, #17]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d105      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800316a:	4ba0      	ldr	r3, [pc, #640]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800316c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316e:	4a9f      	ldr	r2, [pc, #636]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003170:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003174:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003182:	4b9a      	ldr	r3, [pc, #616]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003188:	f023 0203 	bic.w	r2, r3, #3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003190:	4996      	ldr	r1, [pc, #600]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00a      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031a4:	4b91      	ldr	r3, [pc, #580]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031aa:	f023 020c 	bic.w	r2, r3, #12
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b2:	498e      	ldr	r1, [pc, #568]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031c6:	4b89      	ldr	r3, [pc, #548]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d4:	4985      	ldr	r1, [pc, #532]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00a      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031e8:	4b80      	ldr	r3, [pc, #512]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f6:	497d      	ldr	r1, [pc, #500]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800320a:	4b78      	ldr	r3, [pc, #480]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003210:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003218:	4974      	ldr	r1, [pc, #464]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800322c:	4b6f      	ldr	r3, [pc, #444]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003232:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800323a:	496c      	ldr	r1, [pc, #432]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800324e:	4b67      	ldr	r3, [pc, #412]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003254:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800325c:	4963      	ldr	r1, [pc, #396]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003270:	4b5e      	ldr	r3, [pc, #376]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003276:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800327e:	495b      	ldr	r1, [pc, #364]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003292:	4b56      	ldr	r3, [pc, #344]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003298:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a0:	4952      	ldr	r1, [pc, #328]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032b4:	4b4d      	ldr	r3, [pc, #308]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c2:	494a      	ldr	r1, [pc, #296]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032d6:	4b45      	ldr	r3, [pc, #276]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e4:	4941      	ldr	r1, [pc, #260]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032f8:	4b3c      	ldr	r3, [pc, #240]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032fe:	f023 0203 	bic.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003306:	4939      	ldr	r1, [pc, #228]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d028      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800331a:	4b34      	ldr	r3, [pc, #208]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003320:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003328:	4930      	ldr	r1, [pc, #192]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003334:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003338:	d106      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800333a:	4b2c      	ldr	r3, [pc, #176]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	4a2b      	ldr	r2, [pc, #172]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003340:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003344:	60d3      	str	r3, [r2, #12]
 8003346:	e011      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800334c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003350:	d10c      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3304      	adds	r3, #4
 8003356:	2101      	movs	r1, #1
 8003358:	4618      	mov	r0, r3
 800335a:	f000 f8f9 	bl	8003550 <RCCEx_PLLSAI1_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003362:	7cfb      	ldrb	r3, [r7, #19]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d04d      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800337c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003380:	d108      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003382:	4b1a      	ldr	r3, [pc, #104]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003384:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003388:	4a18      	ldr	r2, [pc, #96]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800338a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800338e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003392:	e012      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003394:	4b15      	ldr	r3, [pc, #84]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003396:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800339a:	4a14      	ldr	r2, [pc, #80]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800339c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033a0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80033a4:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033b2:	490e      	ldr	r1, [pc, #56]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033c2:	d106      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033c4:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4a08      	ldr	r2, [pc, #32]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033ce:	60d3      	str	r3, [r2, #12]
 80033d0:	e020      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033da:	d109      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033dc:	4b03      	ldr	r3, [pc, #12]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4a02      	ldr	r2, [pc, #8]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e6:	60d3      	str	r3, [r2, #12]
 80033e8:	e014      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033f8:	d10c      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3304      	adds	r3, #4
 80033fe:	2101      	movs	r1, #1
 8003400:	4618      	mov	r0, r3
 8003402:	f000 f8a5 	bl	8003550 <RCCEx_PLLSAI1_Config>
 8003406:	4603      	mov	r3, r0
 8003408:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800340a:	7cfb      	ldrb	r3, [r7, #19]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d028      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003420:	4b4a      	ldr	r3, [pc, #296]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003426:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800342e:	4947      	ldr	r1, [pc, #284]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800343a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800343e:	d106      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003440:	4b42      	ldr	r3, [pc, #264]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4a41      	ldr	r2, [pc, #260]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003446:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800344a:	60d3      	str	r3, [r2, #12]
 800344c:	e011      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003452:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003456:	d10c      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3304      	adds	r3, #4
 800345c:	2101      	movs	r1, #1
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f876 	bl	8003550 <RCCEx_PLLSAI1_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800346e:	7cfb      	ldrb	r3, [r7, #19]
 8003470:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d01e      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800347e:	4b33      	ldr	r3, [pc, #204]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003484:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800348e:	492f      	ldr	r1, [pc, #188]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800349c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034a0:	d10c      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3304      	adds	r3, #4
 80034a6:	2102      	movs	r1, #2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 f851 	bl	8003550 <RCCEx_PLLSAI1_Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034b2:	7cfb      	ldrb	r3, [r7, #19]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00b      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034c8:	4b20      	ldr	r3, [pc, #128]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034ce:	f023 0204 	bic.w	r2, r3, #4
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034d8:	491c      	ldr	r1, [pc, #112]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00b      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80034ec:	4b17      	ldr	r3, [pc, #92]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034f2:	f023 0218 	bic.w	r2, r3, #24
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fc:	4913      	ldr	r1, [pc, #76]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d017      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003510:	4b0e      	ldr	r3, [pc, #56]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003512:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003516:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003520:	490a      	ldr	r1, [pc, #40]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800352e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003532:	d105      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003534:	4b05      	ldr	r3, [pc, #20]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4a04      	ldr	r2, [pc, #16]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800353a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800353e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003540:	7cbb      	ldrb	r3, [r7, #18]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000

08003550 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800355e:	4b72      	ldr	r3, [pc, #456]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00e      	beq.n	8003588 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800356a:	4b6f      	ldr	r3, [pc, #444]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0203 	and.w	r2, r3, #3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d103      	bne.n	8003582 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
       ||
 800357e:	2b00      	cmp	r3, #0
 8003580:	d142      	bne.n	8003608 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
 8003586:	e03f      	b.n	8003608 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d018      	beq.n	80035c2 <RCCEx_PLLSAI1_Config+0x72>
 8003590:	2b03      	cmp	r3, #3
 8003592:	d825      	bhi.n	80035e0 <RCCEx_PLLSAI1_Config+0x90>
 8003594:	2b01      	cmp	r3, #1
 8003596:	d002      	beq.n	800359e <RCCEx_PLLSAI1_Config+0x4e>
 8003598:	2b02      	cmp	r3, #2
 800359a:	d009      	beq.n	80035b0 <RCCEx_PLLSAI1_Config+0x60>
 800359c:	e020      	b.n	80035e0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800359e:	4b62      	ldr	r3, [pc, #392]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d11d      	bne.n	80035e6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ae:	e01a      	b.n	80035e6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035b0:	4b5d      	ldr	r3, [pc, #372]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d116      	bne.n	80035ea <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c0:	e013      	b.n	80035ea <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035c2:	4b59      	ldr	r3, [pc, #356]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10f      	bne.n	80035ee <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035ce:	4b56      	ldr	r3, [pc, #344]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035de:	e006      	b.n	80035ee <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
      break;
 80035e4:	e004      	b.n	80035f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80035e6:	bf00      	nop
 80035e8:	e002      	b.n	80035f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80035ea:	bf00      	nop
 80035ec:	e000      	b.n	80035f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80035ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d108      	bne.n	8003608 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80035f6:	4b4c      	ldr	r3, [pc, #304]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f023 0203 	bic.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4949      	ldr	r1, [pc, #292]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003604:	4313      	orrs	r3, r2
 8003606:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003608:	7bfb      	ldrb	r3, [r7, #15]
 800360a:	2b00      	cmp	r3, #0
 800360c:	f040 8086 	bne.w	800371c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003610:	4b45      	ldr	r3, [pc, #276]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a44      	ldr	r2, [pc, #272]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003616:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800361a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800361c:	f7fd ff68 	bl	80014f0 <HAL_GetTick>
 8003620:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003622:	e009      	b.n	8003638 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003624:	f7fd ff64 	bl	80014f0 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d902      	bls.n	8003638 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	73fb      	strb	r3, [r7, #15]
        break;
 8003636:	e005      	b.n	8003644 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003638:	4b3b      	ldr	r3, [pc, #236]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1ef      	bne.n	8003624 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d168      	bne.n	800371c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d113      	bne.n	8003678 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003650:	4b35      	ldr	r3, [pc, #212]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	4b35      	ldr	r3, [pc, #212]	@ (800372c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003656:	4013      	ands	r3, r2
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6892      	ldr	r2, [r2, #8]
 800365c:	0211      	lsls	r1, r2, #8
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68d2      	ldr	r2, [r2, #12]
 8003662:	06d2      	lsls	r2, r2, #27
 8003664:	4311      	orrs	r1, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6852      	ldr	r2, [r2, #4]
 800366a:	3a01      	subs	r2, #1
 800366c:	0112      	lsls	r2, r2, #4
 800366e:	430a      	orrs	r2, r1
 8003670:	492d      	ldr	r1, [pc, #180]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003672:	4313      	orrs	r3, r2
 8003674:	610b      	str	r3, [r1, #16]
 8003676:	e02d      	b.n	80036d4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d115      	bne.n	80036aa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800367e:	4b2a      	ldr	r3, [pc, #168]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	4b2b      	ldr	r3, [pc, #172]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003684:	4013      	ands	r3, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6892      	ldr	r2, [r2, #8]
 800368a:	0211      	lsls	r1, r2, #8
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6912      	ldr	r2, [r2, #16]
 8003690:	0852      	lsrs	r2, r2, #1
 8003692:	3a01      	subs	r2, #1
 8003694:	0552      	lsls	r2, r2, #21
 8003696:	4311      	orrs	r1, r2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6852      	ldr	r2, [r2, #4]
 800369c:	3a01      	subs	r2, #1
 800369e:	0112      	lsls	r2, r2, #4
 80036a0:	430a      	orrs	r2, r1
 80036a2:	4921      	ldr	r1, [pc, #132]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	610b      	str	r3, [r1, #16]
 80036a8:	e014      	b.n	80036d4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	4b21      	ldr	r3, [pc, #132]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6892      	ldr	r2, [r2, #8]
 80036b6:	0211      	lsls	r1, r2, #8
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6952      	ldr	r2, [r2, #20]
 80036bc:	0852      	lsrs	r2, r2, #1
 80036be:	3a01      	subs	r2, #1
 80036c0:	0652      	lsls	r2, r2, #25
 80036c2:	4311      	orrs	r1, r2
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6852      	ldr	r2, [r2, #4]
 80036c8:	3a01      	subs	r2, #1
 80036ca:	0112      	lsls	r2, r2, #4
 80036cc:	430a      	orrs	r2, r1
 80036ce:	4916      	ldr	r1, [pc, #88]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036d4:	4b14      	ldr	r3, [pc, #80]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a13      	ldr	r2, [pc, #76]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e0:	f7fd ff06 	bl	80014f0 <HAL_GetTick>
 80036e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036e6:	e009      	b.n	80036fc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036e8:	f7fd ff02 	bl	80014f0 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d902      	bls.n	80036fc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	73fb      	strb	r3, [r7, #15]
          break;
 80036fa:	e005      	b.n	8003708 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0ef      	beq.n	80036e8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800370e:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003710:	691a      	ldr	r2, [r3, #16]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	4904      	ldr	r1, [pc, #16]	@ (8003728 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003718:	4313      	orrs	r3, r2
 800371a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800371c:	7bfb      	ldrb	r3, [r7, #15]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40021000 	.word	0x40021000
 800372c:	07ff800f 	.word	0x07ff800f
 8003730:	ff9f800f 	.word	0xff9f800f
 8003734:	f9ff800f 	.word	0xf9ff800f

08003738 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003746:	4b72      	ldr	r3, [pc, #456]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00e      	beq.n	8003770 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003752:	4b6f      	ldr	r3, [pc, #444]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0203 	and.w	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d103      	bne.n	800376a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
       ||
 8003766:	2b00      	cmp	r3, #0
 8003768:	d142      	bne.n	80037f0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
 800376e:	e03f      	b.n	80037f0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d018      	beq.n	80037aa <RCCEx_PLLSAI2_Config+0x72>
 8003778:	2b03      	cmp	r3, #3
 800377a:	d825      	bhi.n	80037c8 <RCCEx_PLLSAI2_Config+0x90>
 800377c:	2b01      	cmp	r3, #1
 800377e:	d002      	beq.n	8003786 <RCCEx_PLLSAI2_Config+0x4e>
 8003780:	2b02      	cmp	r3, #2
 8003782:	d009      	beq.n	8003798 <RCCEx_PLLSAI2_Config+0x60>
 8003784:	e020      	b.n	80037c8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003786:	4b62      	ldr	r3, [pc, #392]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d11d      	bne.n	80037ce <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003796:	e01a      	b.n	80037ce <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003798:	4b5d      	ldr	r3, [pc, #372]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d116      	bne.n	80037d2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a8:	e013      	b.n	80037d2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037aa:	4b59      	ldr	r3, [pc, #356]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10f      	bne.n	80037d6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037b6:	4b56      	ldr	r3, [pc, #344]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037c6:	e006      	b.n	80037d6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
      break;
 80037cc:	e004      	b.n	80037d8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80037ce:	bf00      	nop
 80037d0:	e002      	b.n	80037d8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80037d2:	bf00      	nop
 80037d4:	e000      	b.n	80037d8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80037d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d108      	bne.n	80037f0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80037de:	4b4c      	ldr	r3, [pc, #304]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f023 0203 	bic.w	r2, r3, #3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4949      	ldr	r1, [pc, #292]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f040 8086 	bne.w	8003904 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037f8:	4b45      	ldr	r3, [pc, #276]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a44      	ldr	r2, [pc, #272]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003804:	f7fd fe74 	bl	80014f0 <HAL_GetTick>
 8003808:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800380a:	e009      	b.n	8003820 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800380c:	f7fd fe70 	bl	80014f0 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d902      	bls.n	8003820 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	73fb      	strb	r3, [r7, #15]
        break;
 800381e:	e005      	b.n	800382c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003820:	4b3b      	ldr	r3, [pc, #236]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1ef      	bne.n	800380c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d168      	bne.n	8003904 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d113      	bne.n	8003860 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003838:	4b35      	ldr	r3, [pc, #212]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	4b35      	ldr	r3, [pc, #212]	@ (8003914 <RCCEx_PLLSAI2_Config+0x1dc>)
 800383e:	4013      	ands	r3, r2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6892      	ldr	r2, [r2, #8]
 8003844:	0211      	lsls	r1, r2, #8
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68d2      	ldr	r2, [r2, #12]
 800384a:	06d2      	lsls	r2, r2, #27
 800384c:	4311      	orrs	r1, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6852      	ldr	r2, [r2, #4]
 8003852:	3a01      	subs	r2, #1
 8003854:	0112      	lsls	r2, r2, #4
 8003856:	430a      	orrs	r2, r1
 8003858:	492d      	ldr	r1, [pc, #180]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 800385a:	4313      	orrs	r3, r2
 800385c:	614b      	str	r3, [r1, #20]
 800385e:	e02d      	b.n	80038bc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d115      	bne.n	8003892 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003866:	4b2a      	ldr	r3, [pc, #168]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	4b2b      	ldr	r3, [pc, #172]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1e0>)
 800386c:	4013      	ands	r3, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6892      	ldr	r2, [r2, #8]
 8003872:	0211      	lsls	r1, r2, #8
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6912      	ldr	r2, [r2, #16]
 8003878:	0852      	lsrs	r2, r2, #1
 800387a:	3a01      	subs	r2, #1
 800387c:	0552      	lsls	r2, r2, #21
 800387e:	4311      	orrs	r1, r2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6852      	ldr	r2, [r2, #4]
 8003884:	3a01      	subs	r2, #1
 8003886:	0112      	lsls	r2, r2, #4
 8003888:	430a      	orrs	r2, r1
 800388a:	4921      	ldr	r1, [pc, #132]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 800388c:	4313      	orrs	r3, r2
 800388e:	614b      	str	r3, [r1, #20]
 8003890:	e014      	b.n	80038bc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003892:	4b1f      	ldr	r3, [pc, #124]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	4b21      	ldr	r3, [pc, #132]	@ (800391c <RCCEx_PLLSAI2_Config+0x1e4>)
 8003898:	4013      	ands	r3, r2
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6892      	ldr	r2, [r2, #8]
 800389e:	0211      	lsls	r1, r2, #8
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6952      	ldr	r2, [r2, #20]
 80038a4:	0852      	lsrs	r2, r2, #1
 80038a6:	3a01      	subs	r2, #1
 80038a8:	0652      	lsls	r2, r2, #25
 80038aa:	4311      	orrs	r1, r2
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6852      	ldr	r2, [r2, #4]
 80038b0:	3a01      	subs	r2, #1
 80038b2:	0112      	lsls	r2, r2, #4
 80038b4:	430a      	orrs	r2, r1
 80038b6:	4916      	ldr	r1, [pc, #88]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038bc:	4b14      	ldr	r3, [pc, #80]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a13      	ldr	r2, [pc, #76]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c8:	f7fd fe12 	bl	80014f0 <HAL_GetTick>
 80038cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038ce:	e009      	b.n	80038e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038d0:	f7fd fe0e 	bl	80014f0 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d902      	bls.n	80038e4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	73fb      	strb	r3, [r7, #15]
          break;
 80038e2:	e005      	b.n	80038f0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0ef      	beq.n	80038d0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038f6:	4b06      	ldr	r3, [pc, #24]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038f8:	695a      	ldr	r2, [r3, #20]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	4904      	ldr	r1, [pc, #16]	@ (8003910 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003900:	4313      	orrs	r3, r2
 8003902:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003904:	7bfb      	ldrb	r3, [r7, #15]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000
 8003914:	07ff800f 	.word	0x07ff800f
 8003918:	ff9f800f 	.word	0xff9f800f
 800391c:	f9ff800f 	.word	0xf9ff800f

08003920 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e042      	b.n	80039b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003938:	2b00      	cmp	r3, #0
 800393a:	d106      	bne.n	800394a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7fd fbe7 	bl	8001118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2224      	movs	r2, #36	@ 0x24
 800394e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0201 	bic.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fcee 	bl	8004344 <UART_SetConfig>
 8003968:	4603      	mov	r3, r0
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e022      	b.n	80039b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 ffde 	bl	800493c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800398e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800399e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f001 f865 	bl	8004a80 <UART_CheckIdleState>
 80039b6:	4603      	mov	r3, r0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	@ 0x28
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	f040 8083 	bne.w	8003ae2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_UART_Transmit+0x28>
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e07b      	b.n	8003ae4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Transmit+0x3a>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e074      	b.n	8003ae4 <HAL_UART_Transmit+0x124>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2221      	movs	r2, #33	@ 0x21
 8003a0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a12:	f7fd fd6d 	bl	80014f0 <HAL_GetTick>
 8003a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	88fa      	ldrh	r2, [r7, #6]
 8003a1c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	88fa      	ldrh	r2, [r7, #6]
 8003a24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a30:	d108      	bne.n	8003a44 <HAL_UART_Transmit+0x84>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d104      	bne.n	8003a44 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	e003      	b.n	8003a4c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8003a54:	e02c      	b.n	8003ab0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2180      	movs	r1, #128	@ 0x80
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f001 f858 	bl	8004b16 <UART_WaitOnFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e039      	b.n	8003ae4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10b      	bne.n	8003a8e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	881a      	ldrh	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a82:	b292      	uxth	r2, r2
 8003a84:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	3302      	adds	r3, #2
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	e007      	b.n	8003a9e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	781a      	ldrb	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1cc      	bne.n	8003a56 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2140      	movs	r1, #64	@ 0x40
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f001 f825 	bl	8004b16 <UART_WaitOnFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e006      	b.n	8003ae4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e000      	b.n	8003ae4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003ae2:	2302      	movs	r3, #2
  }
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3720      	adds	r7, #32
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b091      	sub	sp, #68	@ 0x44
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	4613      	mov	r3, r2
 8003af8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	f040 808c 	bne.w	8003c1e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <HAL_UART_Transmit_IT+0x26>
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e084      	b.n	8003c20 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_UART_Transmit_IT+0x38>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e07d      	b.n	8003c20 <HAL_UART_Transmit_IT+0x134>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->pTxBuffPtr  = pData;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	88fa      	ldrh	r2, [r7, #6]
 8003b36:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	88fa      	ldrh	r2, [r7, #6]
 8003b3e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	675a      	str	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2221      	movs	r2, #33	@ 0x21
 8003b54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

#if defined(USART_CR1_FIFOEN)
    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b60:	d12e      	bne.n	8003bc0 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b6a:	d107      	bne.n	8003b7c <HAL_UART_Transmit_IT+0x90>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d103      	bne.n	8003b7c <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a2d      	ldr	r2, [pc, #180]	@ (8003c2c <HAL_UART_Transmit_IT+0x140>)
 8003b78:	675a      	str	r2, [r3, #116]	@ 0x74
 8003b7a:	e002      	b.n	8003b82 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a2c      	ldr	r2, [pc, #176]	@ (8003c30 <HAL_UART_Transmit_IT+0x144>)
 8003b80:	675a      	str	r2, [r3, #116]	@ 0x74
      }

      __HAL_UNLOCK(huart);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3308      	adds	r3, #8
 8003b90:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b94:	e853 3f00 	ldrex	r3, [r3]
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3308      	adds	r3, #8
 8003ba8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003baa:	637a      	str	r2, [r7, #52]	@ 0x34
 8003bac:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bb2:	e841 2300 	strex	r3, r2, [r1]
 8003bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e5      	bne.n	8003b8a <HAL_UART_Transmit_IT+0x9e>
 8003bbe:	e02c      	b.n	8003c1a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc8:	d107      	bne.n	8003bda <HAL_UART_Transmit_IT+0xee>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d103      	bne.n	8003bda <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4a17      	ldr	r2, [pc, #92]	@ (8003c34 <HAL_UART_Transmit_IT+0x148>)
 8003bd6:	675a      	str	r2, [r3, #116]	@ 0x74
 8003bd8:	e002      	b.n	8003be0 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a16      	ldr	r2, [pc, #88]	@ (8003c38 <HAL_UART_Transmit_IT+0x14c>)
 8003bde:	675a      	str	r2, [r3, #116]	@ 0x74
      }

      __HAL_UNLOCK(huart);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c06:	623b      	str	r3, [r7, #32]
 8003c08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	69f9      	ldr	r1, [r7, #28]
 8003c0c:	6a3a      	ldr	r2, [r7, #32]
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e6      	bne.n	8003be8 <HAL_UART_Transmit_IT+0xfc>

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e000      	b.n	8003c20 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8003c1e:	2302      	movs	r3, #2
  }
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3744      	adds	r7, #68	@ 0x44
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	0800524f 	.word	0x0800524f
 8003c30:	0800516f 	.word	0x0800516f
 8003c34:	080050ad 	.word	0x080050ad
 8003c38:	08004ff5 	.word	0x08004ff5

08003c3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	@ 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	4613      	mov	r3, r2
 8003c48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d142      	bne.n	8003cda <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <HAL_UART_Receive_IT+0x24>
 8003c5a:	88fb      	ldrh	r3, [r7, #6]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e03b      	b.n	8003cdc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_UART_Receive_IT+0x36>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e034      	b.n	8003cdc <HAL_UART_Receive_IT+0xa0>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a17      	ldr	r2, [pc, #92]	@ (8003ce4 <HAL_UART_Receive_IT+0xa8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01f      	beq.n	8003cca <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d018      	beq.n	8003cca <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	e853 3f00 	ldrex	r3, [r3]
 8003ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	623b      	str	r3, [r7, #32]
 8003cb8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	69f9      	ldr	r1, [r7, #28]
 8003cbc:	6a3a      	ldr	r2, [r7, #32]
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e6      	bne.n	8003c98 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 ffe9 	bl	8004ca8 <UART_Start_Receive_IT>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	e000      	b.n	8003cdc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003cda:	2302      	movs	r3, #2
  }
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3728      	adds	r7, #40	@ 0x28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40008000 	.word	0x40008000

08003ce8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b0ba      	sub	sp, #232	@ 0xe8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003d12:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003d16:	4013      	ands	r3, r2
 8003d18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003d1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d11b      	bne.n	8003d5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d015      	beq.n	8003d5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d105      	bne.n	8003d48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d009      	beq.n	8003d5c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 82d6 	beq.w	80042fe <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	4798      	blx	r3
      }
      return;
 8003d5a:	e2d0      	b.n	80042fe <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003d5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 811f 	beq.w	8003fa4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003d66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003d6a:	4b8b      	ldr	r3, [pc, #556]	@ (8003f98 <HAL_UART_IRQHandler+0x2b0>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003d72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003d76:	4b89      	ldr	r3, [pc, #548]	@ (8003f9c <HAL_UART_IRQHandler+0x2b4>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 8112 	beq.w	8003fa4 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d011      	beq.n	8003db0 <HAL_UART_IRQHandler+0xc8>
 8003d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00b      	beq.n	8003db0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003da6:	f043 0201 	orr.w	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d011      	beq.n	8003de0 <HAL_UART_IRQHandler+0xf8>
 8003dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00b      	beq.n	8003de0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dd6:	f043 0204 	orr.w	r2, r3, #4
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d011      	beq.n	8003e10 <HAL_UART_IRQHandler+0x128>
 8003dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00b      	beq.n	8003e10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2204      	movs	r2, #4
 8003dfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e06:	f043 0202 	orr.w	r2, r3, #2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d017      	beq.n	8003e4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003e28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003e2c:	4b5a      	ldr	r3, [pc, #360]	@ (8003f98 <HAL_UART_IRQHandler+0x2b0>)
 8003e2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00b      	beq.n	8003e4c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2208      	movs	r2, #8
 8003e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e42:	f043 0208 	orr.w	r2, r3, #8
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d012      	beq.n	8003e7e <HAL_UART_IRQHandler+0x196>
 8003e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00c      	beq.n	8003e7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e74:	f043 0220 	orr.w	r2, r3, #32
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 823c 	beq.w	8004302 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d013      	beq.n	8003ebe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d105      	bne.n	8003eae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d007      	beq.n	8003ebe <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ec4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed2:	2b40      	cmp	r3, #64	@ 0x40
 8003ed4:	d005      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d04f      	beq.n	8003f82 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f001 f80a 	bl	8004efc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef2:	2b40      	cmp	r3, #64	@ 0x40
 8003ef4:	d141      	bne.n	8003f7a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3308      	adds	r3, #8
 8003efc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1d9      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d013      	beq.n	8003f72 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f4e:	4a14      	ldr	r2, [pc, #80]	@ (8003fa0 <HAL_UART_IRQHandler+0x2b8>)
 8003f50:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fd fcec 	bl	8001934 <HAL_DMA_Abort_IT>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d017      	beq.n	8003f92 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f70:	e00f      	b.n	8003f92 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f9d0 	bl	8004318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f78:	e00b      	b.n	8003f92 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f9cc 	bl	8004318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f80:	e007      	b.n	8003f92 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f9c8 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8003f90:	e1b7      	b.n	8004302 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f92:	bf00      	nop
    return;
 8003f94:	e1b5      	b.n	8004302 <HAL_UART_IRQHandler+0x61a>
 8003f96:	bf00      	nop
 8003f98:	10000001 	.word	0x10000001
 8003f9c:	04000120 	.word	0x04000120
 8003fa0:	08004fc9 	.word	0x08004fc9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	f040 814a 	bne.w	8004242 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 8143 	beq.w	8004242 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 813c 	beq.w	8004242 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2210      	movs	r2, #16
 8003fd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fdc:	2b40      	cmp	r3, #64	@ 0x40
 8003fde:	f040 80b5 	bne.w	800414c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8187 	beq.w	8004306 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004002:	429a      	cmp	r2, r3
 8004004:	f080 817f 	bcs.w	8004306 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800400e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	2b00      	cmp	r3, #0
 8004020:	f040 8086 	bne.w	8004130 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004038:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800403c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004040:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800404e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004052:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800405a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004066:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1da      	bne.n	8004024 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3308      	adds	r3, #8
 8004074:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004076:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004078:	e853 3f00 	ldrex	r3, [r3]
 800407c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800407e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3308      	adds	r3, #8
 800408e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004092:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004096:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800409a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800409e:	e841 2300 	strex	r3, r2, [r1]
 80040a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1e1      	bne.n	800406e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3308      	adds	r3, #8
 80040b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3308      	adds	r3, #8
 80040ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040d6:	e841 2300 	strex	r3, r2, [r1]
 80040da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1e3      	bne.n	80040aa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004100:	f023 0310 	bic.w	r3, r3, #16
 8004104:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004112:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004114:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004116:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004118:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e4      	bne.n	80040f0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800412a:	4618      	mov	r0, r3
 800412c:	f7fd fba6 	bl	800187c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800413c:	b29b      	uxth	r3, r3
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	b29b      	uxth	r3, r3
 8004142:	4619      	mov	r1, r3
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f8f1 	bl	800432c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800414a:	e0dc      	b.n	8004306 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004158:	b29b      	uxth	r3, r3
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80ce 	beq.w	800430a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800416e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 80c9 	beq.w	800430a <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004188:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800418c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	461a      	mov	r2, r3
 8004196:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800419a:	647b      	str	r3, [r7, #68]	@ 0x44
 800419c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1e4      	bne.n	8004178 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3308      	adds	r3, #8
 80041b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b8:	e853 3f00 	ldrex	r3, [r3]
 80041bc:	623b      	str	r3, [r7, #32]
   return(result);
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3308      	adds	r3, #8
 80041d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80041d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e1      	bne.n	80041ae <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	60fb      	str	r3, [r7, #12]
   return(result);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0310 	bic.w	r3, r3, #16
 8004212:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	69b9      	ldr	r1, [r7, #24]
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	617b      	str	r3, [r7, #20]
   return(result);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e4      	bne.n	80041fe <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004234:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004238:	4619      	mov	r1, r3
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f876 	bl	800432c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004240:	e063      	b.n	800430a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00e      	beq.n	800426c <HAL_UART_IRQHandler+0x584>
 800424e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d008      	beq.n	800426c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004262:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f001 fcf7 	bl	8005c58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800426a:	e051      	b.n	8004310 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800426c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004274:	2b00      	cmp	r3, #0
 8004276:	d014      	beq.n	80042a2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800427c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004280:	2b00      	cmp	r3, #0
 8004282:	d105      	bne.n	8004290 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004288:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004294:	2b00      	cmp	r3, #0
 8004296:	d03a      	beq.n	800430e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	4798      	blx	r3
    }
    return;
 80042a0:	e035      	b.n	800430e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <HAL_UART_IRQHandler+0x5da>
 80042ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f001 f83c 	bl	8005338 <UART_EndTransmit_IT>
    return;
 80042c0:	e026      	b.n	8004310 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80042c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d009      	beq.n	80042e2 <HAL_UART_IRQHandler+0x5fa>
 80042ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f001 fcd0 	bl	8005c80 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042e0:	e016      	b.n	8004310 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80042e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d010      	beq.n	8004310 <HAL_UART_IRQHandler+0x628>
 80042ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	da0c      	bge.n	8004310 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f001 fcb8 	bl	8005c6c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042fc:	e008      	b.n	8004310 <HAL_UART_IRQHandler+0x628>
      return;
 80042fe:	bf00      	nop
 8004300:	e006      	b.n	8004310 <HAL_UART_IRQHandler+0x628>
    return;
 8004302:	bf00      	nop
 8004304:	e004      	b.n	8004310 <HAL_UART_IRQHandler+0x628>
      return;
 8004306:	bf00      	nop
 8004308:	e002      	b.n	8004310 <HAL_UART_IRQHandler+0x628>
      return;
 800430a:	bf00      	nop
 800430c:	e000      	b.n	8004310 <HAL_UART_IRQHandler+0x628>
    return;
 800430e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8004310:	37e8      	adds	r7, #232	@ 0xe8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop

08004318 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004348:	b08c      	sub	sp, #48	@ 0x30
 800434a:	af00      	add	r7, sp, #0
 800434c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	431a      	orrs	r2, r3
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	431a      	orrs	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	4313      	orrs	r3, r2
 800436a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	4baa      	ldr	r3, [pc, #680]	@ (800461c <UART_SetConfig+0x2d8>)
 8004374:	4013      	ands	r3, r2
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800437c:	430b      	orrs	r3, r1
 800437e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a9f      	ldr	r2, [pc, #636]	@ (8004620 <UART_SetConfig+0x2dc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043ac:	4313      	orrs	r3, r2
 80043ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80043ba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	6812      	ldr	r2, [r2, #0]
 80043c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043c4:	430b      	orrs	r3, r1
 80043c6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ce:	f023 010f 	bic.w	r1, r3, #15
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a90      	ldr	r2, [pc, #576]	@ (8004624 <UART_SetConfig+0x2e0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d125      	bne.n	8004434 <UART_SetConfig+0xf0>
 80043e8:	4b8f      	ldr	r3, [pc, #572]	@ (8004628 <UART_SetConfig+0x2e4>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d81a      	bhi.n	800442c <UART_SetConfig+0xe8>
 80043f6:	a201      	add	r2, pc, #4	@ (adr r2, 80043fc <UART_SetConfig+0xb8>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	0800440d 	.word	0x0800440d
 8004400:	0800441d 	.word	0x0800441d
 8004404:	08004415 	.word	0x08004415
 8004408:	08004425 	.word	0x08004425
 800440c:	2301      	movs	r3, #1
 800440e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004412:	e116      	b.n	8004642 <UART_SetConfig+0x2fe>
 8004414:	2302      	movs	r3, #2
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441a:	e112      	b.n	8004642 <UART_SetConfig+0x2fe>
 800441c:	2304      	movs	r3, #4
 800441e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004422:	e10e      	b.n	8004642 <UART_SetConfig+0x2fe>
 8004424:	2308      	movs	r3, #8
 8004426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800442a:	e10a      	b.n	8004642 <UART_SetConfig+0x2fe>
 800442c:	2310      	movs	r3, #16
 800442e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004432:	e106      	b.n	8004642 <UART_SetConfig+0x2fe>
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a7c      	ldr	r2, [pc, #496]	@ (800462c <UART_SetConfig+0x2e8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d138      	bne.n	80044b0 <UART_SetConfig+0x16c>
 800443e:	4b7a      	ldr	r3, [pc, #488]	@ (8004628 <UART_SetConfig+0x2e4>)
 8004440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004444:	f003 030c 	and.w	r3, r3, #12
 8004448:	2b0c      	cmp	r3, #12
 800444a:	d82d      	bhi.n	80044a8 <UART_SetConfig+0x164>
 800444c:	a201      	add	r2, pc, #4	@ (adr r2, 8004454 <UART_SetConfig+0x110>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	08004489 	.word	0x08004489
 8004458:	080044a9 	.word	0x080044a9
 800445c:	080044a9 	.word	0x080044a9
 8004460:	080044a9 	.word	0x080044a9
 8004464:	08004499 	.word	0x08004499
 8004468:	080044a9 	.word	0x080044a9
 800446c:	080044a9 	.word	0x080044a9
 8004470:	080044a9 	.word	0x080044a9
 8004474:	08004491 	.word	0x08004491
 8004478:	080044a9 	.word	0x080044a9
 800447c:	080044a9 	.word	0x080044a9
 8004480:	080044a9 	.word	0x080044a9
 8004484:	080044a1 	.word	0x080044a1
 8004488:	2300      	movs	r3, #0
 800448a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800448e:	e0d8      	b.n	8004642 <UART_SetConfig+0x2fe>
 8004490:	2302      	movs	r3, #2
 8004492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004496:	e0d4      	b.n	8004642 <UART_SetConfig+0x2fe>
 8004498:	2304      	movs	r3, #4
 800449a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800449e:	e0d0      	b.n	8004642 <UART_SetConfig+0x2fe>
 80044a0:	2308      	movs	r3, #8
 80044a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044a6:	e0cc      	b.n	8004642 <UART_SetConfig+0x2fe>
 80044a8:	2310      	movs	r3, #16
 80044aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ae:	e0c8      	b.n	8004642 <UART_SetConfig+0x2fe>
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a5e      	ldr	r2, [pc, #376]	@ (8004630 <UART_SetConfig+0x2ec>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d125      	bne.n	8004506 <UART_SetConfig+0x1c2>
 80044ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004628 <UART_SetConfig+0x2e4>)
 80044bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80044c4:	2b30      	cmp	r3, #48	@ 0x30
 80044c6:	d016      	beq.n	80044f6 <UART_SetConfig+0x1b2>
 80044c8:	2b30      	cmp	r3, #48	@ 0x30
 80044ca:	d818      	bhi.n	80044fe <UART_SetConfig+0x1ba>
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d00a      	beq.n	80044e6 <UART_SetConfig+0x1a2>
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d814      	bhi.n	80044fe <UART_SetConfig+0x1ba>
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <UART_SetConfig+0x19a>
 80044d8:	2b10      	cmp	r3, #16
 80044da:	d008      	beq.n	80044ee <UART_SetConfig+0x1aa>
 80044dc:	e00f      	b.n	80044fe <UART_SetConfig+0x1ba>
 80044de:	2300      	movs	r3, #0
 80044e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044e4:	e0ad      	b.n	8004642 <UART_SetConfig+0x2fe>
 80044e6:	2302      	movs	r3, #2
 80044e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ec:	e0a9      	b.n	8004642 <UART_SetConfig+0x2fe>
 80044ee:	2304      	movs	r3, #4
 80044f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044f4:	e0a5      	b.n	8004642 <UART_SetConfig+0x2fe>
 80044f6:	2308      	movs	r3, #8
 80044f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044fc:	e0a1      	b.n	8004642 <UART_SetConfig+0x2fe>
 80044fe:	2310      	movs	r3, #16
 8004500:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004504:	e09d      	b.n	8004642 <UART_SetConfig+0x2fe>
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a4a      	ldr	r2, [pc, #296]	@ (8004634 <UART_SetConfig+0x2f0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d125      	bne.n	800455c <UART_SetConfig+0x218>
 8004510:	4b45      	ldr	r3, [pc, #276]	@ (8004628 <UART_SetConfig+0x2e4>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004516:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800451a:	2bc0      	cmp	r3, #192	@ 0xc0
 800451c:	d016      	beq.n	800454c <UART_SetConfig+0x208>
 800451e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004520:	d818      	bhi.n	8004554 <UART_SetConfig+0x210>
 8004522:	2b80      	cmp	r3, #128	@ 0x80
 8004524:	d00a      	beq.n	800453c <UART_SetConfig+0x1f8>
 8004526:	2b80      	cmp	r3, #128	@ 0x80
 8004528:	d814      	bhi.n	8004554 <UART_SetConfig+0x210>
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <UART_SetConfig+0x1f0>
 800452e:	2b40      	cmp	r3, #64	@ 0x40
 8004530:	d008      	beq.n	8004544 <UART_SetConfig+0x200>
 8004532:	e00f      	b.n	8004554 <UART_SetConfig+0x210>
 8004534:	2300      	movs	r3, #0
 8004536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800453a:	e082      	b.n	8004642 <UART_SetConfig+0x2fe>
 800453c:	2302      	movs	r3, #2
 800453e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004542:	e07e      	b.n	8004642 <UART_SetConfig+0x2fe>
 8004544:	2304      	movs	r3, #4
 8004546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800454a:	e07a      	b.n	8004642 <UART_SetConfig+0x2fe>
 800454c:	2308      	movs	r3, #8
 800454e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004552:	e076      	b.n	8004642 <UART_SetConfig+0x2fe>
 8004554:	2310      	movs	r3, #16
 8004556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800455a:	e072      	b.n	8004642 <UART_SetConfig+0x2fe>
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a35      	ldr	r2, [pc, #212]	@ (8004638 <UART_SetConfig+0x2f4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d12a      	bne.n	80045bc <UART_SetConfig+0x278>
 8004566:	4b30      	ldr	r3, [pc, #192]	@ (8004628 <UART_SetConfig+0x2e4>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004570:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004574:	d01a      	beq.n	80045ac <UART_SetConfig+0x268>
 8004576:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800457a:	d81b      	bhi.n	80045b4 <UART_SetConfig+0x270>
 800457c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004580:	d00c      	beq.n	800459c <UART_SetConfig+0x258>
 8004582:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004586:	d815      	bhi.n	80045b4 <UART_SetConfig+0x270>
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <UART_SetConfig+0x250>
 800458c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004590:	d008      	beq.n	80045a4 <UART_SetConfig+0x260>
 8004592:	e00f      	b.n	80045b4 <UART_SetConfig+0x270>
 8004594:	2300      	movs	r3, #0
 8004596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800459a:	e052      	b.n	8004642 <UART_SetConfig+0x2fe>
 800459c:	2302      	movs	r3, #2
 800459e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045a2:	e04e      	b.n	8004642 <UART_SetConfig+0x2fe>
 80045a4:	2304      	movs	r3, #4
 80045a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045aa:	e04a      	b.n	8004642 <UART_SetConfig+0x2fe>
 80045ac:	2308      	movs	r3, #8
 80045ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045b2:	e046      	b.n	8004642 <UART_SetConfig+0x2fe>
 80045b4:	2310      	movs	r3, #16
 80045b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ba:	e042      	b.n	8004642 <UART_SetConfig+0x2fe>
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a17      	ldr	r2, [pc, #92]	@ (8004620 <UART_SetConfig+0x2dc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d13a      	bne.n	800463c <UART_SetConfig+0x2f8>
 80045c6:	4b18      	ldr	r3, [pc, #96]	@ (8004628 <UART_SetConfig+0x2e4>)
 80045c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045d4:	d01a      	beq.n	800460c <UART_SetConfig+0x2c8>
 80045d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045da:	d81b      	bhi.n	8004614 <UART_SetConfig+0x2d0>
 80045dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045e0:	d00c      	beq.n	80045fc <UART_SetConfig+0x2b8>
 80045e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045e6:	d815      	bhi.n	8004614 <UART_SetConfig+0x2d0>
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <UART_SetConfig+0x2b0>
 80045ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045f0:	d008      	beq.n	8004604 <UART_SetConfig+0x2c0>
 80045f2:	e00f      	b.n	8004614 <UART_SetConfig+0x2d0>
 80045f4:	2300      	movs	r3, #0
 80045f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045fa:	e022      	b.n	8004642 <UART_SetConfig+0x2fe>
 80045fc:	2302      	movs	r3, #2
 80045fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004602:	e01e      	b.n	8004642 <UART_SetConfig+0x2fe>
 8004604:	2304      	movs	r3, #4
 8004606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800460a:	e01a      	b.n	8004642 <UART_SetConfig+0x2fe>
 800460c:	2308      	movs	r3, #8
 800460e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004612:	e016      	b.n	8004642 <UART_SetConfig+0x2fe>
 8004614:	2310      	movs	r3, #16
 8004616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800461a:	e012      	b.n	8004642 <UART_SetConfig+0x2fe>
 800461c:	cfff69f3 	.word	0xcfff69f3
 8004620:	40008000 	.word	0x40008000
 8004624:	40013800 	.word	0x40013800
 8004628:	40021000 	.word	0x40021000
 800462c:	40004400 	.word	0x40004400
 8004630:	40004800 	.word	0x40004800
 8004634:	40004c00 	.word	0x40004c00
 8004638:	40005000 	.word	0x40005000
 800463c:	2310      	movs	r3, #16
 800463e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4aae      	ldr	r2, [pc, #696]	@ (8004900 <UART_SetConfig+0x5bc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	f040 8097 	bne.w	800477c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800464e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004652:	2b08      	cmp	r3, #8
 8004654:	d823      	bhi.n	800469e <UART_SetConfig+0x35a>
 8004656:	a201      	add	r2, pc, #4	@ (adr r2, 800465c <UART_SetConfig+0x318>)
 8004658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465c:	08004681 	.word	0x08004681
 8004660:	0800469f 	.word	0x0800469f
 8004664:	08004689 	.word	0x08004689
 8004668:	0800469f 	.word	0x0800469f
 800466c:	0800468f 	.word	0x0800468f
 8004670:	0800469f 	.word	0x0800469f
 8004674:	0800469f 	.word	0x0800469f
 8004678:	0800469f 	.word	0x0800469f
 800467c:	08004697 	.word	0x08004697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004680:	f7fe fb4a 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 8004684:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004686:	e010      	b.n	80046aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004688:	4b9e      	ldr	r3, [pc, #632]	@ (8004904 <UART_SetConfig+0x5c0>)
 800468a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800468c:	e00d      	b.n	80046aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800468e:	f7fe faab 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8004692:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004694:	e009      	b.n	80046aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800469a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800469c:	e005      	b.n	80046aa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80046a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8130 	beq.w	8004912 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b6:	4a94      	ldr	r2, [pc, #592]	@ (8004908 <UART_SetConfig+0x5c4>)
 80046b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046bc:	461a      	mov	r2, r3
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	4413      	add	r3, r2
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d305      	bcc.n	80046e2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d903      	bls.n	80046ea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80046e8:	e113      	b.n	8004912 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ec:	2200      	movs	r2, #0
 80046ee:	60bb      	str	r3, [r7, #8]
 80046f0:	60fa      	str	r2, [r7, #12]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	4a84      	ldr	r2, [pc, #528]	@ (8004908 <UART_SetConfig+0x5c4>)
 80046f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2200      	movs	r2, #0
 8004700:	603b      	str	r3, [r7, #0]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004708:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800470c:	f7fb fde0 	bl	80002d0 <__aeabi_uldivmod>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4610      	mov	r0, r2
 8004716:	4619      	mov	r1, r3
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	020b      	lsls	r3, r1, #8
 8004722:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004726:	0202      	lsls	r2, r0, #8
 8004728:	6979      	ldr	r1, [r7, #20]
 800472a:	6849      	ldr	r1, [r1, #4]
 800472c:	0849      	lsrs	r1, r1, #1
 800472e:	2000      	movs	r0, #0
 8004730:	460c      	mov	r4, r1
 8004732:	4605      	mov	r5, r0
 8004734:	eb12 0804 	adds.w	r8, r2, r4
 8004738:	eb43 0905 	adc.w	r9, r3, r5
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	469a      	mov	sl, r3
 8004744:	4693      	mov	fp, r2
 8004746:	4652      	mov	r2, sl
 8004748:	465b      	mov	r3, fp
 800474a:	4640      	mov	r0, r8
 800474c:	4649      	mov	r1, r9
 800474e:	f7fb fdbf 	bl	80002d0 <__aeabi_uldivmod>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4613      	mov	r3, r2
 8004758:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004760:	d308      	bcc.n	8004774 <UART_SetConfig+0x430>
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004768:	d204      	bcs.n	8004774 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6a3a      	ldr	r2, [r7, #32]
 8004770:	60da      	str	r2, [r3, #12]
 8004772:	e0ce      	b.n	8004912 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800477a:	e0ca      	b.n	8004912 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004784:	d166      	bne.n	8004854 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004786:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800478a:	2b08      	cmp	r3, #8
 800478c:	d827      	bhi.n	80047de <UART_SetConfig+0x49a>
 800478e:	a201      	add	r2, pc, #4	@ (adr r2, 8004794 <UART_SetConfig+0x450>)
 8004790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004794:	080047b9 	.word	0x080047b9
 8004798:	080047c1 	.word	0x080047c1
 800479c:	080047c9 	.word	0x080047c9
 80047a0:	080047df 	.word	0x080047df
 80047a4:	080047cf 	.word	0x080047cf
 80047a8:	080047df 	.word	0x080047df
 80047ac:	080047df 	.word	0x080047df
 80047b0:	080047df 	.word	0x080047df
 80047b4:	080047d7 	.word	0x080047d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b8:	f7fe faae 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 80047bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047be:	e014      	b.n	80047ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047c0:	f7fe fac0 	bl	8002d44 <HAL_RCC_GetPCLK2Freq>
 80047c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047c6:	e010      	b.n	80047ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047c8:	4b4e      	ldr	r3, [pc, #312]	@ (8004904 <UART_SetConfig+0x5c0>)
 80047ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047cc:	e00d      	b.n	80047ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ce:	f7fe fa0b 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 80047d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047d4:	e009      	b.n	80047ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047dc:	e005      	b.n	80047ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80047e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 8090 	beq.w	8004912 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f6:	4a44      	ldr	r2, [pc, #272]	@ (8004908 <UART_SetConfig+0x5c4>)
 80047f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047fc:	461a      	mov	r2, r3
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	fbb3 f3f2 	udiv	r3, r3, r2
 8004804:	005a      	lsls	r2, r3, #1
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	085b      	lsrs	r3, r3, #1
 800480c:	441a      	add	r2, r3
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	fbb2 f3f3 	udiv	r3, r2, r3
 8004816:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	2b0f      	cmp	r3, #15
 800481c:	d916      	bls.n	800484c <UART_SetConfig+0x508>
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004824:	d212      	bcs.n	800484c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	b29b      	uxth	r3, r3
 800482a:	f023 030f 	bic.w	r3, r3, #15
 800482e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	b29b      	uxth	r3, r3
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	b29a      	uxth	r2, r3
 800483c:	8bfb      	ldrh	r3, [r7, #30]
 800483e:	4313      	orrs	r3, r2
 8004840:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	8bfa      	ldrh	r2, [r7, #30]
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	e062      	b.n	8004912 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004852:	e05e      	b.n	8004912 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004854:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004858:	2b08      	cmp	r3, #8
 800485a:	d828      	bhi.n	80048ae <UART_SetConfig+0x56a>
 800485c:	a201      	add	r2, pc, #4	@ (adr r2, 8004864 <UART_SetConfig+0x520>)
 800485e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004862:	bf00      	nop
 8004864:	08004889 	.word	0x08004889
 8004868:	08004891 	.word	0x08004891
 800486c:	08004899 	.word	0x08004899
 8004870:	080048af 	.word	0x080048af
 8004874:	0800489f 	.word	0x0800489f
 8004878:	080048af 	.word	0x080048af
 800487c:	080048af 	.word	0x080048af
 8004880:	080048af 	.word	0x080048af
 8004884:	080048a7 	.word	0x080048a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004888:	f7fe fa46 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 800488c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800488e:	e014      	b.n	80048ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004890:	f7fe fa58 	bl	8002d44 <HAL_RCC_GetPCLK2Freq>
 8004894:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004896:	e010      	b.n	80048ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004898:	4b1a      	ldr	r3, [pc, #104]	@ (8004904 <UART_SetConfig+0x5c0>)
 800489a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800489c:	e00d      	b.n	80048ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489e:	f7fe f9a3 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 80048a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048a4:	e009      	b.n	80048ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80048ac:	e005      	b.n	80048ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80048b8:	bf00      	nop
    }

    if (pclk != 0U)
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d028      	beq.n	8004912 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c4:	4a10      	ldr	r2, [pc, #64]	@ (8004908 <UART_SetConfig+0x5c4>)
 80048c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048ca:	461a      	mov	r2, r3
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	085b      	lsrs	r3, r3, #1
 80048d8:	441a      	add	r2, r3
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	2b0f      	cmp	r3, #15
 80048e8:	d910      	bls.n	800490c <UART_SetConfig+0x5c8>
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048f0:	d20c      	bcs.n	800490c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60da      	str	r2, [r3, #12]
 80048fc:	e009      	b.n	8004912 <UART_SetConfig+0x5ce>
 80048fe:	bf00      	nop
 8004900:	40008000 	.word	0x40008000
 8004904:	00f42400 	.word	0x00f42400
 8004908:	08006dcc 	.word	0x08006dcc
      }
      else
      {
        ret = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2201      	movs	r2, #1
 8004916:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2201      	movs	r2, #1
 800491e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2200      	movs	r2, #0
 8004926:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	2200      	movs	r2, #0
 800492c:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 800492e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004932:	4618      	mov	r0, r3
 8004934:	3730      	adds	r7, #48	@ 0x30
 8004936:	46bd      	mov	sp, r7
 8004938:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800493c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01a      	beq.n	8004a52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a3a:	d10a      	bne.n	8004a52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a90:	f7fc fd2e 	bl	80014f0 <HAL_GetTick>
 8004a94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d10e      	bne.n	8004ac2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aa4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f82f 	bl	8004b16 <UART_WaitOnFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e025      	b.n	8004b0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d10e      	bne.n	8004aee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ad0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f819 	bl	8004b16 <UART_WaitOnFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e00f      	b.n	8004b0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b09c      	sub	sp, #112	@ 0x70
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	603b      	str	r3, [r7, #0]
 8004b22:	4613      	mov	r3, r2
 8004b24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b26:	e0a9      	b.n	8004c7c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b2e:	f000 80a5 	beq.w	8004c7c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b32:	f7fc fcdd 	bl	80014f0 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d302      	bcc.n	8004b48 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d140      	bne.n	8004bca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b58:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004b5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b68:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004b6c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e6      	bne.n	8004b48 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3308      	adds	r3, #8
 8004b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b84:	e853 3f00 	ldrex	r3, [r3]
 8004b88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8c:	f023 0301 	bic.w	r3, r3, #1
 8004b90:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3308      	adds	r3, #8
 8004b98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004b9a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004b9c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ba0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004ba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1e5      	bne.n	8004b7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e069      	b.n	8004c9e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d051      	beq.n	8004c7c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004be2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004be6:	d149      	bne.n	8004c7c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bf0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004c06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c10:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c12:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e6      	bne.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	613b      	str	r3, [r7, #16]
   return(result);
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3308      	adds	r3, #8
 8004c42:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004c44:	623a      	str	r2, [r7, #32]
 8004c46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c48:	69f9      	ldr	r1, [r7, #28]
 8004c4a:	6a3a      	ldr	r2, [r7, #32]
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e5      	bne.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e010      	b.n	8004c9e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	4013      	ands	r3, r2
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	bf0c      	ite	eq
 8004c8c:	2301      	moveq	r3, #1
 8004c8e:	2300      	movne	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	79fb      	ldrb	r3, [r7, #7]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	f43f af46 	beq.w	8004b28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3770      	adds	r7, #112	@ 0x70
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b0a3      	sub	sp, #140	@ 0x8c
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	88fa      	ldrh	r2, [r7, #6]
 8004cc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	88fa      	ldrh	r2, [r7, #6]
 8004cc8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cda:	d10e      	bne.n	8004cfa <UART_Start_Receive_IT+0x52>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d105      	bne.n	8004cf0 <UART_Start_Receive_IT+0x48>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004cea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cee:	e02d      	b.n	8004d4c <UART_Start_Receive_IT+0xa4>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	22ff      	movs	r2, #255	@ 0xff
 8004cf4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cf8:	e028      	b.n	8004d4c <UART_Start_Receive_IT+0xa4>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10d      	bne.n	8004d1e <UART_Start_Receive_IT+0x76>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d104      	bne.n	8004d14 <UART_Start_Receive_IT+0x6c>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	22ff      	movs	r2, #255	@ 0xff
 8004d0e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d12:	e01b      	b.n	8004d4c <UART_Start_Receive_IT+0xa4>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	227f      	movs	r2, #127	@ 0x7f
 8004d18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d1c:	e016      	b.n	8004d4c <UART_Start_Receive_IT+0xa4>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d26:	d10d      	bne.n	8004d44 <UART_Start_Receive_IT+0x9c>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d104      	bne.n	8004d3a <UART_Start_Receive_IT+0x92>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	227f      	movs	r2, #127	@ 0x7f
 8004d34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d38:	e008      	b.n	8004d4c <UART_Start_Receive_IT+0xa4>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	223f      	movs	r2, #63	@ 0x3f
 8004d3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d42:	e003      	b.n	8004d4c <UART_Start_Receive_IT+0xa4>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2222      	movs	r2, #34	@ 0x22
 8004d58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3308      	adds	r3, #8
 8004d62:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d66:	e853 3f00 	ldrex	r3, [r3]
 8004d6a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004d6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004d80:	673a      	str	r2, [r7, #112]	@ 0x70
 8004d82:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d84:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004d86:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004d88:	e841 2300 	strex	r3, r2, [r1]
 8004d8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8004d8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e3      	bne.n	8004d5c <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d9c:	d153      	bne.n	8004e46 <UART_Start_Receive_IT+0x19e>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004da4:	88fa      	ldrh	r2, [r7, #6]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d34d      	bcc.n	8004e46 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004db2:	d107      	bne.n	8004dc4 <UART_Start_Receive_IT+0x11c>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d103      	bne.n	8004dc4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4a4b      	ldr	r2, [pc, #300]	@ (8004eec <UART_Start_Receive_IT+0x244>)
 8004dc0:	671a      	str	r2, [r3, #112]	@ 0x70
 8004dc2:	e002      	b.n	8004dca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4a4a      	ldr	r2, [pc, #296]	@ (8004ef0 <UART_Start_Receive_IT+0x248>)
 8004dc8:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d01a      	beq.n	8004e10 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004de2:	e853 3f00 	ldrex	r3, [r3]
 8004de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004de8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004dfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dfe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004e02:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e4      	bne.n	8004dda <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3308      	adds	r3, #8
 8004e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004e30:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004e32:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e34:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e38:	e841 2300 	strex	r3, r2, [r1]
 8004e3c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004e3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1e5      	bne.n	8004e10 <UART_Start_Receive_IT+0x168>
 8004e44:	e04a      	b.n	8004edc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e4e:	d107      	bne.n	8004e60 <UART_Start_Receive_IT+0x1b8>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d103      	bne.n	8004e60 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4a26      	ldr	r2, [pc, #152]	@ (8004ef4 <UART_Start_Receive_IT+0x24c>)
 8004e5c:	671a      	str	r2, [r3, #112]	@ 0x70
 8004e5e:	e002      	b.n	8004e66 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4a25      	ldr	r2, [pc, #148]	@ (8004ef8 <UART_Start_Receive_IT+0x250>)
 8004e64:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d019      	beq.n	8004eaa <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004e8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	461a      	mov	r2, r3
 8004e92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e94:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e96:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e6      	bne.n	8004e76 <UART_Start_Receive_IT+0x1ce>
 8004ea8:	e018      	b.n	8004edc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	e853 3f00 	ldrex	r3, [r3]
 8004eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f043 0320 	orr.w	r3, r3, #32
 8004ebe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ec8:	623b      	str	r3, [r7, #32]
 8004eca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ecc:	69f9      	ldr	r1, [r7, #28]
 8004ece:	6a3a      	ldr	r2, [r7, #32]
 8004ed0:	e841 2300 	strex	r3, r2, [r1]
 8004ed4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1e6      	bne.n	8004eaa <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	378c      	adds	r7, #140	@ 0x8c
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	08005955 	.word	0x08005955
 8004ef0:	08005659 	.word	0x08005659
 8004ef4:	080054f3 	.word	0x080054f3
 8004ef8:	0800538f 	.word	0x0800538f

08004efc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b095      	sub	sp, #84	@ 0x54
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f22:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f24:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e6      	bne.n	8004f04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3308      	adds	r3, #8
 8004f58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e3      	bne.n	8004f36 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d118      	bne.n	8004fa8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f023 0310 	bic.w	r3, r3, #16
 8004f8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6979      	ldr	r1, [r7, #20]
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e6      	bne.n	8004f76 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8004fbc:	bf00      	nop
 8004fbe:	3754      	adds	r7, #84	@ 0x54
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7ff f996 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fec:	bf00      	nop
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b08f      	sub	sp, #60	@ 0x3c
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005002:	2b21      	cmp	r3, #33	@ 0x21
 8005004:	d14c      	bne.n	80050a0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800500c:	b29b      	uxth	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d132      	bne.n	8005078 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	e853 3f00 	ldrex	r3, [r3]
 800501e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005026:	637b      	str	r3, [r7, #52]	@ 0x34
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	461a      	mov	r2, r3
 800502e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005032:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005034:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005038:	e841 2300 	strex	r3, r2, [r1]
 800503c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e6      	bne.n	8005012 <UART_TxISR_8BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	60bb      	str	r3, [r7, #8]
   return(result);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005058:	633b      	str	r3, [r7, #48]	@ 0x30
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6979      	ldr	r1, [r7, #20]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	613b      	str	r3, [r7, #16]
   return(result);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e6      	bne.n	8005044 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005076:	e013      	b.n	80050a0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800507c:	781a      	ldrb	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80050a0:	bf00      	nop
 80050a2:	373c      	adds	r7, #60	@ 0x3c
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b091      	sub	sp, #68	@ 0x44
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ba:	2b21      	cmp	r3, #33	@ 0x21
 80050bc:	d151      	bne.n	8005162 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d132      	bne.n	8005130 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	623b      	str	r3, [r7, #32]
   return(result);
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80050ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050f0:	e841 2300 	strex	r3, r2, [r1]
 80050f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e6      	bne.n	80050ca <UART_TxISR_16BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	60fb      	str	r3, [r7, #12]
   return(result);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005110:	637b      	str	r3, [r7, #52]	@ 0x34
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800511a:	61fb      	str	r3, [r7, #28]
 800511c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	69b9      	ldr	r1, [r7, #24]
 8005120:	69fa      	ldr	r2, [r7, #28]
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	617b      	str	r3, [r7, #20]
   return(result);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e6      	bne.n	80050fc <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800512e:	e018      	b.n	8005162 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005134:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005138:	881a      	ldrh	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005142:	b292      	uxth	r2, r2
 8005144:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800514a:	1c9a      	adds	r2, r3, #2
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005156:	b29b      	uxth	r3, r3
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8005162:	bf00      	nop
 8005164:	3744      	adds	r7, #68	@ 0x44
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800516e:	b480      	push	{r7}
 8005170:	b091      	sub	sp, #68	@ 0x44
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800517c:	2b21      	cmp	r3, #33	@ 0x21
 800517e:	d160      	bne.n	8005242 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005186:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005188:	e057      	b.n	800523a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d133      	bne.n	80051fe <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3308      	adds	r3, #8
 800519c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a0:	e853 3f00 	ldrex	r3, [r3]
 80051a4:	623b      	str	r3, [r7, #32]
   return(result);
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80051ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3308      	adds	r3, #8
 80051b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80051b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051be:	e841 2300 	strex	r3, r2, [r1]
 80051c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1e5      	bne.n	8005196 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051de:	637b      	str	r3, [r7, #52]	@ 0x34
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051e8:	61fb      	str	r3, [r7, #28]
 80051ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	69b9      	ldr	r1, [r7, #24]
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	e841 2300 	strex	r3, r2, [r1]
 80051f4:	617b      	str	r3, [r7, #20]
   return(result);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e6      	bne.n	80051ca <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80051fc:	e021      	b.n	8005242 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005208:	2b00      	cmp	r3, #0
 800520a:	d013      	beq.n	8005234 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005210:	781a      	ldrb	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	851a      	strh	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005234:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005236:	3b01      	subs	r3, #1
 8005238:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800523a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1a4      	bne.n	800518a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005240:	e7ff      	b.n	8005242 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8005242:	bf00      	nop
 8005244:	3744      	adds	r7, #68	@ 0x44
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800524e:	b480      	push	{r7}
 8005250:	b091      	sub	sp, #68	@ 0x44
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800525c:	2b21      	cmp	r3, #33	@ 0x21
 800525e:	d165      	bne.n	800532c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005266:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005268:	e05c      	b.n	8005324 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005270:	b29b      	uxth	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d133      	bne.n	80052de <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3308      	adds	r3, #8
 800527c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	61fb      	str	r3, [r7, #28]
   return(result);
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800528c:	637b      	str	r3, [r7, #52]	@ 0x34
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3308      	adds	r3, #8
 8005294:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005296:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005298:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800529c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e5      	bne.n	8005276 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052be:	633b      	str	r3, [r7, #48]	@ 0x30
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6979      	ldr	r1, [r7, #20]
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	613b      	str	r3, [r7, #16]
   return(result);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e6      	bne.n	80052aa <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80052dc:	e026      	b.n	800532c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d018      	beq.n	800531e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052f0:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80052f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f4:	881a      	ldrh	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052fe:	b292      	uxth	r2, r2
 8005300:	851a      	strh	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005306:	1c9a      	adds	r2, r3, #2
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800531e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005320:	3b01      	subs	r3, #1
 8005322:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005324:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005326:	2b00      	cmp	r3, #0
 8005328:	d19f      	bne.n	800526a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800532a:	e7ff      	b.n	800532c <UART_TxISR_16BIT_FIFOEN+0xde>
 800532c:	bf00      	nop
 800532e:	3744      	adds	r7, #68	@ 0x44
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	60bb      	str	r3, [r7, #8]
   return(result);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	61bb      	str	r3, [r7, #24]
 8005360:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	6979      	ldr	r1, [r7, #20]
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	613b      	str	r3, [r7, #16]
   return(result);
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e6      	bne.n	8005340 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2220      	movs	r2, #32
 8005376:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7fb f93b 	bl	80005fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005386:	bf00      	nop
 8005388:	3720      	adds	r7, #32
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b096      	sub	sp, #88	@ 0x58
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800539c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a6:	2b22      	cmp	r3, #34	@ 0x22
 80053a8:	f040 8095 	bne.w	80054d6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80053b2:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053b6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80053ba:	b2d9      	uxtb	r1, r3
 80053bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c6:	400a      	ands	r2, r1
 80053c8:	b2d2      	uxtb	r2, r2
 80053ca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80053dc:	b29b      	uxth	r3, r3
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d17a      	bne.n	80054ea <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053fc:	e853 3f00 	ldrex	r3, [r3]
 8005400:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005404:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005408:	653b      	str	r3, [r7, #80]	@ 0x50
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005412:	647b      	str	r3, [r7, #68]	@ 0x44
 8005414:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005418:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800541a:	e841 2300 	strex	r3, r2, [r1]
 800541e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e6      	bne.n	80053f4 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3308      	adds	r3, #8
 800542c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	623b      	str	r3, [r7, #32]
   return(result);
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	f023 0301 	bic.w	r3, r3, #1
 800543c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3308      	adds	r3, #8
 8005444:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005446:	633a      	str	r2, [r7, #48]	@ 0x30
 8005448:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800544c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e5      	bne.n	8005426 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800546c:	2b01      	cmp	r3, #1
 800546e:	d12e      	bne.n	80054ce <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	60fb      	str	r3, [r7, #12]
   return(result);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0310 	bic.w	r3, r3, #16
 800548a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005494:	61fb      	str	r3, [r7, #28]
 8005496:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005498:	69b9      	ldr	r1, [r7, #24]
 800549a:	69fa      	ldr	r2, [r7, #28]
 800549c:	e841 2300 	strex	r3, r2, [r1]
 80054a0:	617b      	str	r3, [r7, #20]
   return(result);
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1e6      	bne.n	8005476 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	2b10      	cmp	r3, #16
 80054b4:	d103      	bne.n	80054be <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2210      	movs	r2, #16
 80054bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80054c4:	4619      	mov	r1, r3
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fe ff30 	bl	800432c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054cc:	e00d      	b.n	80054ea <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fb f8aa 	bl	8000628 <HAL_UART_RxCpltCallback>
}
 80054d4:	e009      	b.n	80054ea <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	8b1b      	ldrh	r3, [r3, #24]
 80054dc:	b29a      	uxth	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0208 	orr.w	r2, r2, #8
 80054e6:	b292      	uxth	r2, r2
 80054e8:	831a      	strh	r2, [r3, #24]
}
 80054ea:	bf00      	nop
 80054ec:	3758      	adds	r7, #88	@ 0x58
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b096      	sub	sp, #88	@ 0x58
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005500:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550a:	2b22      	cmp	r3, #34	@ 0x22
 800550c:	f040 8095 	bne.w	800563a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005516:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800551e:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005520:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8005524:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005528:	4013      	ands	r3, r2
 800552a:	b29a      	uxth	r2, r3
 800552c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800552e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005534:	1c9a      	adds	r2, r3, #2
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005540:	b29b      	uxth	r3, r3
 8005542:	3b01      	subs	r3, #1
 8005544:	b29a      	uxth	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005552:	b29b      	uxth	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d17a      	bne.n	800564e <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005560:	e853 3f00 	ldrex	r3, [r3]
 8005564:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005568:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800556c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005576:	643b      	str	r3, [r7, #64]	@ 0x40
 8005578:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800557c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1e6      	bne.n	8005558 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3308      	adds	r3, #8
 8005590:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	61fb      	str	r3, [r7, #28]
   return(result);
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	f023 0301 	bic.w	r3, r3, #1
 80055a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3308      	adds	r3, #8
 80055a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e5      	bne.n	800558a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d12e      	bne.n	8005632 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f023 0310 	bic.w	r3, r3, #16
 80055ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055f8:	61bb      	str	r3, [r7, #24]
 80055fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	6979      	ldr	r1, [r7, #20]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	613b      	str	r3, [r7, #16]
   return(result);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e6      	bne.n	80055da <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	2b10      	cmp	r3, #16
 8005618:	d103      	bne.n	8005622 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2210      	movs	r2, #16
 8005620:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005628:	4619      	mov	r1, r3
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fe fe7e 	bl	800432c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005630:	e00d      	b.n	800564e <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7fa fff8 	bl	8000628 <HAL_UART_RxCpltCallback>
}
 8005638:	e009      	b.n	800564e <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	8b1b      	ldrh	r3, [r3, #24]
 8005640:	b29a      	uxth	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0208 	orr.w	r2, r2, #8
 800564a:	b292      	uxth	r2, r2
 800564c:	831a      	strh	r2, [r3, #24]
}
 800564e:	bf00      	nop
 8005650:	3758      	adds	r7, #88	@ 0x58
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b0a6      	sub	sp, #152	@ 0x98
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005666:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568e:	2b22      	cmp	r3, #34	@ 0x22
 8005690:	f040 814f 	bne.w	8005932 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800569a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800569e:	e0f6      	b.n	800588e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80056a6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056aa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80056ae:	b2d9      	uxtb	r1, r3
 80056b0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ba:	400a      	ands	r2, r1
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80056e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d053      	beq.n	800579a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d011      	beq.n	8005722 <UART_RxISR_8BIT_FIFOEN+0xca>
 80056fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00b      	beq.n	8005722 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2201      	movs	r2, #1
 8005710:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005718:	f043 0201 	orr.w	r2, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005722:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d011      	beq.n	8005752 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800572e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00b      	beq.n	8005752 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2202      	movs	r2, #2
 8005740:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005748:	f043 0204 	orr.w	r2, r3, #4
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005752:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005756:	f003 0304 	and.w	r3, r3, #4
 800575a:	2b00      	cmp	r3, #0
 800575c:	d011      	beq.n	8005782 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800575e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00b      	beq.n	8005782 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2204      	movs	r2, #4
 8005770:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005778:	f043 0202 	orr.w	r2, r3, #2
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d006      	beq.n	800579a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7fe fdc3 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d173      	bne.n	800588e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80057b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80057c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057ca:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80057ce:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80057d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e4      	bne.n	80057a6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3308      	adds	r3, #8
 80057e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057e6:	e853 3f00 	ldrex	r3, [r3]
 80057ea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80057ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3308      	adds	r3, #8
 80057fe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005800:	657a      	str	r2, [r7, #84]	@ 0x54
 8005802:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005806:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800580e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e3      	bne.n	80057dc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005826:	2b01      	cmp	r3, #1
 8005828:	d12e      	bne.n	8005888 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005840:	f023 0310 	bic.w	r3, r3, #16
 8005844:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800584e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005850:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005854:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800585c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e6      	bne.n	8005830 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	f003 0310 	and.w	r3, r3, #16
 800586c:	2b10      	cmp	r3, #16
 800586e:	d103      	bne.n	8005878 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2210      	movs	r2, #16
 8005876:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7fe fd53 	bl	800432c <HAL_UARTEx_RxEventCallback>
 8005886:	e002      	b.n	800588e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7fa fecd 	bl	8000628 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800588e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005892:	2b00      	cmp	r3, #0
 8005894:	d006      	beq.n	80058a4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005896:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f47f aefe 	bne.w	80056a0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80058aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80058ae:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d047      	beq.n	8005946 <UART_RxISR_8BIT_FIFOEN+0x2ee>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80058bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d240      	bcs.n	8005946 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3308      	adds	r3, #8
 80058ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058da:	673b      	str	r3, [r7, #112]	@ 0x70
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3308      	adds	r3, #8
 80058e2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80058e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e5      	bne.n	80058c4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a15      	ldr	r2, [pc, #84]	@ (8005950 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 80058fc:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	e853 3f00 	ldrex	r3, [r3]
 800590a:	60bb      	str	r3, [r7, #8]
   return(result);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f043 0320 	orr.w	r3, r3, #32
 8005912:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	6979      	ldr	r1, [r7, #20]
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	e841 2300 	strex	r3, r2, [r1]
 8005928:	613b      	str	r3, [r7, #16]
   return(result);
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e6      	bne.n	80058fe <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005930:	e009      	b.n	8005946 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	8b1b      	ldrh	r3, [r3, #24]
 8005938:	b29a      	uxth	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0208 	orr.w	r2, r2, #8
 8005942:	b292      	uxth	r2, r2
 8005944:	831a      	strh	r2, [r3, #24]
}
 8005946:	bf00      	nop
 8005948:	3798      	adds	r7, #152	@ 0x98
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	0800538f 	.word	0x0800538f

08005954 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b0a8      	sub	sp, #160	@ 0xa0
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005962:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598a:	2b22      	cmp	r3, #34	@ 0x22
 800598c:	f040 8153 	bne.w	8005c36 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005996:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800599a:	e0fa      	b.n	8005b92 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80059a2:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80059ae:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 80059b2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 80059b6:	4013      	ands	r3, r2
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c4:	1c9a      	adds	r2, r3, #2
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80059e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d053      	beq.n	8005a9a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d011      	beq.n	8005a22 <UART_RxISR_16BIT_FIFOEN+0xce>
 80059fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00b      	beq.n	8005a22 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a18:	f043 0201 	orr.w	r2, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d011      	beq.n	8005a52 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005a2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00b      	beq.n	8005a52 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a48:	f043 0204 	orr.w	r2, r3, #4
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d011      	beq.n	8005a82 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005a5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00b      	beq.n	8005a82 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2204      	movs	r2, #4
 8005a70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a78:	f043 0202 	orr.w	r2, r3, #2
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d006      	beq.n	8005a9a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7fe fc43 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d175      	bne.n	8005b92 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ab6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005aba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ac8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005aca:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ace:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e4      	bne.n	8005aa6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005aec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005af2:	f023 0301 	bic.w	r3, r3, #1
 8005af6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3308      	adds	r3, #8
 8005b00:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e1      	bne.n	8005adc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d12e      	bne.n	8005b8c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3c:	e853 3f00 	ldrex	r3, [r3]
 8005b40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b44:	f023 0310 	bic.w	r3, r3, #16
 8005b48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b52:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b54:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e6      	bne.n	8005b34 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f003 0310 	and.w	r3, r3, #16
 8005b70:	2b10      	cmp	r3, #16
 8005b72:	d103      	bne.n	8005b7c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2210      	movs	r2, #16
 8005b7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b82:	4619      	mov	r1, r3
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7fe fbd1 	bl	800432c <HAL_UARTEx_RxEventCallback>
 8005b8a:	e002      	b.n	8005b92 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7fa fd4b 	bl	8000628 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b92:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d006      	beq.n	8005ba8 <UART_RxISR_16BIT_FIFOEN+0x254>
 8005b9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f47f aefa 	bne.w	800599c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005bae:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005bb2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d047      	beq.n	8005c4a <UART_RxISR_16BIT_FIFOEN+0x2f6>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005bc0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d240      	bcs.n	8005c4a <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3308      	adds	r3, #8
 8005bce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd2:	e853 3f00 	ldrex	r3, [r3]
 8005bd6:	623b      	str	r3, [r7, #32]
   return(result);
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bde:	677b      	str	r3, [r7, #116]	@ 0x74
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3308      	adds	r3, #8
 8005be6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005be8:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bf0:	e841 2300 	strex	r3, r2, [r1]
 8005bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1e5      	bne.n	8005bc8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a15      	ldr	r2, [pc, #84]	@ (8005c54 <UART_RxISR_16BIT_FIFOEN+0x300>)
 8005c00:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	e853 3f00 	ldrex	r3, [r3]
 8005c0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f043 0320 	orr.w	r3, r3, #32
 8005c16:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c20:	61fb      	str	r3, [r7, #28]
 8005c22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c24:	69b9      	ldr	r1, [r7, #24]
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	e841 2300 	strex	r3, r2, [r1]
 8005c2c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1e6      	bne.n	8005c02 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c34:	e009      	b.n	8005c4a <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	8b1b      	ldrh	r3, [r3, #24]
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0208 	orr.w	r2, r2, #8
 8005c46:	b292      	uxth	r2, r2
 8005c48:	831a      	strh	r2, [r3, #24]
}
 8005c4a:	bf00      	nop
 8005c4c:	37a0      	adds	r7, #160	@ 0xa0
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	080054f3 	.word	0x080054f3

08005c58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d101      	bne.n	8005caa <HAL_UARTEx_DisableFifoMode+0x16>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	e027      	b.n	8005cfa <HAL_UARTEx_DisableFifoMode+0x66>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2224      	movs	r2, #36	@ 0x24
 8005cb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0201 	bic.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005cd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b084      	sub	sp, #16
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e02d      	b.n	8005d7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2224      	movs	r2, #36	@ 0x24
 8005d2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0201 	bic.w	r2, r2, #1
 8005d44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f850 	bl	8005e00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d101      	bne.n	8005d9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d96:	2302      	movs	r3, #2
 8005d98:	e02d      	b.n	8005df6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2224      	movs	r2, #36	@ 0x24
 8005da6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0201 	bic.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f812 	bl	8005e00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d108      	bne.n	8005e22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e20:	e031      	b.n	8005e86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e22:	2308      	movs	r3, #8
 8005e24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e26:	2308      	movs	r3, #8
 8005e28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	0e5b      	lsrs	r3, r3, #25
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	0f5b      	lsrs	r3, r3, #29
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	f003 0307 	and.w	r3, r3, #7
 8005e48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e4a:	7bbb      	ldrb	r3, [r7, #14]
 8005e4c:	7b3a      	ldrb	r2, [r7, #12]
 8005e4e:	4911      	ldr	r1, [pc, #68]	@ (8005e94 <UARTEx_SetNbDataToProcess+0x94>)
 8005e50:	5c8a      	ldrb	r2, [r1, r2]
 8005e52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e56:	7b3a      	ldrb	r2, [r7, #12]
 8005e58:	490f      	ldr	r1, [pc, #60]	@ (8005e98 <UARTEx_SetNbDataToProcess+0x98>)
 8005e5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	7b7a      	ldrb	r2, [r7, #13]
 8005e6c:	4909      	ldr	r1, [pc, #36]	@ (8005e94 <UARTEx_SetNbDataToProcess+0x94>)
 8005e6e:	5c8a      	ldrb	r2, [r1, r2]
 8005e70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e74:	7b7a      	ldrb	r2, [r7, #13]
 8005e76:	4908      	ldr	r1, [pc, #32]	@ (8005e98 <UARTEx_SetNbDataToProcess+0x98>)
 8005e78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005e86:	bf00      	nop
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	08006de4 	.word	0x08006de4
 8005e98:	08006dec 	.word	0x08006dec

08005e9c <atoi>:
 8005e9c:	220a      	movs	r2, #10
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	f000 b89c 	b.w	8005fdc <strtol>

08005ea4 <siprintf>:
 8005ea4:	b40e      	push	{r1, r2, r3}
 8005ea6:	b510      	push	{r4, lr}
 8005ea8:	b09d      	sub	sp, #116	@ 0x74
 8005eaa:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005eac:	9002      	str	r0, [sp, #8]
 8005eae:	9006      	str	r0, [sp, #24]
 8005eb0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005eb4:	480a      	ldr	r0, [pc, #40]	@ (8005ee0 <siprintf+0x3c>)
 8005eb6:	9107      	str	r1, [sp, #28]
 8005eb8:	9104      	str	r1, [sp, #16]
 8005eba:	490a      	ldr	r1, [pc, #40]	@ (8005ee4 <siprintf+0x40>)
 8005ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ec0:	9105      	str	r1, [sp, #20]
 8005ec2:	2400      	movs	r4, #0
 8005ec4:	a902      	add	r1, sp, #8
 8005ec6:	6800      	ldr	r0, [r0, #0]
 8005ec8:	9301      	str	r3, [sp, #4]
 8005eca:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005ecc:	f000 f948 	bl	8006160 <_svfiprintf_r>
 8005ed0:	9b02      	ldr	r3, [sp, #8]
 8005ed2:	701c      	strb	r4, [r3, #0]
 8005ed4:	b01d      	add	sp, #116	@ 0x74
 8005ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eda:	b003      	add	sp, #12
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	20000064 	.word	0x20000064
 8005ee4:	ffff0208 	.word	0xffff0208

08005ee8 <_strtol_l.isra.0>:
 8005ee8:	2b24      	cmp	r3, #36	@ 0x24
 8005eea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eee:	4686      	mov	lr, r0
 8005ef0:	4690      	mov	r8, r2
 8005ef2:	d801      	bhi.n	8005ef8 <_strtol_l.isra.0+0x10>
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d106      	bne.n	8005f06 <_strtol_l.isra.0+0x1e>
 8005ef8:	f000 f894 	bl	8006024 <__errno>
 8005efc:	2316      	movs	r3, #22
 8005efe:	6003      	str	r3, [r0, #0]
 8005f00:	2000      	movs	r0, #0
 8005f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f06:	4834      	ldr	r0, [pc, #208]	@ (8005fd8 <_strtol_l.isra.0+0xf0>)
 8005f08:	460d      	mov	r5, r1
 8005f0a:	462a      	mov	r2, r5
 8005f0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f10:	5d06      	ldrb	r6, [r0, r4]
 8005f12:	f016 0608 	ands.w	r6, r6, #8
 8005f16:	d1f8      	bne.n	8005f0a <_strtol_l.isra.0+0x22>
 8005f18:	2c2d      	cmp	r4, #45	@ 0x2d
 8005f1a:	d110      	bne.n	8005f3e <_strtol_l.isra.0+0x56>
 8005f1c:	782c      	ldrb	r4, [r5, #0]
 8005f1e:	2601      	movs	r6, #1
 8005f20:	1c95      	adds	r5, r2, #2
 8005f22:	f033 0210 	bics.w	r2, r3, #16
 8005f26:	d115      	bne.n	8005f54 <_strtol_l.isra.0+0x6c>
 8005f28:	2c30      	cmp	r4, #48	@ 0x30
 8005f2a:	d10d      	bne.n	8005f48 <_strtol_l.isra.0+0x60>
 8005f2c:	782a      	ldrb	r2, [r5, #0]
 8005f2e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005f32:	2a58      	cmp	r2, #88	@ 0x58
 8005f34:	d108      	bne.n	8005f48 <_strtol_l.isra.0+0x60>
 8005f36:	786c      	ldrb	r4, [r5, #1]
 8005f38:	3502      	adds	r5, #2
 8005f3a:	2310      	movs	r3, #16
 8005f3c:	e00a      	b.n	8005f54 <_strtol_l.isra.0+0x6c>
 8005f3e:	2c2b      	cmp	r4, #43	@ 0x2b
 8005f40:	bf04      	itt	eq
 8005f42:	782c      	ldrbeq	r4, [r5, #0]
 8005f44:	1c95      	addeq	r5, r2, #2
 8005f46:	e7ec      	b.n	8005f22 <_strtol_l.isra.0+0x3a>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1f6      	bne.n	8005f3a <_strtol_l.isra.0+0x52>
 8005f4c:	2c30      	cmp	r4, #48	@ 0x30
 8005f4e:	bf14      	ite	ne
 8005f50:	230a      	movne	r3, #10
 8005f52:	2308      	moveq	r3, #8
 8005f54:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005f58:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	fbbc f9f3 	udiv	r9, ip, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	fb03 ca19 	mls	sl, r3, r9, ip
 8005f68:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005f6c:	2f09      	cmp	r7, #9
 8005f6e:	d80f      	bhi.n	8005f90 <_strtol_l.isra.0+0xa8>
 8005f70:	463c      	mov	r4, r7
 8005f72:	42a3      	cmp	r3, r4
 8005f74:	dd1b      	ble.n	8005fae <_strtol_l.isra.0+0xc6>
 8005f76:	1c57      	adds	r7, r2, #1
 8005f78:	d007      	beq.n	8005f8a <_strtol_l.isra.0+0xa2>
 8005f7a:	4581      	cmp	r9, r0
 8005f7c:	d314      	bcc.n	8005fa8 <_strtol_l.isra.0+0xc0>
 8005f7e:	d101      	bne.n	8005f84 <_strtol_l.isra.0+0x9c>
 8005f80:	45a2      	cmp	sl, r4
 8005f82:	db11      	blt.n	8005fa8 <_strtol_l.isra.0+0xc0>
 8005f84:	fb00 4003 	mla	r0, r0, r3, r4
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f8e:	e7eb      	b.n	8005f68 <_strtol_l.isra.0+0x80>
 8005f90:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005f94:	2f19      	cmp	r7, #25
 8005f96:	d801      	bhi.n	8005f9c <_strtol_l.isra.0+0xb4>
 8005f98:	3c37      	subs	r4, #55	@ 0x37
 8005f9a:	e7ea      	b.n	8005f72 <_strtol_l.isra.0+0x8a>
 8005f9c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005fa0:	2f19      	cmp	r7, #25
 8005fa2:	d804      	bhi.n	8005fae <_strtol_l.isra.0+0xc6>
 8005fa4:	3c57      	subs	r4, #87	@ 0x57
 8005fa6:	e7e4      	b.n	8005f72 <_strtol_l.isra.0+0x8a>
 8005fa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fac:	e7ed      	b.n	8005f8a <_strtol_l.isra.0+0xa2>
 8005fae:	1c53      	adds	r3, r2, #1
 8005fb0:	d108      	bne.n	8005fc4 <_strtol_l.isra.0+0xdc>
 8005fb2:	2322      	movs	r3, #34	@ 0x22
 8005fb4:	f8ce 3000 	str.w	r3, [lr]
 8005fb8:	4660      	mov	r0, ip
 8005fba:	f1b8 0f00 	cmp.w	r8, #0
 8005fbe:	d0a0      	beq.n	8005f02 <_strtol_l.isra.0+0x1a>
 8005fc0:	1e69      	subs	r1, r5, #1
 8005fc2:	e006      	b.n	8005fd2 <_strtol_l.isra.0+0xea>
 8005fc4:	b106      	cbz	r6, 8005fc8 <_strtol_l.isra.0+0xe0>
 8005fc6:	4240      	negs	r0, r0
 8005fc8:	f1b8 0f00 	cmp.w	r8, #0
 8005fcc:	d099      	beq.n	8005f02 <_strtol_l.isra.0+0x1a>
 8005fce:	2a00      	cmp	r2, #0
 8005fd0:	d1f6      	bne.n	8005fc0 <_strtol_l.isra.0+0xd8>
 8005fd2:	f8c8 1000 	str.w	r1, [r8]
 8005fd6:	e794      	b.n	8005f02 <_strtol_l.isra.0+0x1a>
 8005fd8:	08006df5 	.word	0x08006df5

08005fdc <strtol>:
 8005fdc:	4613      	mov	r3, r2
 8005fde:	460a      	mov	r2, r1
 8005fe0:	4601      	mov	r1, r0
 8005fe2:	4802      	ldr	r0, [pc, #8]	@ (8005fec <strtol+0x10>)
 8005fe4:	6800      	ldr	r0, [r0, #0]
 8005fe6:	f7ff bf7f 	b.w	8005ee8 <_strtol_l.isra.0>
 8005fea:	bf00      	nop
 8005fec:	20000064 	.word	0x20000064

08005ff0 <memset>:
 8005ff0:	4402      	add	r2, r0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d100      	bne.n	8005ffa <memset+0xa>
 8005ff8:	4770      	bx	lr
 8005ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8005ffe:	e7f9      	b.n	8005ff4 <memset+0x4>

08006000 <strncmp>:
 8006000:	b510      	push	{r4, lr}
 8006002:	b16a      	cbz	r2, 8006020 <strncmp+0x20>
 8006004:	3901      	subs	r1, #1
 8006006:	1884      	adds	r4, r0, r2
 8006008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800600c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006010:	429a      	cmp	r2, r3
 8006012:	d103      	bne.n	800601c <strncmp+0x1c>
 8006014:	42a0      	cmp	r0, r4
 8006016:	d001      	beq.n	800601c <strncmp+0x1c>
 8006018:	2a00      	cmp	r2, #0
 800601a:	d1f5      	bne.n	8006008 <strncmp+0x8>
 800601c:	1ad0      	subs	r0, r2, r3
 800601e:	bd10      	pop	{r4, pc}
 8006020:	4610      	mov	r0, r2
 8006022:	e7fc      	b.n	800601e <strncmp+0x1e>

08006024 <__errno>:
 8006024:	4b01      	ldr	r3, [pc, #4]	@ (800602c <__errno+0x8>)
 8006026:	6818      	ldr	r0, [r3, #0]
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	20000064 	.word	0x20000064

08006030 <__libc_init_array>:
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	4d0d      	ldr	r5, [pc, #52]	@ (8006068 <__libc_init_array+0x38>)
 8006034:	4c0d      	ldr	r4, [pc, #52]	@ (800606c <__libc_init_array+0x3c>)
 8006036:	1b64      	subs	r4, r4, r5
 8006038:	10a4      	asrs	r4, r4, #2
 800603a:	2600      	movs	r6, #0
 800603c:	42a6      	cmp	r6, r4
 800603e:	d109      	bne.n	8006054 <__libc_init_array+0x24>
 8006040:	4d0b      	ldr	r5, [pc, #44]	@ (8006070 <__libc_init_array+0x40>)
 8006042:	4c0c      	ldr	r4, [pc, #48]	@ (8006074 <__libc_init_array+0x44>)
 8006044:	f000 fc6c 	bl	8006920 <_init>
 8006048:	1b64      	subs	r4, r4, r5
 800604a:	10a4      	asrs	r4, r4, #2
 800604c:	2600      	movs	r6, #0
 800604e:	42a6      	cmp	r6, r4
 8006050:	d105      	bne.n	800605e <__libc_init_array+0x2e>
 8006052:	bd70      	pop	{r4, r5, r6, pc}
 8006054:	f855 3b04 	ldr.w	r3, [r5], #4
 8006058:	4798      	blx	r3
 800605a:	3601      	adds	r6, #1
 800605c:	e7ee      	b.n	800603c <__libc_init_array+0xc>
 800605e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006062:	4798      	blx	r3
 8006064:	3601      	adds	r6, #1
 8006066:	e7f2      	b.n	800604e <__libc_init_array+0x1e>
 8006068:	08006f30 	.word	0x08006f30
 800606c:	08006f30 	.word	0x08006f30
 8006070:	08006f30 	.word	0x08006f30
 8006074:	08006f34 	.word	0x08006f34

08006078 <__retarget_lock_acquire_recursive>:
 8006078:	4770      	bx	lr

0800607a <__retarget_lock_release_recursive>:
 800607a:	4770      	bx	lr

0800607c <strcpy>:
 800607c:	4603      	mov	r3, r0
 800607e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006082:	f803 2b01 	strb.w	r2, [r3], #1
 8006086:	2a00      	cmp	r2, #0
 8006088:	d1f9      	bne.n	800607e <strcpy+0x2>
 800608a:	4770      	bx	lr

0800608c <memcpy>:
 800608c:	440a      	add	r2, r1
 800608e:	4291      	cmp	r1, r2
 8006090:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006094:	d100      	bne.n	8006098 <memcpy+0xc>
 8006096:	4770      	bx	lr
 8006098:	b510      	push	{r4, lr}
 800609a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800609e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060a2:	4291      	cmp	r1, r2
 80060a4:	d1f9      	bne.n	800609a <memcpy+0xe>
 80060a6:	bd10      	pop	{r4, pc}

080060a8 <__ssputs_r>:
 80060a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ac:	688e      	ldr	r6, [r1, #8]
 80060ae:	461f      	mov	r7, r3
 80060b0:	42be      	cmp	r6, r7
 80060b2:	680b      	ldr	r3, [r1, #0]
 80060b4:	4682      	mov	sl, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	4690      	mov	r8, r2
 80060ba:	d82d      	bhi.n	8006118 <__ssputs_r+0x70>
 80060bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80060c4:	d026      	beq.n	8006114 <__ssputs_r+0x6c>
 80060c6:	6965      	ldr	r5, [r4, #20]
 80060c8:	6909      	ldr	r1, [r1, #16]
 80060ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060ce:	eba3 0901 	sub.w	r9, r3, r1
 80060d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060d6:	1c7b      	adds	r3, r7, #1
 80060d8:	444b      	add	r3, r9
 80060da:	106d      	asrs	r5, r5, #1
 80060dc:	429d      	cmp	r5, r3
 80060de:	bf38      	it	cc
 80060e0:	461d      	movcc	r5, r3
 80060e2:	0553      	lsls	r3, r2, #21
 80060e4:	d527      	bpl.n	8006136 <__ssputs_r+0x8e>
 80060e6:	4629      	mov	r1, r5
 80060e8:	f000 f958 	bl	800639c <_malloc_r>
 80060ec:	4606      	mov	r6, r0
 80060ee:	b360      	cbz	r0, 800614a <__ssputs_r+0xa2>
 80060f0:	6921      	ldr	r1, [r4, #16]
 80060f2:	464a      	mov	r2, r9
 80060f4:	f7ff ffca 	bl	800608c <memcpy>
 80060f8:	89a3      	ldrh	r3, [r4, #12]
 80060fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80060fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006102:	81a3      	strh	r3, [r4, #12]
 8006104:	6126      	str	r6, [r4, #16]
 8006106:	6165      	str	r5, [r4, #20]
 8006108:	444e      	add	r6, r9
 800610a:	eba5 0509 	sub.w	r5, r5, r9
 800610e:	6026      	str	r6, [r4, #0]
 8006110:	60a5      	str	r5, [r4, #8]
 8006112:	463e      	mov	r6, r7
 8006114:	42be      	cmp	r6, r7
 8006116:	d900      	bls.n	800611a <__ssputs_r+0x72>
 8006118:	463e      	mov	r6, r7
 800611a:	6820      	ldr	r0, [r4, #0]
 800611c:	4632      	mov	r2, r6
 800611e:	4641      	mov	r1, r8
 8006120:	f000 fb82 	bl	8006828 <memmove>
 8006124:	68a3      	ldr	r3, [r4, #8]
 8006126:	1b9b      	subs	r3, r3, r6
 8006128:	60a3      	str	r3, [r4, #8]
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	4433      	add	r3, r6
 800612e:	6023      	str	r3, [r4, #0]
 8006130:	2000      	movs	r0, #0
 8006132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006136:	462a      	mov	r2, r5
 8006138:	f000 fb48 	bl	80067cc <_realloc_r>
 800613c:	4606      	mov	r6, r0
 800613e:	2800      	cmp	r0, #0
 8006140:	d1e0      	bne.n	8006104 <__ssputs_r+0x5c>
 8006142:	6921      	ldr	r1, [r4, #16]
 8006144:	4650      	mov	r0, sl
 8006146:	f000 fb99 	bl	800687c <_free_r>
 800614a:	230c      	movs	r3, #12
 800614c:	f8ca 3000 	str.w	r3, [sl]
 8006150:	89a3      	ldrh	r3, [r4, #12]
 8006152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006156:	81a3      	strh	r3, [r4, #12]
 8006158:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800615c:	e7e9      	b.n	8006132 <__ssputs_r+0x8a>
	...

08006160 <_svfiprintf_r>:
 8006160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	4698      	mov	r8, r3
 8006166:	898b      	ldrh	r3, [r1, #12]
 8006168:	061b      	lsls	r3, r3, #24
 800616a:	b09d      	sub	sp, #116	@ 0x74
 800616c:	4607      	mov	r7, r0
 800616e:	460d      	mov	r5, r1
 8006170:	4614      	mov	r4, r2
 8006172:	d510      	bpl.n	8006196 <_svfiprintf_r+0x36>
 8006174:	690b      	ldr	r3, [r1, #16]
 8006176:	b973      	cbnz	r3, 8006196 <_svfiprintf_r+0x36>
 8006178:	2140      	movs	r1, #64	@ 0x40
 800617a:	f000 f90f 	bl	800639c <_malloc_r>
 800617e:	6028      	str	r0, [r5, #0]
 8006180:	6128      	str	r0, [r5, #16]
 8006182:	b930      	cbnz	r0, 8006192 <_svfiprintf_r+0x32>
 8006184:	230c      	movs	r3, #12
 8006186:	603b      	str	r3, [r7, #0]
 8006188:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800618c:	b01d      	add	sp, #116	@ 0x74
 800618e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006192:	2340      	movs	r3, #64	@ 0x40
 8006194:	616b      	str	r3, [r5, #20]
 8006196:	2300      	movs	r3, #0
 8006198:	9309      	str	r3, [sp, #36]	@ 0x24
 800619a:	2320      	movs	r3, #32
 800619c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80061a4:	2330      	movs	r3, #48	@ 0x30
 80061a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006344 <_svfiprintf_r+0x1e4>
 80061aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061ae:	f04f 0901 	mov.w	r9, #1
 80061b2:	4623      	mov	r3, r4
 80061b4:	469a      	mov	sl, r3
 80061b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061ba:	b10a      	cbz	r2, 80061c0 <_svfiprintf_r+0x60>
 80061bc:	2a25      	cmp	r2, #37	@ 0x25
 80061be:	d1f9      	bne.n	80061b4 <_svfiprintf_r+0x54>
 80061c0:	ebba 0b04 	subs.w	fp, sl, r4
 80061c4:	d00b      	beq.n	80061de <_svfiprintf_r+0x7e>
 80061c6:	465b      	mov	r3, fp
 80061c8:	4622      	mov	r2, r4
 80061ca:	4629      	mov	r1, r5
 80061cc:	4638      	mov	r0, r7
 80061ce:	f7ff ff6b 	bl	80060a8 <__ssputs_r>
 80061d2:	3001      	adds	r0, #1
 80061d4:	f000 80a7 	beq.w	8006326 <_svfiprintf_r+0x1c6>
 80061d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061da:	445a      	add	r2, fp
 80061dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80061de:	f89a 3000 	ldrb.w	r3, [sl]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 809f 	beq.w	8006326 <_svfiprintf_r+0x1c6>
 80061e8:	2300      	movs	r3, #0
 80061ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80061ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061f2:	f10a 0a01 	add.w	sl, sl, #1
 80061f6:	9304      	str	r3, [sp, #16]
 80061f8:	9307      	str	r3, [sp, #28]
 80061fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8006200:	4654      	mov	r4, sl
 8006202:	2205      	movs	r2, #5
 8006204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006208:	484e      	ldr	r0, [pc, #312]	@ (8006344 <_svfiprintf_r+0x1e4>)
 800620a:	f7fa f811 	bl	8000230 <memchr>
 800620e:	9a04      	ldr	r2, [sp, #16]
 8006210:	b9d8      	cbnz	r0, 800624a <_svfiprintf_r+0xea>
 8006212:	06d0      	lsls	r0, r2, #27
 8006214:	bf44      	itt	mi
 8006216:	2320      	movmi	r3, #32
 8006218:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800621c:	0711      	lsls	r1, r2, #28
 800621e:	bf44      	itt	mi
 8006220:	232b      	movmi	r3, #43	@ 0x2b
 8006222:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006226:	f89a 3000 	ldrb.w	r3, [sl]
 800622a:	2b2a      	cmp	r3, #42	@ 0x2a
 800622c:	d015      	beq.n	800625a <_svfiprintf_r+0xfa>
 800622e:	9a07      	ldr	r2, [sp, #28]
 8006230:	4654      	mov	r4, sl
 8006232:	2000      	movs	r0, #0
 8006234:	f04f 0c0a 	mov.w	ip, #10
 8006238:	4621      	mov	r1, r4
 800623a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800623e:	3b30      	subs	r3, #48	@ 0x30
 8006240:	2b09      	cmp	r3, #9
 8006242:	d94b      	bls.n	80062dc <_svfiprintf_r+0x17c>
 8006244:	b1b0      	cbz	r0, 8006274 <_svfiprintf_r+0x114>
 8006246:	9207      	str	r2, [sp, #28]
 8006248:	e014      	b.n	8006274 <_svfiprintf_r+0x114>
 800624a:	eba0 0308 	sub.w	r3, r0, r8
 800624e:	fa09 f303 	lsl.w	r3, r9, r3
 8006252:	4313      	orrs	r3, r2
 8006254:	9304      	str	r3, [sp, #16]
 8006256:	46a2      	mov	sl, r4
 8006258:	e7d2      	b.n	8006200 <_svfiprintf_r+0xa0>
 800625a:	9b03      	ldr	r3, [sp, #12]
 800625c:	1d19      	adds	r1, r3, #4
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	9103      	str	r1, [sp, #12]
 8006262:	2b00      	cmp	r3, #0
 8006264:	bfbb      	ittet	lt
 8006266:	425b      	neglt	r3, r3
 8006268:	f042 0202 	orrlt.w	r2, r2, #2
 800626c:	9307      	strge	r3, [sp, #28]
 800626e:	9307      	strlt	r3, [sp, #28]
 8006270:	bfb8      	it	lt
 8006272:	9204      	strlt	r2, [sp, #16]
 8006274:	7823      	ldrb	r3, [r4, #0]
 8006276:	2b2e      	cmp	r3, #46	@ 0x2e
 8006278:	d10a      	bne.n	8006290 <_svfiprintf_r+0x130>
 800627a:	7863      	ldrb	r3, [r4, #1]
 800627c:	2b2a      	cmp	r3, #42	@ 0x2a
 800627e:	d132      	bne.n	80062e6 <_svfiprintf_r+0x186>
 8006280:	9b03      	ldr	r3, [sp, #12]
 8006282:	1d1a      	adds	r2, r3, #4
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	9203      	str	r2, [sp, #12]
 8006288:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800628c:	3402      	adds	r4, #2
 800628e:	9305      	str	r3, [sp, #20]
 8006290:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006354 <_svfiprintf_r+0x1f4>
 8006294:	7821      	ldrb	r1, [r4, #0]
 8006296:	2203      	movs	r2, #3
 8006298:	4650      	mov	r0, sl
 800629a:	f7f9 ffc9 	bl	8000230 <memchr>
 800629e:	b138      	cbz	r0, 80062b0 <_svfiprintf_r+0x150>
 80062a0:	9b04      	ldr	r3, [sp, #16]
 80062a2:	eba0 000a 	sub.w	r0, r0, sl
 80062a6:	2240      	movs	r2, #64	@ 0x40
 80062a8:	4082      	lsls	r2, r0
 80062aa:	4313      	orrs	r3, r2
 80062ac:	3401      	adds	r4, #1
 80062ae:	9304      	str	r3, [sp, #16]
 80062b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062b4:	4824      	ldr	r0, [pc, #144]	@ (8006348 <_svfiprintf_r+0x1e8>)
 80062b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062ba:	2206      	movs	r2, #6
 80062bc:	f7f9 ffb8 	bl	8000230 <memchr>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	d036      	beq.n	8006332 <_svfiprintf_r+0x1d2>
 80062c4:	4b21      	ldr	r3, [pc, #132]	@ (800634c <_svfiprintf_r+0x1ec>)
 80062c6:	bb1b      	cbnz	r3, 8006310 <_svfiprintf_r+0x1b0>
 80062c8:	9b03      	ldr	r3, [sp, #12]
 80062ca:	3307      	adds	r3, #7
 80062cc:	f023 0307 	bic.w	r3, r3, #7
 80062d0:	3308      	adds	r3, #8
 80062d2:	9303      	str	r3, [sp, #12]
 80062d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062d6:	4433      	add	r3, r6
 80062d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80062da:	e76a      	b.n	80061b2 <_svfiprintf_r+0x52>
 80062dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80062e0:	460c      	mov	r4, r1
 80062e2:	2001      	movs	r0, #1
 80062e4:	e7a8      	b.n	8006238 <_svfiprintf_r+0xd8>
 80062e6:	2300      	movs	r3, #0
 80062e8:	3401      	adds	r4, #1
 80062ea:	9305      	str	r3, [sp, #20]
 80062ec:	4619      	mov	r1, r3
 80062ee:	f04f 0c0a 	mov.w	ip, #10
 80062f2:	4620      	mov	r0, r4
 80062f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062f8:	3a30      	subs	r2, #48	@ 0x30
 80062fa:	2a09      	cmp	r2, #9
 80062fc:	d903      	bls.n	8006306 <_svfiprintf_r+0x1a6>
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d0c6      	beq.n	8006290 <_svfiprintf_r+0x130>
 8006302:	9105      	str	r1, [sp, #20]
 8006304:	e7c4      	b.n	8006290 <_svfiprintf_r+0x130>
 8006306:	fb0c 2101 	mla	r1, ip, r1, r2
 800630a:	4604      	mov	r4, r0
 800630c:	2301      	movs	r3, #1
 800630e:	e7f0      	b.n	80062f2 <_svfiprintf_r+0x192>
 8006310:	ab03      	add	r3, sp, #12
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	462a      	mov	r2, r5
 8006316:	4b0e      	ldr	r3, [pc, #56]	@ (8006350 <_svfiprintf_r+0x1f0>)
 8006318:	a904      	add	r1, sp, #16
 800631a:	4638      	mov	r0, r7
 800631c:	f3af 8000 	nop.w
 8006320:	1c42      	adds	r2, r0, #1
 8006322:	4606      	mov	r6, r0
 8006324:	d1d6      	bne.n	80062d4 <_svfiprintf_r+0x174>
 8006326:	89ab      	ldrh	r3, [r5, #12]
 8006328:	065b      	lsls	r3, r3, #25
 800632a:	f53f af2d 	bmi.w	8006188 <_svfiprintf_r+0x28>
 800632e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006330:	e72c      	b.n	800618c <_svfiprintf_r+0x2c>
 8006332:	ab03      	add	r3, sp, #12
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	462a      	mov	r2, r5
 8006338:	4b05      	ldr	r3, [pc, #20]	@ (8006350 <_svfiprintf_r+0x1f0>)
 800633a:	a904      	add	r1, sp, #16
 800633c:	4638      	mov	r0, r7
 800633e:	f000 f91b 	bl	8006578 <_printf_i>
 8006342:	e7ed      	b.n	8006320 <_svfiprintf_r+0x1c0>
 8006344:	08006ef5 	.word	0x08006ef5
 8006348:	08006eff 	.word	0x08006eff
 800634c:	00000000 	.word	0x00000000
 8006350:	080060a9 	.word	0x080060a9
 8006354:	08006efb 	.word	0x08006efb

08006358 <sbrk_aligned>:
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	4e0f      	ldr	r6, [pc, #60]	@ (8006398 <sbrk_aligned+0x40>)
 800635c:	460c      	mov	r4, r1
 800635e:	6831      	ldr	r1, [r6, #0]
 8006360:	4605      	mov	r5, r0
 8006362:	b911      	cbnz	r1, 800636a <sbrk_aligned+0x12>
 8006364:	f000 fa7a 	bl	800685c <_sbrk_r>
 8006368:	6030      	str	r0, [r6, #0]
 800636a:	4621      	mov	r1, r4
 800636c:	4628      	mov	r0, r5
 800636e:	f000 fa75 	bl	800685c <_sbrk_r>
 8006372:	1c43      	adds	r3, r0, #1
 8006374:	d103      	bne.n	800637e <sbrk_aligned+0x26>
 8006376:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800637a:	4620      	mov	r0, r4
 800637c:	bd70      	pop	{r4, r5, r6, pc}
 800637e:	1cc4      	adds	r4, r0, #3
 8006380:	f024 0403 	bic.w	r4, r4, #3
 8006384:	42a0      	cmp	r0, r4
 8006386:	d0f8      	beq.n	800637a <sbrk_aligned+0x22>
 8006388:	1a21      	subs	r1, r4, r0
 800638a:	4628      	mov	r0, r5
 800638c:	f000 fa66 	bl	800685c <_sbrk_r>
 8006390:	3001      	adds	r0, #1
 8006392:	d1f2      	bne.n	800637a <sbrk_aligned+0x22>
 8006394:	e7ef      	b.n	8006376 <sbrk_aligned+0x1e>
 8006396:	bf00      	nop
 8006398:	20000460 	.word	0x20000460

0800639c <_malloc_r>:
 800639c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063a0:	1ccd      	adds	r5, r1, #3
 80063a2:	f025 0503 	bic.w	r5, r5, #3
 80063a6:	3508      	adds	r5, #8
 80063a8:	2d0c      	cmp	r5, #12
 80063aa:	bf38      	it	cc
 80063ac:	250c      	movcc	r5, #12
 80063ae:	2d00      	cmp	r5, #0
 80063b0:	4606      	mov	r6, r0
 80063b2:	db01      	blt.n	80063b8 <_malloc_r+0x1c>
 80063b4:	42a9      	cmp	r1, r5
 80063b6:	d904      	bls.n	80063c2 <_malloc_r+0x26>
 80063b8:	230c      	movs	r3, #12
 80063ba:	6033      	str	r3, [r6, #0]
 80063bc:	2000      	movs	r0, #0
 80063be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006498 <_malloc_r+0xfc>
 80063c6:	f000 f9f5 	bl	80067b4 <__malloc_lock>
 80063ca:	f8d8 3000 	ldr.w	r3, [r8]
 80063ce:	461c      	mov	r4, r3
 80063d0:	bb44      	cbnz	r4, 8006424 <_malloc_r+0x88>
 80063d2:	4629      	mov	r1, r5
 80063d4:	4630      	mov	r0, r6
 80063d6:	f7ff ffbf 	bl	8006358 <sbrk_aligned>
 80063da:	1c43      	adds	r3, r0, #1
 80063dc:	4604      	mov	r4, r0
 80063de:	d158      	bne.n	8006492 <_malloc_r+0xf6>
 80063e0:	f8d8 4000 	ldr.w	r4, [r8]
 80063e4:	4627      	mov	r7, r4
 80063e6:	2f00      	cmp	r7, #0
 80063e8:	d143      	bne.n	8006472 <_malloc_r+0xd6>
 80063ea:	2c00      	cmp	r4, #0
 80063ec:	d04b      	beq.n	8006486 <_malloc_r+0xea>
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	4639      	mov	r1, r7
 80063f2:	4630      	mov	r0, r6
 80063f4:	eb04 0903 	add.w	r9, r4, r3
 80063f8:	f000 fa30 	bl	800685c <_sbrk_r>
 80063fc:	4581      	cmp	r9, r0
 80063fe:	d142      	bne.n	8006486 <_malloc_r+0xea>
 8006400:	6821      	ldr	r1, [r4, #0]
 8006402:	1a6d      	subs	r5, r5, r1
 8006404:	4629      	mov	r1, r5
 8006406:	4630      	mov	r0, r6
 8006408:	f7ff ffa6 	bl	8006358 <sbrk_aligned>
 800640c:	3001      	adds	r0, #1
 800640e:	d03a      	beq.n	8006486 <_malloc_r+0xea>
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	442b      	add	r3, r5
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	f8d8 3000 	ldr.w	r3, [r8]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	bb62      	cbnz	r2, 8006478 <_malloc_r+0xdc>
 800641e:	f8c8 7000 	str.w	r7, [r8]
 8006422:	e00f      	b.n	8006444 <_malloc_r+0xa8>
 8006424:	6822      	ldr	r2, [r4, #0]
 8006426:	1b52      	subs	r2, r2, r5
 8006428:	d420      	bmi.n	800646c <_malloc_r+0xd0>
 800642a:	2a0b      	cmp	r2, #11
 800642c:	d917      	bls.n	800645e <_malloc_r+0xc2>
 800642e:	1961      	adds	r1, r4, r5
 8006430:	42a3      	cmp	r3, r4
 8006432:	6025      	str	r5, [r4, #0]
 8006434:	bf18      	it	ne
 8006436:	6059      	strne	r1, [r3, #4]
 8006438:	6863      	ldr	r3, [r4, #4]
 800643a:	bf08      	it	eq
 800643c:	f8c8 1000 	streq.w	r1, [r8]
 8006440:	5162      	str	r2, [r4, r5]
 8006442:	604b      	str	r3, [r1, #4]
 8006444:	4630      	mov	r0, r6
 8006446:	f000 f9bb 	bl	80067c0 <__malloc_unlock>
 800644a:	f104 000b 	add.w	r0, r4, #11
 800644e:	1d23      	adds	r3, r4, #4
 8006450:	f020 0007 	bic.w	r0, r0, #7
 8006454:	1ac2      	subs	r2, r0, r3
 8006456:	bf1c      	itt	ne
 8006458:	1a1b      	subne	r3, r3, r0
 800645a:	50a3      	strne	r3, [r4, r2]
 800645c:	e7af      	b.n	80063be <_malloc_r+0x22>
 800645e:	6862      	ldr	r2, [r4, #4]
 8006460:	42a3      	cmp	r3, r4
 8006462:	bf0c      	ite	eq
 8006464:	f8c8 2000 	streq.w	r2, [r8]
 8006468:	605a      	strne	r2, [r3, #4]
 800646a:	e7eb      	b.n	8006444 <_malloc_r+0xa8>
 800646c:	4623      	mov	r3, r4
 800646e:	6864      	ldr	r4, [r4, #4]
 8006470:	e7ae      	b.n	80063d0 <_malloc_r+0x34>
 8006472:	463c      	mov	r4, r7
 8006474:	687f      	ldr	r7, [r7, #4]
 8006476:	e7b6      	b.n	80063e6 <_malloc_r+0x4a>
 8006478:	461a      	mov	r2, r3
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	42a3      	cmp	r3, r4
 800647e:	d1fb      	bne.n	8006478 <_malloc_r+0xdc>
 8006480:	2300      	movs	r3, #0
 8006482:	6053      	str	r3, [r2, #4]
 8006484:	e7de      	b.n	8006444 <_malloc_r+0xa8>
 8006486:	230c      	movs	r3, #12
 8006488:	6033      	str	r3, [r6, #0]
 800648a:	4630      	mov	r0, r6
 800648c:	f000 f998 	bl	80067c0 <__malloc_unlock>
 8006490:	e794      	b.n	80063bc <_malloc_r+0x20>
 8006492:	6005      	str	r5, [r0, #0]
 8006494:	e7d6      	b.n	8006444 <_malloc_r+0xa8>
 8006496:	bf00      	nop
 8006498:	20000464 	.word	0x20000464

0800649c <_printf_common>:
 800649c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a0:	4616      	mov	r6, r2
 80064a2:	4698      	mov	r8, r3
 80064a4:	688a      	ldr	r2, [r1, #8]
 80064a6:	690b      	ldr	r3, [r1, #16]
 80064a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064ac:	4293      	cmp	r3, r2
 80064ae:	bfb8      	it	lt
 80064b0:	4613      	movlt	r3, r2
 80064b2:	6033      	str	r3, [r6, #0]
 80064b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064b8:	4607      	mov	r7, r0
 80064ba:	460c      	mov	r4, r1
 80064bc:	b10a      	cbz	r2, 80064c2 <_printf_common+0x26>
 80064be:	3301      	adds	r3, #1
 80064c0:	6033      	str	r3, [r6, #0]
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	0699      	lsls	r1, r3, #26
 80064c6:	bf42      	ittt	mi
 80064c8:	6833      	ldrmi	r3, [r6, #0]
 80064ca:	3302      	addmi	r3, #2
 80064cc:	6033      	strmi	r3, [r6, #0]
 80064ce:	6825      	ldr	r5, [r4, #0]
 80064d0:	f015 0506 	ands.w	r5, r5, #6
 80064d4:	d106      	bne.n	80064e4 <_printf_common+0x48>
 80064d6:	f104 0a19 	add.w	sl, r4, #25
 80064da:	68e3      	ldr	r3, [r4, #12]
 80064dc:	6832      	ldr	r2, [r6, #0]
 80064de:	1a9b      	subs	r3, r3, r2
 80064e0:	42ab      	cmp	r3, r5
 80064e2:	dc26      	bgt.n	8006532 <_printf_common+0x96>
 80064e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064e8:	6822      	ldr	r2, [r4, #0]
 80064ea:	3b00      	subs	r3, #0
 80064ec:	bf18      	it	ne
 80064ee:	2301      	movne	r3, #1
 80064f0:	0692      	lsls	r2, r2, #26
 80064f2:	d42b      	bmi.n	800654c <_printf_common+0xb0>
 80064f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064f8:	4641      	mov	r1, r8
 80064fa:	4638      	mov	r0, r7
 80064fc:	47c8      	blx	r9
 80064fe:	3001      	adds	r0, #1
 8006500:	d01e      	beq.n	8006540 <_printf_common+0xa4>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	6922      	ldr	r2, [r4, #16]
 8006506:	f003 0306 	and.w	r3, r3, #6
 800650a:	2b04      	cmp	r3, #4
 800650c:	bf02      	ittt	eq
 800650e:	68e5      	ldreq	r5, [r4, #12]
 8006510:	6833      	ldreq	r3, [r6, #0]
 8006512:	1aed      	subeq	r5, r5, r3
 8006514:	68a3      	ldr	r3, [r4, #8]
 8006516:	bf0c      	ite	eq
 8006518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800651c:	2500      	movne	r5, #0
 800651e:	4293      	cmp	r3, r2
 8006520:	bfc4      	itt	gt
 8006522:	1a9b      	subgt	r3, r3, r2
 8006524:	18ed      	addgt	r5, r5, r3
 8006526:	2600      	movs	r6, #0
 8006528:	341a      	adds	r4, #26
 800652a:	42b5      	cmp	r5, r6
 800652c:	d11a      	bne.n	8006564 <_printf_common+0xc8>
 800652e:	2000      	movs	r0, #0
 8006530:	e008      	b.n	8006544 <_printf_common+0xa8>
 8006532:	2301      	movs	r3, #1
 8006534:	4652      	mov	r2, sl
 8006536:	4641      	mov	r1, r8
 8006538:	4638      	mov	r0, r7
 800653a:	47c8      	blx	r9
 800653c:	3001      	adds	r0, #1
 800653e:	d103      	bne.n	8006548 <_printf_common+0xac>
 8006540:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006548:	3501      	adds	r5, #1
 800654a:	e7c6      	b.n	80064da <_printf_common+0x3e>
 800654c:	18e1      	adds	r1, r4, r3
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	2030      	movs	r0, #48	@ 0x30
 8006552:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006556:	4422      	add	r2, r4
 8006558:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800655c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006560:	3302      	adds	r3, #2
 8006562:	e7c7      	b.n	80064f4 <_printf_common+0x58>
 8006564:	2301      	movs	r3, #1
 8006566:	4622      	mov	r2, r4
 8006568:	4641      	mov	r1, r8
 800656a:	4638      	mov	r0, r7
 800656c:	47c8      	blx	r9
 800656e:	3001      	adds	r0, #1
 8006570:	d0e6      	beq.n	8006540 <_printf_common+0xa4>
 8006572:	3601      	adds	r6, #1
 8006574:	e7d9      	b.n	800652a <_printf_common+0x8e>
	...

08006578 <_printf_i>:
 8006578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800657c:	7e0f      	ldrb	r7, [r1, #24]
 800657e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006580:	2f78      	cmp	r7, #120	@ 0x78
 8006582:	4691      	mov	r9, r2
 8006584:	4680      	mov	r8, r0
 8006586:	460c      	mov	r4, r1
 8006588:	469a      	mov	sl, r3
 800658a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800658e:	d807      	bhi.n	80065a0 <_printf_i+0x28>
 8006590:	2f62      	cmp	r7, #98	@ 0x62
 8006592:	d80a      	bhi.n	80065aa <_printf_i+0x32>
 8006594:	2f00      	cmp	r7, #0
 8006596:	f000 80d1 	beq.w	800673c <_printf_i+0x1c4>
 800659a:	2f58      	cmp	r7, #88	@ 0x58
 800659c:	f000 80b8 	beq.w	8006710 <_printf_i+0x198>
 80065a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065a8:	e03a      	b.n	8006620 <_printf_i+0xa8>
 80065aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065ae:	2b15      	cmp	r3, #21
 80065b0:	d8f6      	bhi.n	80065a0 <_printf_i+0x28>
 80065b2:	a101      	add	r1, pc, #4	@ (adr r1, 80065b8 <_printf_i+0x40>)
 80065b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065b8:	08006611 	.word	0x08006611
 80065bc:	08006625 	.word	0x08006625
 80065c0:	080065a1 	.word	0x080065a1
 80065c4:	080065a1 	.word	0x080065a1
 80065c8:	080065a1 	.word	0x080065a1
 80065cc:	080065a1 	.word	0x080065a1
 80065d0:	08006625 	.word	0x08006625
 80065d4:	080065a1 	.word	0x080065a1
 80065d8:	080065a1 	.word	0x080065a1
 80065dc:	080065a1 	.word	0x080065a1
 80065e0:	080065a1 	.word	0x080065a1
 80065e4:	08006723 	.word	0x08006723
 80065e8:	0800664f 	.word	0x0800664f
 80065ec:	080066dd 	.word	0x080066dd
 80065f0:	080065a1 	.word	0x080065a1
 80065f4:	080065a1 	.word	0x080065a1
 80065f8:	08006745 	.word	0x08006745
 80065fc:	080065a1 	.word	0x080065a1
 8006600:	0800664f 	.word	0x0800664f
 8006604:	080065a1 	.word	0x080065a1
 8006608:	080065a1 	.word	0x080065a1
 800660c:	080066e5 	.word	0x080066e5
 8006610:	6833      	ldr	r3, [r6, #0]
 8006612:	1d1a      	adds	r2, r3, #4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6032      	str	r2, [r6, #0]
 8006618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800661c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006620:	2301      	movs	r3, #1
 8006622:	e09c      	b.n	800675e <_printf_i+0x1e6>
 8006624:	6833      	ldr	r3, [r6, #0]
 8006626:	6820      	ldr	r0, [r4, #0]
 8006628:	1d19      	adds	r1, r3, #4
 800662a:	6031      	str	r1, [r6, #0]
 800662c:	0606      	lsls	r6, r0, #24
 800662e:	d501      	bpl.n	8006634 <_printf_i+0xbc>
 8006630:	681d      	ldr	r5, [r3, #0]
 8006632:	e003      	b.n	800663c <_printf_i+0xc4>
 8006634:	0645      	lsls	r5, r0, #25
 8006636:	d5fb      	bpl.n	8006630 <_printf_i+0xb8>
 8006638:	f9b3 5000 	ldrsh.w	r5, [r3]
 800663c:	2d00      	cmp	r5, #0
 800663e:	da03      	bge.n	8006648 <_printf_i+0xd0>
 8006640:	232d      	movs	r3, #45	@ 0x2d
 8006642:	426d      	negs	r5, r5
 8006644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006648:	4858      	ldr	r0, [pc, #352]	@ (80067ac <_printf_i+0x234>)
 800664a:	230a      	movs	r3, #10
 800664c:	e011      	b.n	8006672 <_printf_i+0xfa>
 800664e:	6821      	ldr	r1, [r4, #0]
 8006650:	6833      	ldr	r3, [r6, #0]
 8006652:	0608      	lsls	r0, r1, #24
 8006654:	f853 5b04 	ldr.w	r5, [r3], #4
 8006658:	d402      	bmi.n	8006660 <_printf_i+0xe8>
 800665a:	0649      	lsls	r1, r1, #25
 800665c:	bf48      	it	mi
 800665e:	b2ad      	uxthmi	r5, r5
 8006660:	2f6f      	cmp	r7, #111	@ 0x6f
 8006662:	4852      	ldr	r0, [pc, #328]	@ (80067ac <_printf_i+0x234>)
 8006664:	6033      	str	r3, [r6, #0]
 8006666:	bf14      	ite	ne
 8006668:	230a      	movne	r3, #10
 800666a:	2308      	moveq	r3, #8
 800666c:	2100      	movs	r1, #0
 800666e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006672:	6866      	ldr	r6, [r4, #4]
 8006674:	60a6      	str	r6, [r4, #8]
 8006676:	2e00      	cmp	r6, #0
 8006678:	db05      	blt.n	8006686 <_printf_i+0x10e>
 800667a:	6821      	ldr	r1, [r4, #0]
 800667c:	432e      	orrs	r6, r5
 800667e:	f021 0104 	bic.w	r1, r1, #4
 8006682:	6021      	str	r1, [r4, #0]
 8006684:	d04b      	beq.n	800671e <_printf_i+0x1a6>
 8006686:	4616      	mov	r6, r2
 8006688:	fbb5 f1f3 	udiv	r1, r5, r3
 800668c:	fb03 5711 	mls	r7, r3, r1, r5
 8006690:	5dc7      	ldrb	r7, [r0, r7]
 8006692:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006696:	462f      	mov	r7, r5
 8006698:	42bb      	cmp	r3, r7
 800669a:	460d      	mov	r5, r1
 800669c:	d9f4      	bls.n	8006688 <_printf_i+0x110>
 800669e:	2b08      	cmp	r3, #8
 80066a0:	d10b      	bne.n	80066ba <_printf_i+0x142>
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	07df      	lsls	r7, r3, #31
 80066a6:	d508      	bpl.n	80066ba <_printf_i+0x142>
 80066a8:	6923      	ldr	r3, [r4, #16]
 80066aa:	6861      	ldr	r1, [r4, #4]
 80066ac:	4299      	cmp	r1, r3
 80066ae:	bfde      	ittt	le
 80066b0:	2330      	movle	r3, #48	@ 0x30
 80066b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066b6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80066ba:	1b92      	subs	r2, r2, r6
 80066bc:	6122      	str	r2, [r4, #16]
 80066be:	f8cd a000 	str.w	sl, [sp]
 80066c2:	464b      	mov	r3, r9
 80066c4:	aa03      	add	r2, sp, #12
 80066c6:	4621      	mov	r1, r4
 80066c8:	4640      	mov	r0, r8
 80066ca:	f7ff fee7 	bl	800649c <_printf_common>
 80066ce:	3001      	adds	r0, #1
 80066d0:	d14a      	bne.n	8006768 <_printf_i+0x1f0>
 80066d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066d6:	b004      	add	sp, #16
 80066d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	f043 0320 	orr.w	r3, r3, #32
 80066e2:	6023      	str	r3, [r4, #0]
 80066e4:	4832      	ldr	r0, [pc, #200]	@ (80067b0 <_printf_i+0x238>)
 80066e6:	2778      	movs	r7, #120	@ 0x78
 80066e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	6831      	ldr	r1, [r6, #0]
 80066f0:	061f      	lsls	r7, r3, #24
 80066f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80066f6:	d402      	bmi.n	80066fe <_printf_i+0x186>
 80066f8:	065f      	lsls	r7, r3, #25
 80066fa:	bf48      	it	mi
 80066fc:	b2ad      	uxthmi	r5, r5
 80066fe:	6031      	str	r1, [r6, #0]
 8006700:	07d9      	lsls	r1, r3, #31
 8006702:	bf44      	itt	mi
 8006704:	f043 0320 	orrmi.w	r3, r3, #32
 8006708:	6023      	strmi	r3, [r4, #0]
 800670a:	b11d      	cbz	r5, 8006714 <_printf_i+0x19c>
 800670c:	2310      	movs	r3, #16
 800670e:	e7ad      	b.n	800666c <_printf_i+0xf4>
 8006710:	4826      	ldr	r0, [pc, #152]	@ (80067ac <_printf_i+0x234>)
 8006712:	e7e9      	b.n	80066e8 <_printf_i+0x170>
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	f023 0320 	bic.w	r3, r3, #32
 800671a:	6023      	str	r3, [r4, #0]
 800671c:	e7f6      	b.n	800670c <_printf_i+0x194>
 800671e:	4616      	mov	r6, r2
 8006720:	e7bd      	b.n	800669e <_printf_i+0x126>
 8006722:	6833      	ldr	r3, [r6, #0]
 8006724:	6825      	ldr	r5, [r4, #0]
 8006726:	6961      	ldr	r1, [r4, #20]
 8006728:	1d18      	adds	r0, r3, #4
 800672a:	6030      	str	r0, [r6, #0]
 800672c:	062e      	lsls	r6, r5, #24
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	d501      	bpl.n	8006736 <_printf_i+0x1be>
 8006732:	6019      	str	r1, [r3, #0]
 8006734:	e002      	b.n	800673c <_printf_i+0x1c4>
 8006736:	0668      	lsls	r0, r5, #25
 8006738:	d5fb      	bpl.n	8006732 <_printf_i+0x1ba>
 800673a:	8019      	strh	r1, [r3, #0]
 800673c:	2300      	movs	r3, #0
 800673e:	6123      	str	r3, [r4, #16]
 8006740:	4616      	mov	r6, r2
 8006742:	e7bc      	b.n	80066be <_printf_i+0x146>
 8006744:	6833      	ldr	r3, [r6, #0]
 8006746:	1d1a      	adds	r2, r3, #4
 8006748:	6032      	str	r2, [r6, #0]
 800674a:	681e      	ldr	r6, [r3, #0]
 800674c:	6862      	ldr	r2, [r4, #4]
 800674e:	2100      	movs	r1, #0
 8006750:	4630      	mov	r0, r6
 8006752:	f7f9 fd6d 	bl	8000230 <memchr>
 8006756:	b108      	cbz	r0, 800675c <_printf_i+0x1e4>
 8006758:	1b80      	subs	r0, r0, r6
 800675a:	6060      	str	r0, [r4, #4]
 800675c:	6863      	ldr	r3, [r4, #4]
 800675e:	6123      	str	r3, [r4, #16]
 8006760:	2300      	movs	r3, #0
 8006762:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006766:	e7aa      	b.n	80066be <_printf_i+0x146>
 8006768:	6923      	ldr	r3, [r4, #16]
 800676a:	4632      	mov	r2, r6
 800676c:	4649      	mov	r1, r9
 800676e:	4640      	mov	r0, r8
 8006770:	47d0      	blx	sl
 8006772:	3001      	adds	r0, #1
 8006774:	d0ad      	beq.n	80066d2 <_printf_i+0x15a>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	079b      	lsls	r3, r3, #30
 800677a:	d413      	bmi.n	80067a4 <_printf_i+0x22c>
 800677c:	68e0      	ldr	r0, [r4, #12]
 800677e:	9b03      	ldr	r3, [sp, #12]
 8006780:	4298      	cmp	r0, r3
 8006782:	bfb8      	it	lt
 8006784:	4618      	movlt	r0, r3
 8006786:	e7a6      	b.n	80066d6 <_printf_i+0x15e>
 8006788:	2301      	movs	r3, #1
 800678a:	4632      	mov	r2, r6
 800678c:	4649      	mov	r1, r9
 800678e:	4640      	mov	r0, r8
 8006790:	47d0      	blx	sl
 8006792:	3001      	adds	r0, #1
 8006794:	d09d      	beq.n	80066d2 <_printf_i+0x15a>
 8006796:	3501      	adds	r5, #1
 8006798:	68e3      	ldr	r3, [r4, #12]
 800679a:	9903      	ldr	r1, [sp, #12]
 800679c:	1a5b      	subs	r3, r3, r1
 800679e:	42ab      	cmp	r3, r5
 80067a0:	dcf2      	bgt.n	8006788 <_printf_i+0x210>
 80067a2:	e7eb      	b.n	800677c <_printf_i+0x204>
 80067a4:	2500      	movs	r5, #0
 80067a6:	f104 0619 	add.w	r6, r4, #25
 80067aa:	e7f5      	b.n	8006798 <_printf_i+0x220>
 80067ac:	08006f06 	.word	0x08006f06
 80067b0:	08006f17 	.word	0x08006f17

080067b4 <__malloc_lock>:
 80067b4:	4801      	ldr	r0, [pc, #4]	@ (80067bc <__malloc_lock+0x8>)
 80067b6:	f7ff bc5f 	b.w	8006078 <__retarget_lock_acquire_recursive>
 80067ba:	bf00      	nop
 80067bc:	2000045c 	.word	0x2000045c

080067c0 <__malloc_unlock>:
 80067c0:	4801      	ldr	r0, [pc, #4]	@ (80067c8 <__malloc_unlock+0x8>)
 80067c2:	f7ff bc5a 	b.w	800607a <__retarget_lock_release_recursive>
 80067c6:	bf00      	nop
 80067c8:	2000045c 	.word	0x2000045c

080067cc <_realloc_r>:
 80067cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d0:	4607      	mov	r7, r0
 80067d2:	4614      	mov	r4, r2
 80067d4:	460d      	mov	r5, r1
 80067d6:	b921      	cbnz	r1, 80067e2 <_realloc_r+0x16>
 80067d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067dc:	4611      	mov	r1, r2
 80067de:	f7ff bddd 	b.w	800639c <_malloc_r>
 80067e2:	b92a      	cbnz	r2, 80067f0 <_realloc_r+0x24>
 80067e4:	f000 f84a 	bl	800687c <_free_r>
 80067e8:	4625      	mov	r5, r4
 80067ea:	4628      	mov	r0, r5
 80067ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f0:	f000 f88e 	bl	8006910 <_malloc_usable_size_r>
 80067f4:	4284      	cmp	r4, r0
 80067f6:	4606      	mov	r6, r0
 80067f8:	d802      	bhi.n	8006800 <_realloc_r+0x34>
 80067fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067fe:	d8f4      	bhi.n	80067ea <_realloc_r+0x1e>
 8006800:	4621      	mov	r1, r4
 8006802:	4638      	mov	r0, r7
 8006804:	f7ff fdca 	bl	800639c <_malloc_r>
 8006808:	4680      	mov	r8, r0
 800680a:	b908      	cbnz	r0, 8006810 <_realloc_r+0x44>
 800680c:	4645      	mov	r5, r8
 800680e:	e7ec      	b.n	80067ea <_realloc_r+0x1e>
 8006810:	42b4      	cmp	r4, r6
 8006812:	4622      	mov	r2, r4
 8006814:	4629      	mov	r1, r5
 8006816:	bf28      	it	cs
 8006818:	4632      	movcs	r2, r6
 800681a:	f7ff fc37 	bl	800608c <memcpy>
 800681e:	4629      	mov	r1, r5
 8006820:	4638      	mov	r0, r7
 8006822:	f000 f82b 	bl	800687c <_free_r>
 8006826:	e7f1      	b.n	800680c <_realloc_r+0x40>

08006828 <memmove>:
 8006828:	4288      	cmp	r0, r1
 800682a:	b510      	push	{r4, lr}
 800682c:	eb01 0402 	add.w	r4, r1, r2
 8006830:	d902      	bls.n	8006838 <memmove+0x10>
 8006832:	4284      	cmp	r4, r0
 8006834:	4623      	mov	r3, r4
 8006836:	d807      	bhi.n	8006848 <memmove+0x20>
 8006838:	1e43      	subs	r3, r0, #1
 800683a:	42a1      	cmp	r1, r4
 800683c:	d008      	beq.n	8006850 <memmove+0x28>
 800683e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006842:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006846:	e7f8      	b.n	800683a <memmove+0x12>
 8006848:	4402      	add	r2, r0
 800684a:	4601      	mov	r1, r0
 800684c:	428a      	cmp	r2, r1
 800684e:	d100      	bne.n	8006852 <memmove+0x2a>
 8006850:	bd10      	pop	{r4, pc}
 8006852:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006856:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800685a:	e7f7      	b.n	800684c <memmove+0x24>

0800685c <_sbrk_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	4d06      	ldr	r5, [pc, #24]	@ (8006878 <_sbrk_r+0x1c>)
 8006860:	2300      	movs	r3, #0
 8006862:	4604      	mov	r4, r0
 8006864:	4608      	mov	r0, r1
 8006866:	602b      	str	r3, [r5, #0]
 8006868:	f7fa fd68 	bl	800133c <_sbrk>
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	d102      	bne.n	8006876 <_sbrk_r+0x1a>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	b103      	cbz	r3, 8006876 <_sbrk_r+0x1a>
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	bd38      	pop	{r3, r4, r5, pc}
 8006878:	20000468 	.word	0x20000468

0800687c <_free_r>:
 800687c:	b538      	push	{r3, r4, r5, lr}
 800687e:	4605      	mov	r5, r0
 8006880:	2900      	cmp	r1, #0
 8006882:	d041      	beq.n	8006908 <_free_r+0x8c>
 8006884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006888:	1f0c      	subs	r4, r1, #4
 800688a:	2b00      	cmp	r3, #0
 800688c:	bfb8      	it	lt
 800688e:	18e4      	addlt	r4, r4, r3
 8006890:	f7ff ff90 	bl	80067b4 <__malloc_lock>
 8006894:	4a1d      	ldr	r2, [pc, #116]	@ (800690c <_free_r+0x90>)
 8006896:	6813      	ldr	r3, [r2, #0]
 8006898:	b933      	cbnz	r3, 80068a8 <_free_r+0x2c>
 800689a:	6063      	str	r3, [r4, #4]
 800689c:	6014      	str	r4, [r2, #0]
 800689e:	4628      	mov	r0, r5
 80068a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068a4:	f7ff bf8c 	b.w	80067c0 <__malloc_unlock>
 80068a8:	42a3      	cmp	r3, r4
 80068aa:	d908      	bls.n	80068be <_free_r+0x42>
 80068ac:	6820      	ldr	r0, [r4, #0]
 80068ae:	1821      	adds	r1, r4, r0
 80068b0:	428b      	cmp	r3, r1
 80068b2:	bf01      	itttt	eq
 80068b4:	6819      	ldreq	r1, [r3, #0]
 80068b6:	685b      	ldreq	r3, [r3, #4]
 80068b8:	1809      	addeq	r1, r1, r0
 80068ba:	6021      	streq	r1, [r4, #0]
 80068bc:	e7ed      	b.n	800689a <_free_r+0x1e>
 80068be:	461a      	mov	r2, r3
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	b10b      	cbz	r3, 80068c8 <_free_r+0x4c>
 80068c4:	42a3      	cmp	r3, r4
 80068c6:	d9fa      	bls.n	80068be <_free_r+0x42>
 80068c8:	6811      	ldr	r1, [r2, #0]
 80068ca:	1850      	adds	r0, r2, r1
 80068cc:	42a0      	cmp	r0, r4
 80068ce:	d10b      	bne.n	80068e8 <_free_r+0x6c>
 80068d0:	6820      	ldr	r0, [r4, #0]
 80068d2:	4401      	add	r1, r0
 80068d4:	1850      	adds	r0, r2, r1
 80068d6:	4283      	cmp	r3, r0
 80068d8:	6011      	str	r1, [r2, #0]
 80068da:	d1e0      	bne.n	800689e <_free_r+0x22>
 80068dc:	6818      	ldr	r0, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	6053      	str	r3, [r2, #4]
 80068e2:	4408      	add	r0, r1
 80068e4:	6010      	str	r0, [r2, #0]
 80068e6:	e7da      	b.n	800689e <_free_r+0x22>
 80068e8:	d902      	bls.n	80068f0 <_free_r+0x74>
 80068ea:	230c      	movs	r3, #12
 80068ec:	602b      	str	r3, [r5, #0]
 80068ee:	e7d6      	b.n	800689e <_free_r+0x22>
 80068f0:	6820      	ldr	r0, [r4, #0]
 80068f2:	1821      	adds	r1, r4, r0
 80068f4:	428b      	cmp	r3, r1
 80068f6:	bf04      	itt	eq
 80068f8:	6819      	ldreq	r1, [r3, #0]
 80068fa:	685b      	ldreq	r3, [r3, #4]
 80068fc:	6063      	str	r3, [r4, #4]
 80068fe:	bf04      	itt	eq
 8006900:	1809      	addeq	r1, r1, r0
 8006902:	6021      	streq	r1, [r4, #0]
 8006904:	6054      	str	r4, [r2, #4]
 8006906:	e7ca      	b.n	800689e <_free_r+0x22>
 8006908:	bd38      	pop	{r3, r4, r5, pc}
 800690a:	bf00      	nop
 800690c:	20000464 	.word	0x20000464

08006910 <_malloc_usable_size_r>:
 8006910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006914:	1f18      	subs	r0, r3, #4
 8006916:	2b00      	cmp	r3, #0
 8006918:	bfbc      	itt	lt
 800691a:	580b      	ldrlt	r3, [r1, r0]
 800691c:	18c0      	addlt	r0, r0, r3
 800691e:	4770      	bx	lr

08006920 <_init>:
 8006920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006922:	bf00      	nop
 8006924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006926:	bc08      	pop	{r3}
 8006928:	469e      	mov	lr, r3
 800692a:	4770      	bx	lr

0800692c <_fini>:
 800692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692e:	bf00      	nop
 8006930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006932:	bc08      	pop	{r3}
 8006934:	469e      	mov	lr, r3
 8006936:	4770      	bx	lr
