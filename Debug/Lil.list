
Lil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005878  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08005a38  08005a38  00006a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bb8  08005bb8  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bb8  08005bb8  00006bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bc0  08005bc0  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc0  08005bc0  00006bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bc4  08005bc4  00006bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005bc8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  2000005c  08005c24  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08005c24  0000744c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd92  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec8  00000000  00000000  00014e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00016ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000082f  00000000  00000000  00017790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000299cb  00000000  00000000  00017fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d184  00000000  00000000  0004198a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff31d  00000000  00000000  0004eb0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014de2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ffc  00000000  00000000  0014de70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00150e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005a20 	.word	0x08005a20

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	08005a20 	.word	0x08005a20

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <HAL_UART_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Callback function for UART transmission complete
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == LPUART1) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a05      	ldr	r2, [pc, #20]	@ (8000600 <HAL_UART_TxCpltCallback+0x24>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d102      	bne.n	80005f4 <HAL_UART_TxCpltCallback+0x18>
    transmissionComplete = true;
 80005ee:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <HAL_UART_TxCpltCallback+0x28>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	701a      	strb	r2, [r3, #0]
  }
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	40008000 	.word	0x40008000
 8000604:	200001c8 	.word	0x200001c8

08000608 <generaceStringuStoZnaku>:

// Funkce pro generaci stringu o 100 znaku
void generaceStringuStoZnaku(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b096      	sub	sp, #88	@ 0x58
 800060c:	af00      	add	r7, sp, #0
  const char charset[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()";
 800060e:	4a15      	ldr	r2, [pc, #84]	@ (8000664 <generaceStringuStoZnaku+0x5c>)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	4611      	mov	r1, r2
 8000614:	2249      	movs	r2, #73	@ 0x49
 8000616:	4618      	mov	r0, r3
 8000618:	f004 fdb8 	bl	800518c <memcpy>
  const int charsetSize = strlen(charset);
 800061c:	2348      	movs	r3, #72	@ 0x48
 800061e:	653b      	str	r3, [r7, #80]	@ 0x50

  for (int i = 0; i < 100; i++) {
 8000620:	2300      	movs	r3, #0
 8000622:	657b      	str	r3, [r7, #84]	@ 0x54
 8000624:	e013      	b.n	800064e <generaceStringuStoZnaku+0x46>
    testString[i] = charset[i % charsetSize];
 8000626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000628:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800062a:	fb93 f2f2 	sdiv	r2, r3, r2
 800062e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000630:	fb01 f202 	mul.w	r2, r1, r2
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	3358      	adds	r3, #88	@ 0x58
 8000638:	443b      	add	r3, r7
 800063a:	f813 1c54 	ldrb.w	r1, [r3, #-84]
 800063e:	4a0a      	ldr	r2, [pc, #40]	@ (8000668 <generaceStringuStoZnaku+0x60>)
 8000640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000642:	4413      	add	r3, r2
 8000644:	460a      	mov	r2, r1
 8000646:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 100; i++) {
 8000648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800064a:	3301      	adds	r3, #1
 800064c:	657b      	str	r3, [r7, #84]	@ 0x54
 800064e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000650:	2b63      	cmp	r3, #99	@ 0x63
 8000652:	dde8      	ble.n	8000626 <generaceStringuStoZnaku+0x1e>
  }
  testString[100] = '\0'; // Null terminate
 8000654:	4b04      	ldr	r3, [pc, #16]	@ (8000668 <generaceStringuStoZnaku+0x60>)
 8000656:	2200      	movs	r2, #0
 8000658:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

}
 800065c:	bf00      	nop
 800065e:	3758      	adds	r7, #88	@ 0x58
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	08005a38 	.word	0x08005a38
 8000668:	200001cc 	.word	0x200001cc

0800066c <spustTest>:

// Spusteni prenosoveho testu v specifickem modu
// mody: 0 = Polling, 1 = Interrupt, 2 = DMA
void spustTest(int mode)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	@ 0x28
 8000670:	af02      	add	r7, sp, #8
 8000672:	6078      	str	r0, [r7, #4]
  uint32_t startTime, endTime, duration;
  uint32_t blinkCount = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  const char* modeStr;

  // Set mode string
  switch (mode) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b02      	cmp	r3, #2
 800067c:	d00f      	beq.n	800069e <spustTest+0x32>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b02      	cmp	r3, #2
 8000682:	dc0f      	bgt.n	80006a4 <spustTest+0x38>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d003      	beq.n	8000692 <spustTest+0x26>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d003      	beq.n	8000698 <spustTest+0x2c>
 8000690:	e008      	b.n	80006a4 <spustTest+0x38>
    case 0: modeStr = "Polling"; break;
 8000692:	4b35      	ldr	r3, [pc, #212]	@ (8000768 <spustTest+0xfc>)
 8000694:	61bb      	str	r3, [r7, #24]
 8000696:	e007      	b.n	80006a8 <spustTest+0x3c>
    case 1: modeStr = "Interrupt"; break;
 8000698:	4b34      	ldr	r3, [pc, #208]	@ (800076c <spustTest+0x100>)
 800069a:	61bb      	str	r3, [r7, #24]
 800069c:	e004      	b.n	80006a8 <spustTest+0x3c>
    case 2: modeStr = "DMA"; break;
 800069e:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <spustTest+0x104>)
 80006a0:	61bb      	str	r3, [r7, #24]
 80006a2:	e001      	b.n	80006a8 <spustTest+0x3c>
    default: modeStr = "jak ses sem dostal?";
 80006a4:	4b33      	ldr	r3, [pc, #204]	@ (8000774 <spustTest+0x108>)
 80006a6:	61bb      	str	r3, [r7, #24]
  }

  // reset flag
  transmissionComplete = false;
 80006a8:	4b33      	ldr	r3, [pc, #204]	@ (8000778 <spustTest+0x10c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]

  // pocatek prenosu
  startTime = HAL_GetTick();
 80006ae:	f000 fbcf 	bl	8000e50 <HAL_GetTick>
 80006b2:	6178      	str	r0, [r7, #20]

  switch (mode) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d01a      	beq.n	80006f0 <spustTest+0x84>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	dc26      	bgt.n	800070e <spustTest+0xa2>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d003      	beq.n	80006ce <spustTest+0x62>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d00b      	beq.n	80006e4 <spustTest+0x78>
 80006cc:	e016      	b.n	80006fc <spustTest+0x90>
    case 0: // Polling
      HAL_UART_Transmit(&hlpuart1, (uint8_t*)testString, 100, 1000);
 80006ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d2:	2264      	movs	r2, #100	@ 0x64
 80006d4:	4929      	ldr	r1, [pc, #164]	@ (800077c <spustTest+0x110>)
 80006d6:	482a      	ldr	r0, [pc, #168]	@ (8000780 <spustTest+0x114>)
 80006d8:	f002 ff02 	bl	80034e0 <HAL_UART_Transmit>
      transmissionComplete = true; // nastaveno manualne, protoze se nezavola callback
 80006dc:	4b26      	ldr	r3, [pc, #152]	@ (8000778 <spustTest+0x10c>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
      break;
 80006e2:	e00b      	b.n	80006fc <spustTest+0x90>
    case 1: // Interrupt
      HAL_UART_Transmit_IT(&hlpuart1, (uint8_t*)testString, 100);
 80006e4:	2264      	movs	r2, #100	@ 0x64
 80006e6:	4925      	ldr	r1, [pc, #148]	@ (800077c <spustTest+0x110>)
 80006e8:	4825      	ldr	r0, [pc, #148]	@ (8000780 <spustTest+0x114>)
 80006ea:	f002 ff8f 	bl	800360c <HAL_UART_Transmit_IT>
      break;
 80006ee:	e005      	b.n	80006fc <spustTest+0x90>
    case 2: // DMA
      HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t*)testString, 100);
 80006f0:	2264      	movs	r2, #100	@ 0x64
 80006f2:	4922      	ldr	r1, [pc, #136]	@ (800077c <spustTest+0x110>)
 80006f4:	4822      	ldr	r0, [pc, #136]	@ (8000780 <spustTest+0x114>)
 80006f6:	f003 f831 	bl	800375c <HAL_UART_Transmit_DMA>
      break;
 80006fa:	bf00      	nop
  }

  // blikani led fast a spocteni bliku
  while (!transmissionComplete) {
 80006fc:	e007      	b.n	800070e <spustTest+0xa2>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000702:	4820      	ldr	r0, [pc, #128]	@ (8000784 <spustTest+0x118>)
 8000704:	f001 f9be 	bl	8001a84 <HAL_GPIO_TogglePin>
    blinkCount++;
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	3301      	adds	r3, #1
 800070c:	61fb      	str	r3, [r7, #28]
  while (!transmissionComplete) {
 800070e:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <spustTest+0x10c>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	f083 0301 	eor.w	r3, r3, #1
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1ef      	bne.n	80006fe <spustTest+0x92>
  }

  // zaznam konce
  endTime = HAL_GetTick();
 800071e:	f000 fb97 	bl	8000e50 <HAL_GetTick>
 8000722:	6138      	str	r0, [r7, #16]
  duration = endTime - startTime;
 8000724:	693a      	ldr	r2, [r7, #16]
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	60fb      	str	r3, [r7, #12]

  // krasne formatovani vysledku:)
  sprintf(outputBuffer,
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	69ba      	ldr	r2, [r7, #24]
 8000738:	4913      	ldr	r1, [pc, #76]	@ (8000788 <spustTest+0x11c>)
 800073a:	4814      	ldr	r0, [pc, #80]	@ (800078c <spustTest+0x120>)
 800073c:	f004 fcd0 	bl	80050e0 <siprintf>
          "\r\nMode: %s\r\nStart time: %lu ms\r\nDuration: %lu ms\r\nBlink count: %lu\r\n",
          modeStr, startTime, duration, blinkCount);

  // Odeslani vysledku
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)outputBuffer, strlen(outputBuffer), 1000);
 8000740:	4812      	ldr	r0, [pc, #72]	@ (800078c <spustTest+0x120>)
 8000742:	f7ff fd5d 	bl	8000200 <strlen>
 8000746:	4603      	mov	r3, r0
 8000748:	b29a      	uxth	r2, r3
 800074a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800074e:	490f      	ldr	r1, [pc, #60]	@ (800078c <spustTest+0x120>)
 8000750:	480b      	ldr	r0, [pc, #44]	@ (8000780 <spustTest+0x114>)
 8000752:	f002 fec5 	bl	80034e0 <HAL_UART_Transmit>

  // delay mezi testiky
  HAL_Delay(500);
 8000756:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800075a:	f000 fb85 	bl	8000e68 <HAL_Delay>
}
 800075e:	bf00      	nop
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	08005a84 	.word	0x08005a84
 800076c:	08005a8c 	.word	0x08005a8c
 8000770:	08005a98 	.word	0x08005a98
 8000774:	08005a9c 	.word	0x08005a9c
 8000778:	200001c8 	.word	0x200001c8
 800077c:	200001cc 	.word	0x200001cc
 8000780:	20000078 	.word	0x20000078
 8000784:	48000400 	.word	0x48000400
 8000788:	08005ab0 	.word	0x08005ab0
 800078c:	20000234 	.word	0x20000234

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000794:	f000 faf3 	bl	8000d7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000798:	f000 f822 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079c:	f000 f8e4 	bl	8000968 <MX_GPIO_Init>
  MX_DMA_Init();
 80007a0:	f000 f8b0 	bl	8000904 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80007a4:	f000 f862 	bl	800086c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // generace 100 znaku
  generaceStringuStoZnaku();
 80007a8:	f7ff ff2e 	bl	8000608 <generaceStringuStoZnaku>

  // Zaslani start zpravy
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"UART Transmission Test\r\n", 24, 100);
 80007ac:	2364      	movs	r3, #100	@ 0x64
 80007ae:	2218      	movs	r2, #24
 80007b0:	4909      	ldr	r1, [pc, #36]	@ (80007d8 <main+0x48>)
 80007b2:	480a      	ldr	r0, [pc, #40]	@ (80007dc <main+0x4c>)
 80007b4:	f002 fe94 	bl	80034e0 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // spusteni testu pro kazdy mod
    spustTest(0); // Polling
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff ff57 	bl	800066c <spustTest>
    spustTest(1); // Interrupt
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff ff54 	bl	800066c <spustTest>
    spustTest(2); // DMA
 80007c4:	2002      	movs	r0, #2
 80007c6:	f7ff ff51 	bl	800066c <spustTest>

    // Chvilku pockej pred dalsim testovanim... chci aby byl vystup trochu citelny
    HAL_Delay(1000);
 80007ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ce:	f000 fb4b 	bl	8000e68 <HAL_Delay>
    spustTest(0); // Polling
 80007d2:	bf00      	nop
 80007d4:	e7f0      	b.n	80007b8 <main+0x28>
 80007d6:	bf00      	nop
 80007d8:	08005af8 	.word	0x08005af8
 80007dc:	20000078 	.word	0x20000078

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b096      	sub	sp, #88	@ 0x58
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2244      	movs	r2, #68	@ 0x44
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f004 fc98 	bl	8005124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000802:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000806:	f001 f977 	bl	8001af8 <HAL_PWREx_ControlVoltageScaling>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000810:	f000 f908 	bl	8000a24 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000814:	2310      	movs	r3, #16
 8000816:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000818:	2301      	movs	r3, #1
 800081a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000820:	2360      	movs	r3, #96	@ 0x60
 8000822:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000824:	2300      	movs	r3, #0
 8000826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4618      	mov	r0, r3
 800082e:	f001 fa17 	bl	8001c60 <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000838:	f000 f8f4 	bl	8000a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f001 fe1d 	bl	8002494 <HAL_RCC_ClockConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000860:	f000 f8e0 	bl	8000a24 <Error_Handler>
  }
}
 8000864:	bf00      	nop
 8000866:	3758      	adds	r7, #88	@ 0x58
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000870:	4b22      	ldr	r3, [pc, #136]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 8000872:	4a23      	ldr	r2, [pc, #140]	@ (8000900 <MX_LPUART1_UART_Init+0x94>)
 8000874:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000876:	4b21      	ldr	r3, [pc, #132]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b1f      	ldr	r3, [pc, #124]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b1d      	ldr	r3, [pc, #116]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800088a:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089c:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a2:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008ae:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008b4:	4811      	ldr	r0, [pc, #68]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 80008b6:	f002 fdc3 	bl	8003440 <HAL_UART_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80008c0:	f000 f8b0 	bl	8000a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c4:	2100      	movs	r1, #0
 80008c6:	480d      	ldr	r0, [pc, #52]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 80008c8:	f004 fb3f 	bl	8004f4a <HAL_UARTEx_SetTxFifoThreshold>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008d2:	f000 f8a7 	bl	8000a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4808      	ldr	r0, [pc, #32]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 80008da:	f004 fb74 	bl	8004fc6 <HAL_UARTEx_SetRxFifoThreshold>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008e4:	f000 f89e 	bl	8000a24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <MX_LPUART1_UART_Init+0x90>)
 80008ea:	f004 faf5 	bl	8004ed8 <HAL_UARTEx_DisableFifoMode>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008f4:	f000 f896 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000078 	.word	0x20000078
 8000900:	40008000 	.word	0x40008000

08000904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800090a:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <MX_DMA_Init+0x60>)
 800090c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800090e:	4a15      	ldr	r2, [pc, #84]	@ (8000964 <MX_DMA_Init+0x60>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6493      	str	r3, [r2, #72]	@ 0x48
 8000916:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <MX_DMA_Init+0x60>)
 8000918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000922:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <MX_DMA_Init+0x60>)
 8000924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000926:	4a0f      	ldr	r2, [pc, #60]	@ (8000964 <MX_DMA_Init+0x60>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6493      	str	r3, [r2, #72]	@ 0x48
 800092e:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <MX_DMA_Init+0x60>)
 8000930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	200b      	movs	r0, #11
 8000940:	f000 fb91 	bl	8001066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000944:	200b      	movs	r0, #11
 8000946:	f000 fbaa 	bl	800109e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	200c      	movs	r0, #12
 8000950:	f000 fb89 	bl	8001066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000954:	200c      	movs	r0, #12
 8000956:	f000 fba2 	bl	800109e <HAL_NVIC_EnableIRQ>

}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <MX_GPIO_Init+0xb0>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	4a25      	ldr	r2, [pc, #148]	@ (8000a18 <MX_GPIO_Init+0xb0>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098a:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <MX_GPIO_Init+0xb0>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	4b20      	ldr	r3, [pc, #128]	@ (8000a18 <MX_GPIO_Init+0xb0>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	4a1f      	ldr	r2, [pc, #124]	@ (8000a18 <MX_GPIO_Init+0xb0>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a18 <MX_GPIO_Init+0xb0>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <MX_GPIO_Init+0xb0>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	4a19      	ldr	r2, [pc, #100]	@ (8000a18 <MX_GPIO_Init+0xb0>)
 80009b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ba:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <MX_GPIO_Init+0xb0>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80009c6:	f001 f93b 	bl	8001c40 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80009d0:	4812      	ldr	r0, [pc, #72]	@ (8000a1c <MX_GPIO_Init+0xb4>)
 80009d2:	f001 f83f 	bl	8001a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	4619      	mov	r1, r3
 80009ec:	480c      	ldr	r0, [pc, #48]	@ (8000a20 <MX_GPIO_Init+0xb8>)
 80009ee:	f000 fe9f 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80009f2:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80009f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4804      	ldr	r0, [pc, #16]	@ (8000a1c <MX_GPIO_Init+0xb4>)
 8000a0c:	f000 fe90 	bl	8001730 <HAL_GPIO_Init>

}
 8000a10:	bf00      	nop
 8000a12:	3720      	adds	r7, #32
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	48000400 	.word	0x48000400
 8000a20:	48000800 	.word	0x48000800

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <Error_Handler+0x8>

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a42:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a52:	4a08      	ldr	r2, [pc, #32]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000

08000a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b0ae      	sub	sp, #184	@ 0xb8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	2294      	movs	r2, #148	@ 0x94
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f004 fb43 	bl	8005124 <memset>
  if(huart->Instance==LPUART1)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a50      	ldr	r2, [pc, #320]	@ (8000be4 <HAL_UART_MspInit+0x16c>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	f040 8098 	bne.w	8000bda <HAL_UART_MspInit+0x162>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000aaa:	2320      	movs	r3, #32
 8000aac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab2:	f107 0310 	add.w	r3, r7, #16
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 ffaa 	bl	8002a10 <HAL_RCCEx_PeriphCLKConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ac2:	f7ff ffaf 	bl	8000a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ac6:	4b48      	ldr	r3, [pc, #288]	@ (8000be8 <HAL_UART_MspInit+0x170>)
 8000ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000aca:	4a47      	ldr	r2, [pc, #284]	@ (8000be8 <HAL_UART_MspInit+0x170>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000ad2:	4b45      	ldr	r3, [pc, #276]	@ (8000be8 <HAL_UART_MspInit+0x170>)
 8000ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ade:	4b42      	ldr	r3, [pc, #264]	@ (8000be8 <HAL_UART_MspInit+0x170>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	4a41      	ldr	r2, [pc, #260]	@ (8000be8 <HAL_UART_MspInit+0x170>)
 8000ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aea:	4b3f      	ldr	r3, [pc, #252]	@ (8000be8 <HAL_UART_MspInit+0x170>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000af6:	f001 f8a3 	bl	8001c40 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000afa:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000afe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b14:	2308      	movs	r3, #8
 8000b16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b1a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4832      	ldr	r0, [pc, #200]	@ (8000bec <HAL_UART_MspInit+0x174>)
 8000b22:	f000 fe05 	bl	8001730 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000b26:	4b32      	ldr	r3, [pc, #200]	@ (8000bf0 <HAL_UART_MspInit+0x178>)
 8000b28:	4a32      	ldr	r2, [pc, #200]	@ (8000bf4 <HAL_UART_MspInit+0x17c>)
 8000b2a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000b2c:	4b30      	ldr	r3, [pc, #192]	@ (8000bf0 <HAL_UART_MspInit+0x178>)
 8000b2e:	2222      	movs	r2, #34	@ 0x22
 8000b30:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b32:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf0 <HAL_UART_MspInit+0x178>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b38:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf0 <HAL_UART_MspInit+0x178>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf0 <HAL_UART_MspInit+0x178>)
 8000b40:	2280      	movs	r2, #128	@ 0x80
 8000b42:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b44:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf0 <HAL_UART_MspInit+0x178>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b4a:	4b29      	ldr	r3, [pc, #164]	@ (8000bf0 <HAL_UART_MspInit+0x178>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000b50:	4b27      	ldr	r3, [pc, #156]	@ (8000bf0 <HAL_UART_MspInit+0x178>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b56:	4b26      	ldr	r3, [pc, #152]	@ (8000bf0 <HAL_UART_MspInit+0x178>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000b5c:	4824      	ldr	r0, [pc, #144]	@ (8000bf0 <HAL_UART_MspInit+0x178>)
 8000b5e:	f000 fab9 	bl	80010d4 <HAL_DMA_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000b68:	f7ff ff5c 	bl	8000a24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a20      	ldr	r2, [pc, #128]	@ (8000bf0 <HAL_UART_MspInit+0x178>)
 8000b70:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000b72:	4a1f      	ldr	r2, [pc, #124]	@ (8000bf0 <HAL_UART_MspInit+0x178>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <HAL_UART_MspInit+0x180>)
 8000b7a:	4a20      	ldr	r2, [pc, #128]	@ (8000bfc <HAL_UART_MspInit+0x184>)
 8000b7c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <HAL_UART_MspInit+0x180>)
 8000b80:	2223      	movs	r2, #35	@ 0x23
 8000b82:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b84:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <HAL_UART_MspInit+0x180>)
 8000b86:	2210      	movs	r2, #16
 8000b88:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <HAL_UART_MspInit+0x180>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b90:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <HAL_UART_MspInit+0x180>)
 8000b92:	2280      	movs	r2, #128	@ 0x80
 8000b94:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b96:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <HAL_UART_MspInit+0x180>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <HAL_UART_MspInit+0x180>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000ba2:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <HAL_UART_MspInit+0x180>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <HAL_UART_MspInit+0x180>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000bae:	4812      	ldr	r0, [pc, #72]	@ (8000bf8 <HAL_UART_MspInit+0x180>)
 8000bb0:	f000 fa90 	bl	80010d4 <HAL_DMA_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_UART_MspInit+0x146>
    {
      Error_Handler();
 8000bba:	f7ff ff33 	bl	8000a24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <HAL_UART_MspInit+0x180>)
 8000bc2:	679a      	str	r2, [r3, #120]	@ 0x78
 8000bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf8 <HAL_UART_MspInit+0x180>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2046      	movs	r0, #70	@ 0x46
 8000bd0:	f000 fa49 	bl	8001066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000bd4:	2046      	movs	r0, #70	@ 0x46
 8000bd6:	f000 fa62 	bl	800109e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	37b8      	adds	r7, #184	@ 0xb8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40008000 	.word	0x40008000
 8000be8:	40021000 	.word	0x40021000
 8000bec:	48001800 	.word	0x48001800
 8000bf0:	20000108 	.word	0x20000108
 8000bf4:	40020008 	.word	0x40020008
 8000bf8:	20000168 	.word	0x20000168
 8000bfc:	4002001c 	.word	0x4002001c

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <NMI_Handler+0x4>

08000c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <MemManage_Handler+0x4>

08000c18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c56:	f000 f8e7 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000c64:	4802      	ldr	r0, [pc, #8]	@ (8000c70 <DMA1_Channel1_IRQHandler+0x10>)
 8000c66:	f000 fc13 	bl	8001490 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000108 	.word	0x20000108

08000c74 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <DMA1_Channel2_IRQHandler+0x10>)
 8000c7a:	f000 fc09 	bl	8001490 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000168 	.word	0x20000168

08000c88 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <LPUART1_IRQHandler+0x10>)
 8000c8e:	f002 fdf7 	bl	8003880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000078 	.word	0x20000078

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	@ (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f004 fa32 	bl	8005134 <__errno>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200a0000 	.word	0x200a0000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	200002fc 	.word	0x200002fc
 8000d04:	20000450 	.word	0x20000450

08000d08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <SystemInit+0x20>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d12:	4a05      	ldr	r2, [pc, #20]	@ (8000d28 <SystemInit+0x20>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d30:	f7ff ffea 	bl	8000d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d34:	480c      	ldr	r0, [pc, #48]	@ (8000d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d36:	490d      	ldr	r1, [pc, #52]	@ (8000d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d38:	4a0d      	ldr	r2, [pc, #52]	@ (8000d70 <LoopForever+0xe>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d78 <LoopForever+0x16>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f004 f9f1 	bl	8005140 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d5e:	f7ff fd17 	bl	8000790 <main>

08000d62 <LoopForever>:

LoopForever:
    b LoopForever
 8000d62:	e7fe      	b.n	8000d62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d64:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d70:	08005bc8 	.word	0x08005bc8
  ldr r2, =_sbss
 8000d74:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d78:	2000044c 	.word	0x2000044c

08000d7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC1_IRQHandler>

08000d7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d84:	2300      	movs	r3, #0
 8000d86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f961 	bl	8001050 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8e:	200f      	movs	r0, #15
 8000d90:	f000 f80e 	bl	8000db0 <HAL_InitTick>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d002      	beq.n	8000da0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	71fb      	strb	r3, [r7, #7]
 8000d9e:	e001      	b.n	8000da4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000da0:	f7ff fe46 	bl	8000a30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da4:	79fb      	ldrb	r3, [r7, #7]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dbc:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <HAL_InitTick+0x6c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d023      	beq.n	8000e0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dc4:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <HAL_InitTick+0x70>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <HAL_InitTick+0x6c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f96d 	bl	80010ba <HAL_SYSTICK_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10f      	bne.n	8000e06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d809      	bhi.n	8000e00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000df4:	f000 f937 	bl	8001066 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <HAL_InitTick+0x74>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e007      	b.n	8000e10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e004      	b.n	8000e10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
 8000e0a:	e001      	b.n	8000e10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	@ (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000300 	.word	0x20000300

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	@ (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000300 	.word	0x20000300

08000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff ffee 	bl	8000e50 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e82:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <HAL_Delay+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e8e:	bf00      	nop
 8000e90:	f7ff ffde 	bl	8000e50 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	@ (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db0b      	blt.n	8000f3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 021f 	and.w	r2, r3, #31
 8000f2c:	4907      	ldr	r1, [pc, #28]	@ (8000f4c <__NVIC_EnableIRQ+0x38>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	2001      	movs	r0, #1
 8000f36:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000e100 	.word	0xe000e100

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	490c      	ldr	r1, [pc, #48]	@ (8000f9c <__NVIC_SetPriority+0x4c>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f78:	e00a      	b.n	8000f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4908      	ldr	r1, [pc, #32]	@ (8000fa0 <__NVIC_SetPriority+0x50>)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	3b04      	subs	r3, #4
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	761a      	strb	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	@ 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	4313      	orrs	r3, r2
         );
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	@ 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800101c:	d301      	bcc.n	8001022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101e:	2301      	movs	r3, #1
 8001020:	e00f      	b.n	8001042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001022:	4a0a      	ldr	r2, [pc, #40]	@ (800104c <SysTick_Config+0x40>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102a:	210f      	movs	r1, #15
 800102c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001030:	f7ff ff8e 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001034:	4b05      	ldr	r3, [pc, #20]	@ (800104c <SysTick_Config+0x40>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103a:	4b04      	ldr	r3, [pc, #16]	@ (800104c <SysTick_Config+0x40>)
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	e000e010 	.word	0xe000e010

08001050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff29 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001078:	f7ff ff3e 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 800107c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f7ff ff8e 	bl	8000fa4 <NVIC_EncodePriority>
 8001088:	4602      	mov	r2, r0
 800108a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff5d 	bl	8000f50 <__NVIC_SetPriority>
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff31 	bl	8000f14 <__NVIC_EnableIRQ>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffa2 	bl	800100c <SysTick_Config>
 80010c8:	4603      	mov	r3, r0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e08d      	b.n	8001202 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b47      	ldr	r3, [pc, #284]	@ (800120c <HAL_DMA_Init+0x138>)
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d80f      	bhi.n	8001112 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b45      	ldr	r3, [pc, #276]	@ (8001210 <HAL_DMA_Init+0x13c>)
 80010fa:	4413      	add	r3, r2
 80010fc:	4a45      	ldr	r2, [pc, #276]	@ (8001214 <HAL_DMA_Init+0x140>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	009a      	lsls	r2, r3, #2
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a42      	ldr	r2, [pc, #264]	@ (8001218 <HAL_DMA_Init+0x144>)
 800110e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001110:	e00e      	b.n	8001130 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	4b40      	ldr	r3, [pc, #256]	@ (800121c <HAL_DMA_Init+0x148>)
 800111a:	4413      	add	r3, r2
 800111c:	4a3d      	ldr	r2, [pc, #244]	@ (8001214 <HAL_DMA_Init+0x140>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	091b      	lsrs	r3, r3, #4
 8001124:	009a      	lsls	r2, r3, #2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a3c      	ldr	r2, [pc, #240]	@ (8001220 <HAL_DMA_Init+0x14c>)
 800112e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2202      	movs	r2, #2
 8001134:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800114a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001154:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001160:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800116c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	4313      	orrs	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 fa72 	bl	800166c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001190:	d102      	bne.n	8001198 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80011ac:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d010      	beq.n	80011d8 <HAL_DMA_Init+0x104>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d80c      	bhi.n	80011d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 fa92 	bl	80016e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	e008      	b.n	80011ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40020407 	.word	0x40020407
 8001210:	bffdfff8 	.word	0xbffdfff8
 8001214:	cccccccd 	.word	0xcccccccd
 8001218:	40020000 	.word	0x40020000
 800121c:	bffdfbf8 	.word	0xbffdfbf8
 8001220:	40020400 	.word	0x40020400

08001224 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800123c:	2b01      	cmp	r3, #1
 800123e:	d101      	bne.n	8001244 <HAL_DMA_Start_IT+0x20>
 8001240:	2302      	movs	r3, #2
 8001242:	e066      	b.n	8001312 <HAL_DMA_Start_IT+0xee>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b01      	cmp	r3, #1
 8001256:	d155      	bne.n	8001304 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2202      	movs	r2, #2
 800125c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2200      	movs	r2, #0
 8001264:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0201 	bic.w	r2, r2, #1
 8001274:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	68b9      	ldr	r1, [r7, #8]
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f000 f9b6 	bl	80015ee <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	2b00      	cmp	r3, #0
 8001288:	d008      	beq.n	800129c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f042 020e 	orr.w	r2, r2, #14
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	e00f      	b.n	80012bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0204 	bic.w	r2, r2, #4
 80012aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 020a 	orr.w	r2, r2, #10
 80012ba:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d007      	beq.n	80012da <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80012d8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80012f0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f042 0201 	orr.w	r2, r2, #1
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	e005      	b.n	8001310 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800130c:	2302      	movs	r3, #2
 800130e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001310:	7dfb      	ldrb	r3, [r7, #23]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800131a:	b480      	push	{r7}
 800131c:	b085      	sub	sp, #20
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d008      	beq.n	8001344 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2204      	movs	r2, #4
 8001336:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e040      	b.n	80013c6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 020e 	bic.w	r2, r2, #14
 8001352:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800135e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001362:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001378:	f003 021c 	and.w	r2, r3, #28
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	2101      	movs	r1, #1
 8001382:	fa01 f202 	lsl.w	r2, r1, r2
 8001386:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001390:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00c      	beq.n	80013b4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80013b2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d005      	beq.n	80013f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2204      	movs	r2, #4
 80013ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	e047      	b.n	8001486 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 020e 	bic.w	r2, r2, #14
 8001404:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0201 	bic.w	r2, r2, #1
 8001414:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001420:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001424:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	f003 021c 	and.w	r2, r3, #28
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	2101      	movs	r1, #1
 8001434:	fa01 f202 	lsl.w	r2, r1, r2
 8001438:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001442:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00c      	beq.n	8001466 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001456:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800145a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001464:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	4798      	blx	r3
    }
  }
  return status;
 8001486:	7bfb      	ldrb	r3, [r7, #15]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ac:	f003 031c 	and.w	r3, r3, #28
 80014b0:	2204      	movs	r2, #4
 80014b2:	409a      	lsls	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4013      	ands	r3, r2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d026      	beq.n	800150a <HAL_DMA_IRQHandler+0x7a>
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d021      	beq.n	800150a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d107      	bne.n	80014e4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0204 	bic.w	r2, r2, #4
 80014e2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e8:	f003 021c 	and.w	r2, r3, #28
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	2104      	movs	r1, #4
 80014f2:	fa01 f202 	lsl.w	r2, r1, r2
 80014f6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d071      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001508:	e06c      	b.n	80015e4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150e:	f003 031c 	and.w	r3, r3, #28
 8001512:	2202      	movs	r2, #2
 8001514:	409a      	lsls	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d02e      	beq.n	800157c <HAL_DMA_IRQHandler+0xec>
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d029      	beq.n	800157c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0320 	and.w	r3, r3, #32
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10b      	bne.n	800154e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 020a 	bic.w	r2, r2, #10
 8001544:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	f003 021c 	and.w	r2, r3, #28
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	2102      	movs	r1, #2
 800155c:	fa01 f202 	lsl.w	r2, r1, r2
 8001560:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if(hdma->XferCpltCallback != NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156e:	2b00      	cmp	r3, #0
 8001570:	d038      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800157a:	e033      	b.n	80015e4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001580:	f003 031c 	and.w	r3, r3, #28
 8001584:	2208      	movs	r2, #8
 8001586:	409a      	lsls	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4013      	ands	r3, r2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d02a      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x156>
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d025      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 020e 	bic.w	r2, r2, #14
 80015a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	f003 021c 	and.w	r2, r3, #28
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f202 	lsl.w	r2, r1, r2
 80015bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d004      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
}
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b085      	sub	sp, #20
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001604:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001616:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161c:	f003 021c 	and.w	r2, r3, #28
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	2101      	movs	r1, #1
 8001626:	fa01 f202 	lsl.w	r2, r1, r2
 800162a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b10      	cmp	r3, #16
 800163a:	d108      	bne.n	800164e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800164c:	e007      	b.n	800165e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	60da      	str	r2, [r3, #12]
}
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800167c:	429a      	cmp	r2, r3
 800167e:	d80a      	bhi.n	8001696 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800168c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6493      	str	r3, [r2, #72]	@ 0x48
 8001694:	e007      	b.n	80016a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	009a      	lsls	r2, r3, #2
 800169e:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80016a0:	4413      	add	r3, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	3b08      	subs	r3, #8
 80016ae:	4a0c      	ldr	r2, [pc, #48]	@ (80016e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80016b0:	fba2 2303 	umull	r2, r3, r2, r3
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80016bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	2201      	movs	r2, #1
 80016c6:	409a      	lsls	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40020407 	.word	0x40020407
 80016dc:	4002081c 	.word	0x4002081c
 80016e0:	cccccccd 	.word	0xcccccccd
 80016e4:	40020880 	.word	0x40020880

080016e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	461a      	mov	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a08      	ldr	r2, [pc, #32]	@ (800172c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800170a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3b01      	subs	r3, #1
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2201      	movs	r2, #1
 8001716:	409a      	lsls	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	1000823f 	.word	0x1000823f
 800172c:	40020940 	.word	0x40020940

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173e:	e166      	b.n	8001a0e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2101      	movs	r1, #1
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	fa01 f303 	lsl.w	r3, r1, r3
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 8158 	beq.w	8001a08 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	2b01      	cmp	r3, #1
 8001762:	d005      	beq.n	8001770 <HAL_GPIO_Init+0x40>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d130      	bne.n	80017d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017a6:	2201      	movs	r2, #1
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	f003 0201 	and.w	r2, r3, #1
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d017      	beq.n	800180e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	2203      	movs	r2, #3
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d123      	bne.n	8001862 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	08da      	lsrs	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3208      	adds	r2, #8
 8001822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	691a      	ldr	r2, [r3, #16]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	08da      	lsrs	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3208      	adds	r2, #8
 800185c:	6939      	ldr	r1, [r7, #16]
 800185e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0203 	and.w	r2, r3, #3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 80b2 	beq.w	8001a08 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a4:	4b61      	ldr	r3, [pc, #388]	@ (8001a2c <HAL_GPIO_Init+0x2fc>)
 80018a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a8:	4a60      	ldr	r2, [pc, #384]	@ (8001a2c <HAL_GPIO_Init+0x2fc>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80018b0:	4b5e      	ldr	r3, [pc, #376]	@ (8001a2c <HAL_GPIO_Init+0x2fc>)
 80018b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018bc:	4a5c      	ldr	r2, [pc, #368]	@ (8001a30 <HAL_GPIO_Init+0x300>)
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	3302      	adds	r3, #2
 80018c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	220f      	movs	r2, #15
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018e6:	d02b      	beq.n	8001940 <HAL_GPIO_Init+0x210>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a52      	ldr	r2, [pc, #328]	@ (8001a34 <HAL_GPIO_Init+0x304>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d025      	beq.n	800193c <HAL_GPIO_Init+0x20c>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a51      	ldr	r2, [pc, #324]	@ (8001a38 <HAL_GPIO_Init+0x308>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d01f      	beq.n	8001938 <HAL_GPIO_Init+0x208>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a50      	ldr	r2, [pc, #320]	@ (8001a3c <HAL_GPIO_Init+0x30c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d019      	beq.n	8001934 <HAL_GPIO_Init+0x204>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a4f      	ldr	r2, [pc, #316]	@ (8001a40 <HAL_GPIO_Init+0x310>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d013      	beq.n	8001930 <HAL_GPIO_Init+0x200>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a4e      	ldr	r2, [pc, #312]	@ (8001a44 <HAL_GPIO_Init+0x314>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d00d      	beq.n	800192c <HAL_GPIO_Init+0x1fc>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a4d      	ldr	r2, [pc, #308]	@ (8001a48 <HAL_GPIO_Init+0x318>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d007      	beq.n	8001928 <HAL_GPIO_Init+0x1f8>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a4c      	ldr	r2, [pc, #304]	@ (8001a4c <HAL_GPIO_Init+0x31c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d101      	bne.n	8001924 <HAL_GPIO_Init+0x1f4>
 8001920:	2307      	movs	r3, #7
 8001922:	e00e      	b.n	8001942 <HAL_GPIO_Init+0x212>
 8001924:	2308      	movs	r3, #8
 8001926:	e00c      	b.n	8001942 <HAL_GPIO_Init+0x212>
 8001928:	2306      	movs	r3, #6
 800192a:	e00a      	b.n	8001942 <HAL_GPIO_Init+0x212>
 800192c:	2305      	movs	r3, #5
 800192e:	e008      	b.n	8001942 <HAL_GPIO_Init+0x212>
 8001930:	2304      	movs	r3, #4
 8001932:	e006      	b.n	8001942 <HAL_GPIO_Init+0x212>
 8001934:	2303      	movs	r3, #3
 8001936:	e004      	b.n	8001942 <HAL_GPIO_Init+0x212>
 8001938:	2302      	movs	r3, #2
 800193a:	e002      	b.n	8001942 <HAL_GPIO_Init+0x212>
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <HAL_GPIO_Init+0x212>
 8001940:	2300      	movs	r3, #0
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	f002 0203 	and.w	r2, r2, #3
 8001948:	0092      	lsls	r2, r2, #2
 800194a:	4093      	lsls	r3, r2
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001952:	4937      	ldr	r1, [pc, #220]	@ (8001a30 <HAL_GPIO_Init+0x300>)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001960:	4b3b      	ldr	r3, [pc, #236]	@ (8001a50 <HAL_GPIO_Init+0x320>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	43db      	mvns	r3, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001984:	4a32      	ldr	r2, [pc, #200]	@ (8001a50 <HAL_GPIO_Init+0x320>)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800198a:	4b31      	ldr	r3, [pc, #196]	@ (8001a50 <HAL_GPIO_Init+0x320>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019ae:	4a28      	ldr	r2, [pc, #160]	@ (8001a50 <HAL_GPIO_Init+0x320>)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019b4:	4b26      	ldr	r3, [pc, #152]	@ (8001a50 <HAL_GPIO_Init+0x320>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a50 <HAL_GPIO_Init+0x320>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019de:	4b1c      	ldr	r3, [pc, #112]	@ (8001a50 <HAL_GPIO_Init+0x320>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a02:	4a13      	ldr	r2, [pc, #76]	@ (8001a50 <HAL_GPIO_Init+0x320>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	fa22 f303 	lsr.w	r3, r2, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f47f ae91 	bne.w	8001740 <HAL_GPIO_Init+0x10>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010000 	.word	0x40010000
 8001a34:	48000400 	.word	0x48000400
 8001a38:	48000800 	.word	0x48000800
 8001a3c:	48000c00 	.word	0x48000c00
 8001a40:	48001000 	.word	0x48001000
 8001a44:	48001400 	.word	0x48001400
 8001a48:	48001800 	.word	0x48001800
 8001a4c:	48001c00 	.word	0x48001c00
 8001a50:	40010400 	.word	0x40010400

08001a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
 8001a60:	4613      	mov	r3, r2
 8001a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a64:	787b      	ldrb	r3, [r7, #1]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a70:	e002      	b.n	8001a78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a72:	887a      	ldrh	r2, [r7, #2]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	041a      	lsls	r2, r3, #16
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	43d9      	mvns	r1, r3
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	400b      	ands	r3, r1
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	619a      	str	r2, [r3, #24]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001abc:	4b0d      	ldr	r3, [pc, #52]	@ (8001af4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ac8:	d102      	bne.n	8001ad0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001aca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ace:	e00b      	b.n	8001ae8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001ad0:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ade:	d102      	bne.n	8001ae6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001ae0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ae4:	e000      	b.n	8001ae8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001ae6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40007000 	.word	0x40007000

08001af8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d141      	bne.n	8001b8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b06:	4b4b      	ldr	r3, [pc, #300]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b12:	d131      	bne.n	8001b78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b14:	4b47      	ldr	r3, [pc, #284]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b1a:	4a46      	ldr	r2, [pc, #280]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b24:	4b43      	ldr	r3, [pc, #268]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b2c:	4a41      	ldr	r2, [pc, #260]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b34:	4b40      	ldr	r3, [pc, #256]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2232      	movs	r2, #50	@ 0x32
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b40:	fba2 2303 	umull	r2, r3, r2, r3
 8001b44:	0c9b      	lsrs	r3, r3, #18
 8001b46:	3301      	adds	r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b4a:	e002      	b.n	8001b52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b52:	4b38      	ldr	r3, [pc, #224]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b5e:	d102      	bne.n	8001b66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f2      	bne.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b66:	4b33      	ldr	r3, [pc, #204]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b72:	d158      	bne.n	8001c26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e057      	b.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b78:	4b2e      	ldr	r3, [pc, #184]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b7e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b88:	e04d      	b.n	8001c26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b90:	d141      	bne.n	8001c16 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b92:	4b28      	ldr	r3, [pc, #160]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b9e:	d131      	bne.n	8001c04 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ba0:	4b24      	ldr	r3, [pc, #144]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ba6:	4a23      	ldr	r2, [pc, #140]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb0:	4b20      	ldr	r3, [pc, #128]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bb8:	4a1e      	ldr	r2, [pc, #120]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2232      	movs	r2, #50	@ 0x32
 8001bc6:	fb02 f303 	mul.w	r3, r2, r3
 8001bca:	4a1c      	ldr	r2, [pc, #112]	@ (8001c3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd0:	0c9b      	lsrs	r3, r3, #18
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd6:	e002      	b.n	8001bde <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bde:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bea:	d102      	bne.n	8001bf2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f2      	bne.n	8001bd8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bf2:	4b10      	ldr	r3, [pc, #64]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bfe:	d112      	bne.n	8001c26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e011      	b.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c04:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c14:	e007      	b.n	8001c26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c16:	4b07      	ldr	r3, [pc, #28]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c1e:	4a05      	ldr	r2, [pc, #20]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c24:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	40007000 	.word	0x40007000
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	431bde83 	.word	0x431bde83

08001c40 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001c44:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	4a04      	ldr	r2, [pc, #16]	@ (8001c5c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001c4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c4e:	6053      	str	r3, [r2, #4]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40007000 	.word	0x40007000

08001c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d102      	bne.n	8001c74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f000 bc08 	b.w	8002484 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c74:	4b96      	ldr	r3, [pc, #600]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c7e:	4b94      	ldr	r3, [pc, #592]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80e4 	beq.w	8001e5e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d007      	beq.n	8001cac <HAL_RCC_OscConfig+0x4c>
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2b0c      	cmp	r3, #12
 8001ca0:	f040 808b 	bne.w	8001dba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	f040 8087 	bne.w	8001dba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cac:	4b88      	ldr	r3, [pc, #544]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x64>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e3df      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1a      	ldr	r2, [r3, #32]
 8001cc8:	4b81      	ldr	r3, [pc, #516]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_RCC_OscConfig+0x7e>
 8001cd4:	4b7e      	ldr	r3, [pc, #504]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cdc:	e005      	b.n	8001cea <HAL_RCC_OscConfig+0x8a>
 8001cde:	4b7c      	ldr	r3, [pc, #496]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d223      	bcs.n	8001d36 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fdcc 	bl	8002890 <RCC_SetFlashLatencyFromMSIRange>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e3c0      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d02:	4b73      	ldr	r3, [pc, #460]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a72      	ldr	r2, [pc, #456]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d08:	f043 0308 	orr.w	r3, r3, #8
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b70      	ldr	r3, [pc, #448]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	496d      	ldr	r1, [pc, #436]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d20:	4b6b      	ldr	r3, [pc, #428]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	4968      	ldr	r1, [pc, #416]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
 8001d34:	e025      	b.n	8001d82 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d36:	4b66      	ldr	r3, [pc, #408]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a65      	ldr	r2, [pc, #404]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b63      	ldr	r3, [pc, #396]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4960      	ldr	r1, [pc, #384]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d54:	4b5e      	ldr	r3, [pc, #376]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	495b      	ldr	r1, [pc, #364]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 fd8c 	bl	8002890 <RCC_SetFlashLatencyFromMSIRange>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e380      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d82:	f000 fcc1 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b51      	ldr	r3, [pc, #324]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	4950      	ldr	r1, [pc, #320]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d94:	5ccb      	ldrb	r3, [r1, r3]
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9e:	4a4e      	ldr	r2, [pc, #312]	@ (8001ed8 <HAL_RCC_OscConfig+0x278>)
 8001da0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001da2:	4b4e      	ldr	r3, [pc, #312]	@ (8001edc <HAL_RCC_OscConfig+0x27c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f802 	bl	8000db0 <HAL_InitTick>
 8001dac:	4603      	mov	r3, r0
 8001dae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d052      	beq.n	8001e5c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	e364      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d032      	beq.n	8001e28 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dc2:	4b43      	ldr	r3, [pc, #268]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a42      	ldr	r2, [pc, #264]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dce:	f7ff f83f 	bl	8000e50 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dd6:	f7ff f83b 	bl	8000e50 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e34d      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001de8:	4b39      	ldr	r3, [pc, #228]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df4:	4b36      	ldr	r3, [pc, #216]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a35      	ldr	r2, [pc, #212]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001dfa:	f043 0308 	orr.w	r3, r3, #8
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b33      	ldr	r3, [pc, #204]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4930      	ldr	r1, [pc, #192]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e12:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	492b      	ldr	r1, [pc, #172]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
 8001e26:	e01a      	b.n	8001e5e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e28:	4b29      	ldr	r3, [pc, #164]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a28      	ldr	r2, [pc, #160]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e34:	f7ff f80c 	bl	8000e50 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e3c:	f7ff f808 	bl	8000e50 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e31a      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x1dc>
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d073      	beq.n	8001f52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_OscConfig+0x21c>
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	d10e      	bne.n	8001e94 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d10b      	bne.n	8001e94 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d063      	beq.n	8001f50 <HAL_RCC_OscConfig+0x2f0>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d15f      	bne.n	8001f50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e2f7      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e9c:	d106      	bne.n	8001eac <HAL_RCC_OscConfig+0x24c>
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e025      	b.n	8001ef8 <HAL_RCC_OscConfig+0x298>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eb4:	d114      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x280>
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a05      	ldr	r2, [pc, #20]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a02      	ldr	r2, [pc, #8]	@ (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e013      	b.n	8001ef8 <HAL_RCC_OscConfig+0x298>
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08005b14 	.word	0x08005b14
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000004 	.word	0x20000004
 8001ee0:	4ba0      	ldr	r3, [pc, #640]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a9f      	ldr	r2, [pc, #636]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b9d      	ldr	r3, [pc, #628]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a9c      	ldr	r2, [pc, #624]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d013      	beq.n	8001f28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7fe ffa6 	bl	8000e50 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f08:	f7fe ffa2 	bl	8000e50 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	@ 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e2b4      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f1a:	4b92      	ldr	r3, [pc, #584]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x2a8>
 8001f26:	e014      	b.n	8001f52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7fe ff92 	bl	8000e50 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f30:	f7fe ff8e 	bl	8000e50 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	@ 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e2a0      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f42:	4b88      	ldr	r3, [pc, #544]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x2d0>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d060      	beq.n	8002020 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_OscConfig+0x310>
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b0c      	cmp	r3, #12
 8001f68:	d119      	bne.n	8001f9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d116      	bne.n	8001f9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f70:	4b7c      	ldr	r3, [pc, #496]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_OscConfig+0x328>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e27d      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f88:	4b76      	ldr	r3, [pc, #472]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	061b      	lsls	r3, r3, #24
 8001f96:	4973      	ldr	r1, [pc, #460]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f9c:	e040      	b.n	8002020 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d023      	beq.n	8001fee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa6:	4b6f      	ldr	r3, [pc, #444]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6e      	ldr	r2, [pc, #440]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb2:	f7fe ff4d 	bl	8000e50 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fba:	f7fe ff49 	bl	8000e50 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e25b      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fcc:	4b65      	ldr	r3, [pc, #404]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd8:	4b62      	ldr	r3, [pc, #392]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	495f      	ldr	r1, [pc, #380]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
 8001fec:	e018      	b.n	8002020 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fee:	4b5d      	ldr	r3, [pc, #372]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a5c      	ldr	r2, [pc, #368]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8001ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffa:	f7fe ff29 	bl	8000e50 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002002:	f7fe ff25 	bl	8000e50 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e237      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002014:	4b53      	ldr	r3, [pc, #332]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f0      	bne.n	8002002 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d03c      	beq.n	80020a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01c      	beq.n	800206e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002034:	4b4b      	ldr	r3, [pc, #300]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002036:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800203a:	4a4a      	ldr	r2, [pc, #296]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7fe ff04 	bl	8000e50 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204c:	f7fe ff00 	bl	8000e50 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e212      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800205e:	4b41      	ldr	r3, [pc, #260]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002060:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ef      	beq.n	800204c <HAL_RCC_OscConfig+0x3ec>
 800206c:	e01b      	b.n	80020a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206e:	4b3d      	ldr	r3, [pc, #244]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002070:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002074:	4a3b      	ldr	r2, [pc, #236]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207e:	f7fe fee7 	bl	8000e50 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002086:	f7fe fee3 	bl	8000e50 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e1f5      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002098:	4b32      	ldr	r3, [pc, #200]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 800209a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1ef      	bne.n	8002086 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80a6 	beq.w	8002200 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b4:	2300      	movs	r3, #0
 80020b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10d      	bne.n	80020e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c4:	4b27      	ldr	r3, [pc, #156]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c8:	4a26      	ldr	r2, [pc, #152]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 80020ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80020d0:	4b24      	ldr	r3, [pc, #144]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020dc:	2301      	movs	r3, #1
 80020de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e0:	4b21      	ldr	r3, [pc, #132]	@ (8002168 <HAL_RCC_OscConfig+0x508>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d118      	bne.n	800211e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002168 <HAL_RCC_OscConfig+0x508>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002168 <HAL_RCC_OscConfig+0x508>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f8:	f7fe feaa 	bl	8000e50 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002100:	f7fe fea6 	bl	8000e50 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e1b8      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002112:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <HAL_RCC_OscConfig+0x508>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d108      	bne.n	8002138 <HAL_RCC_OscConfig+0x4d8>
 8002126:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800212c:	4a0d      	ldr	r2, [pc, #52]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002136:	e029      	b.n	800218c <HAL_RCC_OscConfig+0x52c>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b05      	cmp	r3, #5
 800213e:	d115      	bne.n	800216c <HAL_RCC_OscConfig+0x50c>
 8002140:	4b08      	ldr	r3, [pc, #32]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002146:	4a07      	ldr	r2, [pc, #28]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002150:	4b04      	ldr	r3, [pc, #16]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002156:	4a03      	ldr	r2, [pc, #12]	@ (8002164 <HAL_RCC_OscConfig+0x504>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002160:	e014      	b.n	800218c <HAL_RCC_OscConfig+0x52c>
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	40007000 	.word	0x40007000
 800216c:	4b9d      	ldr	r3, [pc, #628]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 800216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002172:	4a9c      	ldr	r2, [pc, #624]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800217c:	4b99      	ldr	r3, [pc, #612]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002182:	4a98      	ldr	r2, [pc, #608]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d016      	beq.n	80021c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7fe fe5c 	bl	8000e50 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7fe fe58 	bl	8000e50 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e168      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b2:	4b8c      	ldr	r3, [pc, #560]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 80021b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ed      	beq.n	800219c <HAL_RCC_OscConfig+0x53c>
 80021c0:	e015      	b.n	80021ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c2:	f7fe fe45 	bl	8000e50 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7fe fe41 	bl	8000e50 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e151      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021e0:	4b80      	ldr	r3, [pc, #512]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1ed      	bne.n	80021ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ee:	7ffb      	ldrb	r3, [r7, #31]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d105      	bne.n	8002200 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f4:	4b7b      	ldr	r3, [pc, #492]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f8:	4a7a      	ldr	r2, [pc, #488]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 80021fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b00      	cmp	r3, #0
 800220a:	d03c      	beq.n	8002286 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01c      	beq.n	800224e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002214:	4b73      	ldr	r3, [pc, #460]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 8002216:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800221a:	4a72      	ldr	r2, [pc, #456]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002224:	f7fe fe14 	bl	8000e50 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800222c:	f7fe fe10 	bl	8000e50 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e122      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800223e:	4b69      	ldr	r3, [pc, #420]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 8002240:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0ef      	beq.n	800222c <HAL_RCC_OscConfig+0x5cc>
 800224c:	e01b      	b.n	8002286 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800224e:	4b65      	ldr	r3, [pc, #404]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 8002250:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002254:	4a63      	ldr	r2, [pc, #396]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225e:	f7fe fdf7 	bl	8000e50 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002266:	f7fe fdf3 	bl	8000e50 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e105      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002278:	4b5a      	ldr	r3, [pc, #360]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 800227a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1ef      	bne.n	8002266 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 80f9 	beq.w	8002482 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002294:	2b02      	cmp	r3, #2
 8002296:	f040 80cf 	bne.w	8002438 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800229a:	4b52      	ldr	r3, [pc, #328]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f003 0203 	and.w	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d12c      	bne.n	8002308 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b8:	3b01      	subs	r3, #1
 80022ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d123      	bne.n	8002308 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d11b      	bne.n	8002308 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022dc:	429a      	cmp	r2, r3
 80022de:	d113      	bne.n	8002308 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ea:	085b      	lsrs	r3, r3, #1
 80022ec:	3b01      	subs	r3, #1
 80022ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d109      	bne.n	8002308 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	085b      	lsrs	r3, r3, #1
 8002300:	3b01      	subs	r3, #1
 8002302:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002304:	429a      	cmp	r2, r3
 8002306:	d071      	beq.n	80023ec <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2b0c      	cmp	r3, #12
 800230c:	d068      	beq.n	80023e0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800230e:	4b35      	ldr	r3, [pc, #212]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d105      	bne.n	8002326 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800231a:	4b32      	ldr	r3, [pc, #200]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e0ac      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800232a:	4b2e      	ldr	r3, [pc, #184]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a2d      	ldr	r2, [pc, #180]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 8002330:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002334:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002336:	f7fe fd8b 	bl	8000e50 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233e:	f7fe fd87 	bl	8000e50 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e099      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002350:	4b24      	ldr	r3, [pc, #144]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f0      	bne.n	800233e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800235c:	4b21      	ldr	r3, [pc, #132]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	4b21      	ldr	r3, [pc, #132]	@ (80023e8 <HAL_RCC_OscConfig+0x788>)
 8002362:	4013      	ands	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800236c:	3a01      	subs	r2, #1
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	4311      	orrs	r1, r2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002376:	0212      	lsls	r2, r2, #8
 8002378:	4311      	orrs	r1, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800237e:	0852      	lsrs	r2, r2, #1
 8002380:	3a01      	subs	r2, #1
 8002382:	0552      	lsls	r2, r2, #21
 8002384:	4311      	orrs	r1, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800238a:	0852      	lsrs	r2, r2, #1
 800238c:	3a01      	subs	r2, #1
 800238e:	0652      	lsls	r2, r2, #25
 8002390:	4311      	orrs	r1, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002396:	06d2      	lsls	r2, r2, #27
 8002398:	430a      	orrs	r2, r1
 800239a:	4912      	ldr	r1, [pc, #72]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 800239c:	4313      	orrs	r3, r2
 800239e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023a0:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0f      	ldr	r2, [pc, #60]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 80023a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023ac:	4b0d      	ldr	r3, [pc, #52]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a0c      	ldr	r2, [pc, #48]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 80023b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023b8:	f7fe fd4a 	bl	8000e50 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe fd46 	bl	8000e50 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e058      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d2:	4b04      	ldr	r3, [pc, #16]	@ (80023e4 <HAL_RCC_OscConfig+0x784>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023de:	e050      	b.n	8002482 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e04f      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
 80023e4:	40021000 	.word	0x40021000
 80023e8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ec:	4b27      	ldr	r3, [pc, #156]	@ (800248c <HAL_RCC_OscConfig+0x82c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d144      	bne.n	8002482 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023f8:	4b24      	ldr	r3, [pc, #144]	@ (800248c <HAL_RCC_OscConfig+0x82c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a23      	ldr	r2, [pc, #140]	@ (800248c <HAL_RCC_OscConfig+0x82c>)
 80023fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002402:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002404:	4b21      	ldr	r3, [pc, #132]	@ (800248c <HAL_RCC_OscConfig+0x82c>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a20      	ldr	r2, [pc, #128]	@ (800248c <HAL_RCC_OscConfig+0x82c>)
 800240a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800240e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002410:	f7fe fd1e 	bl	8000e50 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe fd1a 	bl	8000e50 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e02c      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242a:	4b18      	ldr	r3, [pc, #96]	@ (800248c <HAL_RCC_OscConfig+0x82c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x7b8>
 8002436:	e024      	b.n	8002482 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2b0c      	cmp	r3, #12
 800243c:	d01f      	beq.n	800247e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b13      	ldr	r3, [pc, #76]	@ (800248c <HAL_RCC_OscConfig+0x82c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a12      	ldr	r2, [pc, #72]	@ (800248c <HAL_RCC_OscConfig+0x82c>)
 8002444:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe fd01 	bl	8000e50 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7fe fcfd 	bl	8000e50 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e00f      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002464:	4b09      	ldr	r3, [pc, #36]	@ (800248c <HAL_RCC_OscConfig+0x82c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002470:	4b06      	ldr	r3, [pc, #24]	@ (800248c <HAL_RCC_OscConfig+0x82c>)
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	4905      	ldr	r1, [pc, #20]	@ (800248c <HAL_RCC_OscConfig+0x82c>)
 8002476:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <HAL_RCC_OscConfig+0x830>)
 8002478:	4013      	ands	r3, r2
 800247a:	60cb      	str	r3, [r1, #12]
 800247c:	e001      	b.n	8002482 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3720      	adds	r7, #32
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	feeefffc 	.word	0xfeeefffc

08002494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e11d      	b.n	80026e8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024ac:	4b90      	ldr	r3, [pc, #576]	@ (80026f0 <HAL_RCC_ClockConfig+0x25c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d910      	bls.n	80024dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b8d      	ldr	r3, [pc, #564]	@ (80026f0 <HAL_RCC_ClockConfig+0x25c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 020f 	bic.w	r2, r3, #15
 80024c2:	498b      	ldr	r1, [pc, #556]	@ (80026f0 <HAL_RCC_ClockConfig+0x25c>)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ca:	4b89      	ldr	r3, [pc, #548]	@ (80026f0 <HAL_RCC_ClockConfig+0x25c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e105      	b.n	80026e8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d010      	beq.n	800250a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	4b81      	ldr	r3, [pc, #516]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d908      	bls.n	800250a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f8:	4b7e      	ldr	r3, [pc, #504]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	497b      	ldr	r1, [pc, #492]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 8002506:	4313      	orrs	r3, r2
 8002508:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d079      	beq.n	800260a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b03      	cmp	r3, #3
 800251c:	d11e      	bne.n	800255c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251e:	4b75      	ldr	r3, [pc, #468]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e0dc      	b.n	80026e8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800252e:	f000 fa09 	bl	8002944 <RCC_GetSysClockFreqFromPLLSource>
 8002532:	4603      	mov	r3, r0
 8002534:	4a70      	ldr	r2, [pc, #448]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d946      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800253a:	4b6e      	ldr	r3, [pc, #440]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d140      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002546:	4b6b      	ldr	r3, [pc, #428]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800254e:	4a69      	ldr	r2, [pc, #420]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 8002550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002554:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002556:	2380      	movs	r3, #128	@ 0x80
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e035      	b.n	80025c8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b02      	cmp	r3, #2
 8002562:	d107      	bne.n	8002574 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002564:	4b63      	ldr	r3, [pc, #396]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d115      	bne.n	800259c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0b9      	b.n	80026e8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d107      	bne.n	800258c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800257c:	4b5d      	ldr	r3, [pc, #372]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d109      	bne.n	800259c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0ad      	b.n	80026e8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800258c:	4b59      	ldr	r3, [pc, #356]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0a5      	b.n	80026e8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800259c:	f000 f8b4 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4a55      	ldr	r2, [pc, #340]	@ (80026f8 <HAL_RCC_ClockConfig+0x264>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d90f      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80025a8:	4b52      	ldr	r3, [pc, #328]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d109      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025b4:	4b4f      	ldr	r3, [pc, #316]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025bc:	4a4d      	ldr	r2, [pc, #308]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80025be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025c2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80025c4:	2380      	movs	r3, #128	@ 0x80
 80025c6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025c8:	4b4a      	ldr	r3, [pc, #296]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f023 0203 	bic.w	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4947      	ldr	r1, [pc, #284]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025da:	f7fe fc39 	bl	8000e50 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e2:	f7fe fc35 	bl	8000e50 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e077      	b.n	80026e8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f8:	4b3e      	ldr	r3, [pc, #248]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 020c 	and.w	r2, r3, #12
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	429a      	cmp	r2, r3
 8002608:	d1eb      	bne.n	80025e2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b80      	cmp	r3, #128	@ 0x80
 800260e:	d105      	bne.n	800261c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002610:	4b38      	ldr	r3, [pc, #224]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4a37      	ldr	r2, [pc, #220]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 8002616:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800261a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d010      	beq.n	800264a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	4b31      	ldr	r3, [pc, #196]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002634:	429a      	cmp	r2, r3
 8002636:	d208      	bcs.n	800264a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002638:	4b2e      	ldr	r3, [pc, #184]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	492b      	ldr	r1, [pc, #172]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800264a:	4b29      	ldr	r3, [pc, #164]	@ (80026f0 <HAL_RCC_ClockConfig+0x25c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d210      	bcs.n	800267a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002658:	4b25      	ldr	r3, [pc, #148]	@ (80026f0 <HAL_RCC_ClockConfig+0x25c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 020f 	bic.w	r2, r3, #15
 8002660:	4923      	ldr	r1, [pc, #140]	@ (80026f0 <HAL_RCC_ClockConfig+0x25c>)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	4313      	orrs	r3, r2
 8002666:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002668:	4b21      	ldr	r3, [pc, #132]	@ (80026f0 <HAL_RCC_ClockConfig+0x25c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d001      	beq.n	800267a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e036      	b.n	80026e8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	d008      	beq.n	8002698 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002686:	4b1b      	ldr	r3, [pc, #108]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	4918      	ldr	r1, [pc, #96]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 8002694:	4313      	orrs	r3, r2
 8002696:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d009      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026a4:	4b13      	ldr	r3, [pc, #76]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4910      	ldr	r1, [pc, #64]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026b8:	f000 f826 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b0d      	ldr	r3, [pc, #52]	@ (80026f4 <HAL_RCC_ClockConfig+0x260>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	490c      	ldr	r1, [pc, #48]	@ (80026fc <HAL_RCC_ClockConfig+0x268>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
 80026d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002700 <HAL_RCC_ClockConfig+0x26c>)
 80026d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <HAL_RCC_ClockConfig+0x270>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fb67 	bl	8000db0 <HAL_InitTick>
 80026e2:	4603      	mov	r3, r0
 80026e4:	73fb      	strb	r3, [r7, #15]

  return status;
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40022000 	.word	0x40022000
 80026f4:	40021000 	.word	0x40021000
 80026f8:	04c4b400 	.word	0x04c4b400
 80026fc:	08005b14 	.word	0x08005b14
 8002700:	20000000 	.word	0x20000000
 8002704:	20000004 	.word	0x20000004

08002708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	@ 0x24
 800270c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002716:	4b3e      	ldr	r3, [pc, #248]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x108>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002720:	4b3b      	ldr	r3, [pc, #236]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x108>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x34>
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	2b0c      	cmp	r3, #12
 8002734:	d121      	bne.n	800277a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d11e      	bne.n	800277a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800273c:	4b34      	ldr	r3, [pc, #208]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x108>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d107      	bne.n	8002758 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002748:	4b31      	ldr	r3, [pc, #196]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x108>)
 800274a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	e005      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002758:	4b2d      	ldr	r3, [pc, #180]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x108>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002764:	4a2b      	ldr	r2, [pc, #172]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10d      	bne.n	8002790 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b04      	cmp	r3, #4
 800277e:	d102      	bne.n	8002786 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002780:	4b25      	ldr	r3, [pc, #148]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x110>)
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	e004      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	2b08      	cmp	r3, #8
 800278a:	d101      	bne.n	8002790 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800278c:	4b23      	ldr	r3, [pc, #140]	@ (800281c <HAL_RCC_GetSysClockFreq+0x114>)
 800278e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	2b0c      	cmp	r3, #12
 8002794:	d134      	bne.n	8002800 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002796:	4b1e      	ldr	r3, [pc, #120]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x108>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0xa6>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d003      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0xac>
 80027ac:	e005      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x110>)
 80027b0:	617b      	str	r3, [r7, #20]
      break;
 80027b2:	e005      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027b4:	4b19      	ldr	r3, [pc, #100]	@ (800281c <HAL_RCC_GetSysClockFreq+0x114>)
 80027b6:	617b      	str	r3, [r7, #20]
      break;
 80027b8:	e002      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	617b      	str	r3, [r7, #20]
      break;
 80027be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027c0:	4b13      	ldr	r3, [pc, #76]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x108>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	3301      	adds	r3, #1
 80027cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027ce:	4b10      	ldr	r3, [pc, #64]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	fb03 f202 	mul.w	r2, r3, r2
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	0e5b      	lsrs	r3, r3, #25
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	3301      	adds	r3, #1
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002800:	69bb      	ldr	r3, [r7, #24]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3724      	adds	r7, #36	@ 0x24
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000
 8002814:	08005b2c 	.word	0x08005b2c
 8002818:	00f42400 	.word	0x00f42400
 800281c:	007a1200 	.word	0x007a1200

08002820 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002824:	4b03      	ldr	r3, [pc, #12]	@ (8002834 <HAL_RCC_GetHCLKFreq+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000000 	.word	0x20000000

08002838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800283c:	f7ff fff0 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002840:	4602      	mov	r2, r0
 8002842:	4b06      	ldr	r3, [pc, #24]	@ (800285c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	0a1b      	lsrs	r3, r3, #8
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4904      	ldr	r1, [pc, #16]	@ (8002860 <HAL_RCC_GetPCLK1Freq+0x28>)
 800284e:	5ccb      	ldrb	r3, [r1, r3]
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	08005b24 	.word	0x08005b24

08002864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002868:	f7ff ffda 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 800286c:	4602      	mov	r2, r0
 800286e:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	0adb      	lsrs	r3, r3, #11
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	4904      	ldr	r1, [pc, #16]	@ (800288c <HAL_RCC_GetPCLK2Freq+0x28>)
 800287a:	5ccb      	ldrb	r3, [r1, r3]
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40021000 	.word	0x40021000
 800288c:	08005b24 	.word	0x08005b24

08002890 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800289c:	4b27      	ldr	r3, [pc, #156]	@ (800293c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028a8:	f7ff f906 	bl	8001ab8 <HAL_PWREx_GetVoltageRange>
 80028ac:	6178      	str	r0, [r7, #20]
 80028ae:	e014      	b.n	80028da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028b0:	4b22      	ldr	r3, [pc, #136]	@ (800293c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b4:	4a21      	ldr	r2, [pc, #132]	@ (800293c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80028bc:	4b1f      	ldr	r3, [pc, #124]	@ (800293c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028c8:	f7ff f8f6 	bl	8001ab8 <HAL_PWREx_GetVoltageRange>
 80028cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028ce:	4b1b      	ldr	r3, [pc, #108]	@ (800293c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d2:	4a1a      	ldr	r2, [pc, #104]	@ (800293c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80028d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028e0:	d10b      	bne.n	80028fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b80      	cmp	r3, #128	@ 0x80
 80028e6:	d913      	bls.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80028ec:	d902      	bls.n	80028f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028ee:	2302      	movs	r3, #2
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	e00d      	b.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028f4:	2301      	movs	r3, #1
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	e00a      	b.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80028fe:	d902      	bls.n	8002906 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002900:	2302      	movs	r3, #2
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	e004      	b.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b70      	cmp	r3, #112	@ 0x70
 800290a:	d101      	bne.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800290c:	2301      	movs	r3, #1
 800290e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002910:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 020f 	bic.w	r2, r3, #15
 8002918:	4909      	ldr	r1, [pc, #36]	@ (8002940 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002920:	4b07      	ldr	r3, [pc, #28]	@ (8002940 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	429a      	cmp	r2, r3
 800292c:	d001      	beq.n	8002932 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000
 8002940:	40022000 	.word	0x40022000

08002944 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800294a:	4b2d      	ldr	r3, [pc, #180]	@ (8002a00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b03      	cmp	r3, #3
 8002958:	d00b      	beq.n	8002972 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b03      	cmp	r3, #3
 800295e:	d825      	bhi.n	80029ac <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d008      	beq.n	8002978 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d11f      	bne.n	80029ac <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800296c:	4b25      	ldr	r3, [pc, #148]	@ (8002a04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800296e:	613b      	str	r3, [r7, #16]
    break;
 8002970:	e01f      	b.n	80029b2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002972:	4b25      	ldr	r3, [pc, #148]	@ (8002a08 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002974:	613b      	str	r3, [r7, #16]
    break;
 8002976:	e01c      	b.n	80029b2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002978:	4b21      	ldr	r3, [pc, #132]	@ (8002a00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d107      	bne.n	8002994 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002984:	4b1e      	ldr	r3, [pc, #120]	@ (8002a00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002986:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	e005      	b.n	80029a0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002994:	4b1a      	ldr	r3, [pc, #104]	@ (8002a00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80029a0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a0c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a8:	613b      	str	r3, [r7, #16]
    break;
 80029aa:	e002      	b.n	80029b2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
    break;
 80029b0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029b2:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	3301      	adds	r3, #1
 80029be:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	0a1b      	lsrs	r3, r3, #8
 80029c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	fb03 f202 	mul.w	r2, r3, r2
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029d8:	4b09      	ldr	r3, [pc, #36]	@ (8002a00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	0e5b      	lsrs	r3, r3, #25
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	3301      	adds	r3, #1
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80029f2:	683b      	ldr	r3, [r7, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	371c      	adds	r7, #28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	40021000 	.word	0x40021000
 8002a04:	00f42400 	.word	0x00f42400
 8002a08:	007a1200 	.word	0x007a1200
 8002a0c:	08005b2c 	.word	0x08005b2c

08002a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a18:	2300      	movs	r3, #0
 8002a1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d040      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a30:	2b80      	cmp	r3, #128	@ 0x80
 8002a32:	d02a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a34:	2b80      	cmp	r3, #128	@ 0x80
 8002a36:	d825      	bhi.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002a38:	2b60      	cmp	r3, #96	@ 0x60
 8002a3a:	d026      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a3c:	2b60      	cmp	r3, #96	@ 0x60
 8002a3e:	d821      	bhi.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002a40:	2b40      	cmp	r3, #64	@ 0x40
 8002a42:	d006      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002a44:	2b40      	cmp	r3, #64	@ 0x40
 8002a46:	d81d      	bhi.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d009      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	d010      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002a50:	e018      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a52:	4b89      	ldr	r3, [pc, #548]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	4a88      	ldr	r2, [pc, #544]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a5c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a5e:	e015      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3304      	adds	r3, #4
 8002a64:	2100      	movs	r1, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fb02 	bl	8003070 <RCCEx_PLLSAI1_Config>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a70:	e00c      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3320      	adds	r3, #32
 8002a76:	2100      	movs	r1, #0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fbed 	bl	8003258 <RCCEx_PLLSAI2_Config>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a82:	e003      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	74fb      	strb	r3, [r7, #19]
      break;
 8002a88:	e000      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002a8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a8c:	7cfb      	ldrb	r3, [r7, #19]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10b      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a92:	4b79      	ldr	r3, [pc, #484]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a98:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aa0:	4975      	ldr	r1, [pc, #468]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002aa8:	e001      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aaa:	7cfb      	ldrb	r3, [r7, #19]
 8002aac:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d047      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ac2:	d030      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002ac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ac8:	d82a      	bhi.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002aca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ace:	d02a      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002ad0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ad4:	d824      	bhi.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002ad6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ada:	d008      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ae0:	d81e      	bhi.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aea:	d010      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002aec:	e018      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002aee:	4b62      	ldr	r3, [pc, #392]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	4a61      	ldr	r2, [pc, #388]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002afa:	e015      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3304      	adds	r3, #4
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fab4 	bl	8003070 <RCCEx_PLLSAI1_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b0c:	e00c      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3320      	adds	r3, #32
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fb9f 	bl	8003258 <RCCEx_PLLSAI2_Config>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b1e:	e003      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	74fb      	strb	r3, [r7, #19]
      break;
 8002b24:	e000      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b28:	7cfb      	ldrb	r3, [r7, #19]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10b      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b2e:	4b52      	ldr	r3, [pc, #328]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3c:	494e      	ldr	r1, [pc, #312]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002b44:	e001      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b46:	7cfb      	ldrb	r3, [r7, #19]
 8002b48:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 809f 	beq.w	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b5c:	4b46      	ldr	r3, [pc, #280]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00d      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b72:	4b41      	ldr	r3, [pc, #260]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b76:	4a40      	ldr	r2, [pc, #256]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a3a      	ldr	r2, [pc, #232]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b9a:	f7fe f959 	bl	8000e50 <HAL_GetTick>
 8002b9e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ba0:	e009      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba2:	f7fe f955 	bl	8000e50 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d902      	bls.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	74fb      	strb	r3, [r7, #19]
        break;
 8002bb4:	e005      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bb6:	4b31      	ldr	r3, [pc, #196]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0ef      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002bc2:	7cfb      	ldrb	r3, [r7, #19]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d15b      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bd2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01f      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d019      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002be6:	4b24      	ldr	r3, [pc, #144]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bf0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bf2:	4b21      	ldr	r3, [pc, #132]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c02:	4b1d      	ldr	r3, [pc, #116]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c08:	4a1b      	ldr	r2, [pc, #108]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c12:	4a19      	ldr	r2, [pc, #100]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d016      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe f914 	bl	8000e50 <HAL_GetTick>
 8002c28:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c2a:	e00b      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2c:	f7fe f910 	bl	8000e50 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d902      	bls.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	74fb      	strb	r3, [r7, #19]
            break;
 8002c42:	e006      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c44:	4b0c      	ldr	r3, [pc, #48]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0ec      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002c52:	7cfb      	ldrb	r3, [r7, #19]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10c      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c58:	4b07      	ldr	r3, [pc, #28]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c68:	4903      	ldr	r1, [pc, #12]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c70:	e008      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c72:	7cfb      	ldrb	r3, [r7, #19]
 8002c74:	74bb      	strb	r3, [r7, #18]
 8002c76:	e005      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c84:	7c7b      	ldrb	r3, [r7, #17]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d105      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8a:	4ba0      	ldr	r3, [pc, #640]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8e:	4a9f      	ldr	r2, [pc, #636]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c94:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ca2:	4b9a      	ldr	r3, [pc, #616]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca8:	f023 0203 	bic.w	r2, r3, #3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb0:	4996      	ldr	r1, [pc, #600]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cc4:	4b91      	ldr	r3, [pc, #580]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cca:	f023 020c 	bic.w	r2, r3, #12
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	498e      	ldr	r1, [pc, #568]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ce6:	4b89      	ldr	r3, [pc, #548]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf4:	4985      	ldr	r1, [pc, #532]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d08:	4b80      	ldr	r3, [pc, #512]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d16:	497d      	ldr	r1, [pc, #500]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d2a:	4b78      	ldr	r3, [pc, #480]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d38:	4974      	ldr	r1, [pc, #464]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d4c:	4b6f      	ldr	r3, [pc, #444]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d5a:	496c      	ldr	r1, [pc, #432]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d6e:	4b67      	ldr	r3, [pc, #412]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d7c:	4963      	ldr	r1, [pc, #396]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d90:	4b5e      	ldr	r3, [pc, #376]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d9e:	495b      	ldr	r1, [pc, #364]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002db2:	4b56      	ldr	r3, [pc, #344]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc0:	4952      	ldr	r1, [pc, #328]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dd4:	4b4d      	ldr	r3, [pc, #308]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dda:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de2:	494a      	ldr	r1, [pc, #296]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002df6:	4b45      	ldr	r3, [pc, #276]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e04:	4941      	ldr	r1, [pc, #260]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e18:	4b3c      	ldr	r3, [pc, #240]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e1e:	f023 0203 	bic.w	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e26:	4939      	ldr	r1, [pc, #228]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d028      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e3a:	4b34      	ldr	r3, [pc, #208]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e40:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e48:	4930      	ldr	r1, [pc, #192]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e58:	d106      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	4a2b      	ldr	r2, [pc, #172]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e64:	60d3      	str	r3, [r2, #12]
 8002e66:	e011      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3304      	adds	r3, #4
 8002e76:	2101      	movs	r1, #1
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 f8f9 	bl	8003070 <RCCEx_PLLSAI1_Config>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e82:	7cfb      	ldrb	r3, [r7, #19]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002e88:	7cfb      	ldrb	r3, [r7, #19]
 8002e8a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d04d      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ea0:	d108      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ea4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ea8:	4a18      	ldr	r2, [pc, #96]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eae:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002eb2:	e012      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002eb4:	4b15      	ldr	r3, [pc, #84]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002eba:	4a14      	ldr	r2, [pc, #80]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ebc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ec0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002ec4:	4b11      	ldr	r3, [pc, #68]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ed2:	490e      	ldr	r1, [pc, #56]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ede:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ee2:	d106      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee4:	4b09      	ldr	r3, [pc, #36]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a08      	ldr	r2, [pc, #32]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002eee:	60d3      	str	r3, [r2, #12]
 8002ef0:	e020      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ef6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002efa:	d109      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002efc:	4b03      	ldr	r3, [pc, #12]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4a02      	ldr	r2, [pc, #8]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f06:	60d3      	str	r3, [r2, #12]
 8002f08:	e014      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002f0a:	bf00      	nop
 8002f0c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	2101      	movs	r1, #1
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 f8a5 	bl	8003070 <RCCEx_PLLSAI1_Config>
 8002f26:	4603      	mov	r3, r0
 8002f28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f2a:	7cfb      	ldrb	r3, [r7, #19]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002f30:	7cfb      	ldrb	r3, [r7, #19]
 8002f32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d028      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f40:	4b4a      	ldr	r3, [pc, #296]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f4e:	4947      	ldr	r1, [pc, #284]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f5e:	d106      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f60:	4b42      	ldr	r3, [pc, #264]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4a41      	ldr	r2, [pc, #260]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f6a:	60d3      	str	r3, [r2, #12]
 8002f6c:	e011      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f76:	d10c      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 f876 	bl	8003070 <RCCEx_PLLSAI1_Config>
 8002f84:	4603      	mov	r3, r0
 8002f86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002f8e:	7cfb      	ldrb	r3, [r7, #19]
 8002f90:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d01e      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f9e:	4b33      	ldr	r3, [pc, #204]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fae:	492f      	ldr	r1, [pc, #188]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 f851 	bl	8003070 <RCCEx_PLLSAI1_Config>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fd2:	7cfb      	ldrb	r3, [r7, #19]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002fd8:	7cfb      	ldrb	r3, [r7, #19]
 8002fda:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00b      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fe8:	4b20      	ldr	r3, [pc, #128]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fee:	f023 0204 	bic.w	r2, r3, #4
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ff8:	491c      	ldr	r1, [pc, #112]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800300c:	4b17      	ldr	r3, [pc, #92]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800300e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003012:	f023 0218 	bic.w	r2, r3, #24
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301c:	4913      	ldr	r1, [pc, #76]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d017      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003030:	4b0e      	ldr	r3, [pc, #56]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003032:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003036:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003040:	490a      	ldr	r1, [pc, #40]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800304e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003052:	d105      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003054:	4b05      	ldr	r3, [pc, #20]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4a04      	ldr	r2, [pc, #16]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800305a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800305e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003060:	7cbb      	ldrb	r3, [r7, #18]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000

08003070 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800307e:	4b72      	ldr	r3, [pc, #456]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00e      	beq.n	80030a8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800308a:	4b6f      	ldr	r3, [pc, #444]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0203 	and.w	r2, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d103      	bne.n	80030a2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
       ||
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d142      	bne.n	8003128 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
 80030a6:	e03f      	b.n	8003128 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d018      	beq.n	80030e2 <RCCEx_PLLSAI1_Config+0x72>
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d825      	bhi.n	8003100 <RCCEx_PLLSAI1_Config+0x90>
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d002      	beq.n	80030be <RCCEx_PLLSAI1_Config+0x4e>
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d009      	beq.n	80030d0 <RCCEx_PLLSAI1_Config+0x60>
 80030bc:	e020      	b.n	8003100 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030be:	4b62      	ldr	r3, [pc, #392]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d11d      	bne.n	8003106 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ce:	e01a      	b.n	8003106 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030d0:	4b5d      	ldr	r3, [pc, #372]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d116      	bne.n	800310a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e0:	e013      	b.n	800310a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030e2:	4b59      	ldr	r3, [pc, #356]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10f      	bne.n	800310e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030ee:	4b56      	ldr	r3, [pc, #344]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030fe:	e006      	b.n	800310e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      break;
 8003104:	e004      	b.n	8003110 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003106:	bf00      	nop
 8003108:	e002      	b.n	8003110 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800310a:	bf00      	nop
 800310c:	e000      	b.n	8003110 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800310e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d108      	bne.n	8003128 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003116:	4b4c      	ldr	r3, [pc, #304]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f023 0203 	bic.w	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4949      	ldr	r1, [pc, #292]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003124:	4313      	orrs	r3, r2
 8003126:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 8086 	bne.w	800323c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003130:	4b45      	ldr	r3, [pc, #276]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a44      	ldr	r2, [pc, #272]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003136:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800313a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800313c:	f7fd fe88 	bl	8000e50 <HAL_GetTick>
 8003140:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003142:	e009      	b.n	8003158 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003144:	f7fd fe84 	bl	8000e50 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d902      	bls.n	8003158 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	73fb      	strb	r3, [r7, #15]
        break;
 8003156:	e005      	b.n	8003164 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003158:	4b3b      	ldr	r3, [pc, #236]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1ef      	bne.n	8003144 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d168      	bne.n	800323c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d113      	bne.n	8003198 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003170:	4b35      	ldr	r3, [pc, #212]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	4b35      	ldr	r3, [pc, #212]	@ (800324c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003176:	4013      	ands	r3, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6892      	ldr	r2, [r2, #8]
 800317c:	0211      	lsls	r1, r2, #8
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68d2      	ldr	r2, [r2, #12]
 8003182:	06d2      	lsls	r2, r2, #27
 8003184:	4311      	orrs	r1, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6852      	ldr	r2, [r2, #4]
 800318a:	3a01      	subs	r2, #1
 800318c:	0112      	lsls	r2, r2, #4
 800318e:	430a      	orrs	r2, r1
 8003190:	492d      	ldr	r1, [pc, #180]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003192:	4313      	orrs	r3, r2
 8003194:	610b      	str	r3, [r1, #16]
 8003196:	e02d      	b.n	80031f4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d115      	bne.n	80031ca <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800319e:	4b2a      	ldr	r3, [pc, #168]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003250 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6892      	ldr	r2, [r2, #8]
 80031aa:	0211      	lsls	r1, r2, #8
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6912      	ldr	r2, [r2, #16]
 80031b0:	0852      	lsrs	r2, r2, #1
 80031b2:	3a01      	subs	r2, #1
 80031b4:	0552      	lsls	r2, r2, #21
 80031b6:	4311      	orrs	r1, r2
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6852      	ldr	r2, [r2, #4]
 80031bc:	3a01      	subs	r2, #1
 80031be:	0112      	lsls	r2, r2, #4
 80031c0:	430a      	orrs	r2, r1
 80031c2:	4921      	ldr	r1, [pc, #132]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	610b      	str	r3, [r1, #16]
 80031c8:	e014      	b.n	80031f4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	4b21      	ldr	r3, [pc, #132]	@ (8003254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6892      	ldr	r2, [r2, #8]
 80031d6:	0211      	lsls	r1, r2, #8
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6952      	ldr	r2, [r2, #20]
 80031dc:	0852      	lsrs	r2, r2, #1
 80031de:	3a01      	subs	r2, #1
 80031e0:	0652      	lsls	r2, r2, #25
 80031e2:	4311      	orrs	r1, r2
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6852      	ldr	r2, [r2, #4]
 80031e8:	3a01      	subs	r2, #1
 80031ea:	0112      	lsls	r2, r2, #4
 80031ec:	430a      	orrs	r2, r1
 80031ee:	4916      	ldr	r1, [pc, #88]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031f4:	4b14      	ldr	r3, [pc, #80]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a13      	ldr	r2, [pc, #76]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003200:	f7fd fe26 	bl	8000e50 <HAL_GetTick>
 8003204:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003206:	e009      	b.n	800321c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003208:	f7fd fe22 	bl	8000e50 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d902      	bls.n	800321c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	73fb      	strb	r3, [r7, #15]
          break;
 800321a:	e005      	b.n	8003228 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800321c:	4b0a      	ldr	r3, [pc, #40]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0ef      	beq.n	8003208 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800322e:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	4904      	ldr	r1, [pc, #16]	@ (8003248 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003238:	4313      	orrs	r3, r2
 800323a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000
 800324c:	07ff800f 	.word	0x07ff800f
 8003250:	ff9f800f 	.word	0xff9f800f
 8003254:	f9ff800f 	.word	0xf9ff800f

08003258 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003266:	4b72      	ldr	r3, [pc, #456]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00e      	beq.n	8003290 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003272:	4b6f      	ldr	r3, [pc, #444]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f003 0203 	and.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d103      	bne.n	800328a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
       ||
 8003286:	2b00      	cmp	r3, #0
 8003288:	d142      	bne.n	8003310 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
 800328e:	e03f      	b.n	8003310 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b03      	cmp	r3, #3
 8003296:	d018      	beq.n	80032ca <RCCEx_PLLSAI2_Config+0x72>
 8003298:	2b03      	cmp	r3, #3
 800329a:	d825      	bhi.n	80032e8 <RCCEx_PLLSAI2_Config+0x90>
 800329c:	2b01      	cmp	r3, #1
 800329e:	d002      	beq.n	80032a6 <RCCEx_PLLSAI2_Config+0x4e>
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d009      	beq.n	80032b8 <RCCEx_PLLSAI2_Config+0x60>
 80032a4:	e020      	b.n	80032e8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032a6:	4b62      	ldr	r3, [pc, #392]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d11d      	bne.n	80032ee <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b6:	e01a      	b.n	80032ee <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032b8:	4b5d      	ldr	r3, [pc, #372]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d116      	bne.n	80032f2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032c8:	e013      	b.n	80032f2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032ca:	4b59      	ldr	r3, [pc, #356]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10f      	bne.n	80032f6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032d6:	4b56      	ldr	r3, [pc, #344]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032e6:	e006      	b.n	80032f6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
      break;
 80032ec:	e004      	b.n	80032f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80032ee:	bf00      	nop
 80032f0:	e002      	b.n	80032f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80032f2:	bf00      	nop
 80032f4:	e000      	b.n	80032f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80032f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d108      	bne.n	8003310 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80032fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f023 0203 	bic.w	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4949      	ldr	r1, [pc, #292]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 800330c:	4313      	orrs	r3, r2
 800330e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f040 8086 	bne.w	8003424 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003318:	4b45      	ldr	r3, [pc, #276]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a44      	ldr	r2, [pc, #272]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 800331e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003322:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003324:	f7fd fd94 	bl	8000e50 <HAL_GetTick>
 8003328:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800332a:	e009      	b.n	8003340 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800332c:	f7fd fd90 	bl	8000e50 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d902      	bls.n	8003340 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	73fb      	strb	r3, [r7, #15]
        break;
 800333e:	e005      	b.n	800334c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003340:	4b3b      	ldr	r3, [pc, #236]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1ef      	bne.n	800332c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d168      	bne.n	8003424 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d113      	bne.n	8003380 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003358:	4b35      	ldr	r3, [pc, #212]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	4b35      	ldr	r3, [pc, #212]	@ (8003434 <RCCEx_PLLSAI2_Config+0x1dc>)
 800335e:	4013      	ands	r3, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6892      	ldr	r2, [r2, #8]
 8003364:	0211      	lsls	r1, r2, #8
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68d2      	ldr	r2, [r2, #12]
 800336a:	06d2      	lsls	r2, r2, #27
 800336c:	4311      	orrs	r1, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6852      	ldr	r2, [r2, #4]
 8003372:	3a01      	subs	r2, #1
 8003374:	0112      	lsls	r2, r2, #4
 8003376:	430a      	orrs	r2, r1
 8003378:	492d      	ldr	r1, [pc, #180]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 800337a:	4313      	orrs	r3, r2
 800337c:	614b      	str	r3, [r1, #20]
 800337e:	e02d      	b.n	80033dc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d115      	bne.n	80033b2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003386:	4b2a      	ldr	r3, [pc, #168]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	4b2b      	ldr	r3, [pc, #172]	@ (8003438 <RCCEx_PLLSAI2_Config+0x1e0>)
 800338c:	4013      	ands	r3, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6892      	ldr	r2, [r2, #8]
 8003392:	0211      	lsls	r1, r2, #8
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6912      	ldr	r2, [r2, #16]
 8003398:	0852      	lsrs	r2, r2, #1
 800339a:	3a01      	subs	r2, #1
 800339c:	0552      	lsls	r2, r2, #21
 800339e:	4311      	orrs	r1, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6852      	ldr	r2, [r2, #4]
 80033a4:	3a01      	subs	r2, #1
 80033a6:	0112      	lsls	r2, r2, #4
 80033a8:	430a      	orrs	r2, r1
 80033aa:	4921      	ldr	r1, [pc, #132]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	614b      	str	r3, [r1, #20]
 80033b0:	e014      	b.n	80033dc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	4b21      	ldr	r3, [pc, #132]	@ (800343c <RCCEx_PLLSAI2_Config+0x1e4>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6892      	ldr	r2, [r2, #8]
 80033be:	0211      	lsls	r1, r2, #8
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6952      	ldr	r2, [r2, #20]
 80033c4:	0852      	lsrs	r2, r2, #1
 80033c6:	3a01      	subs	r2, #1
 80033c8:	0652      	lsls	r2, r2, #25
 80033ca:	4311      	orrs	r1, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6852      	ldr	r2, [r2, #4]
 80033d0:	3a01      	subs	r2, #1
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	430a      	orrs	r2, r1
 80033d6:	4916      	ldr	r1, [pc, #88]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033dc:	4b14      	ldr	r3, [pc, #80]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a13      	ldr	r2, [pc, #76]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7fd fd32 	bl	8000e50 <HAL_GetTick>
 80033ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033ee:	e009      	b.n	8003404 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033f0:	f7fd fd2e 	bl	8000e50 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d902      	bls.n	8003404 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	73fb      	strb	r3, [r7, #15]
          break;
 8003402:	e005      	b.n	8003410 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003404:	4b0a      	ldr	r3, [pc, #40]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0ef      	beq.n	80033f0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003416:	4b06      	ldr	r3, [pc, #24]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	4904      	ldr	r1, [pc, #16]	@ (8003430 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003420:	4313      	orrs	r3, r2
 8003422:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003424:	7bfb      	ldrb	r3, [r7, #15]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	07ff800f 	.word	0x07ff800f
 8003438:	ff9f800f 	.word	0xff9f800f
 800343c:	f9ff800f 	.word	0xf9ff800f

08003440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e042      	b.n	80034d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7fd fb07 	bl	8000a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2224      	movs	r2, #36	@ 0x24
 800346e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0201 	bic.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fd34 	bl	8003ef0 <UART_SetConfig>
 8003488:	4603      	mov	r3, r0
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e022      	b.n	80034d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f001 f824 	bl	80044e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f001 f8ab 	bl	800462c <UART_CheckIdleState>
 80034d6:	4603      	mov	r3, r0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	@ 0x28
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	f040 8083 	bne.w	8003602 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <HAL_UART_Transmit+0x28>
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e07b      	b.n	8003604 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <HAL_UART_Transmit+0x3a>
 8003516:	2302      	movs	r3, #2
 8003518:	e074      	b.n	8003604 <HAL_UART_Transmit+0x124>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2221      	movs	r2, #33	@ 0x21
 800352e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003532:	f7fd fc8d 	bl	8000e50 <HAL_GetTick>
 8003536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	88fa      	ldrh	r2, [r7, #6]
 800353c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	88fa      	ldrh	r2, [r7, #6]
 8003544:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003550:	d108      	bne.n	8003564 <HAL_UART_Transmit+0x84>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d104      	bne.n	8003564 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	e003      	b.n	800356c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003568:	2300      	movs	r3, #0
 800356a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8003574:	e02c      	b.n	80035d0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2200      	movs	r2, #0
 800357e:	2180      	movs	r1, #128	@ 0x80
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f001 f89e 	bl	80046c2 <UART_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e039      	b.n	8003604 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10b      	bne.n	80035ae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	881a      	ldrh	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035a2:	b292      	uxth	r2, r2
 80035a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	3302      	adds	r3, #2
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	e007      	b.n	80035be <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	781a      	ldrb	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	3301      	adds	r3, #1
 80035bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1cc      	bne.n	8003576 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2200      	movs	r2, #0
 80035e4:	2140      	movs	r1, #64	@ 0x40
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f001 f86b 	bl	80046c2 <UART_WaitOnFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e006      	b.n	8003604 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	e000      	b.n	8003604 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003602:	2302      	movs	r3, #2
  }
}
 8003604:	4618      	mov	r0, r3
 8003606:	3720      	adds	r7, #32
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800360c:	b480      	push	{r7}
 800360e:	b091      	sub	sp, #68	@ 0x44
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	4613      	mov	r3, r2
 8003618:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003620:	2b20      	cmp	r3, #32
 8003622:	f040 808c 	bne.w	800373e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_UART_Transmit_IT+0x26>
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e084      	b.n	8003740 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_UART_Transmit_IT+0x38>
 8003640:	2302      	movs	r3, #2
 8003642:	e07d      	b.n	8003740 <HAL_UART_Transmit_IT+0x134>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->pTxBuffPtr  = pData;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	88fa      	ldrh	r2, [r7, #6]
 8003656:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	88fa      	ldrh	r2, [r7, #6]
 800365e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	675a      	str	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2221      	movs	r2, #33	@ 0x21
 8003674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

#if defined(USART_CR1_FIFOEN)
    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800367c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003680:	d12e      	bne.n	80036e0 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800368a:	d107      	bne.n	800369c <HAL_UART_Transmit_IT+0x90>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a2d      	ldr	r2, [pc, #180]	@ (800374c <HAL_UART_Transmit_IT+0x140>)
 8003698:	675a      	str	r2, [r3, #116]	@ 0x74
 800369a:	e002      	b.n	80036a2 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4a2c      	ldr	r2, [pc, #176]	@ (8003750 <HAL_UART_Transmit_IT+0x144>)
 80036a0:	675a      	str	r2, [r3, #116]	@ 0x74
      }

      __HAL_UNLOCK(huart);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3308      	adds	r3, #8
 80036b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3308      	adds	r3, #8
 80036c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036ca:	637a      	str	r2, [r7, #52]	@ 0x34
 80036cc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80036d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e5      	bne.n	80036aa <HAL_UART_Transmit_IT+0x9e>
 80036de:	e02c      	b.n	800373a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e8:	d107      	bne.n	80036fa <HAL_UART_Transmit_IT+0xee>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4a17      	ldr	r2, [pc, #92]	@ (8003754 <HAL_UART_Transmit_IT+0x148>)
 80036f6:	675a      	str	r2, [r3, #116]	@ 0x74
 80036f8:	e002      	b.n	8003700 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4a16      	ldr	r2, [pc, #88]	@ (8003758 <HAL_UART_Transmit_IT+0x14c>)
 80036fe:	675a      	str	r2, [r3, #116]	@ 0x74
      }

      __HAL_UNLOCK(huart);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	e853 3f00 	ldrex	r3, [r3]
 8003714:	613b      	str	r3, [r7, #16]
   return(result);
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800371c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	69f9      	ldr	r1, [r7, #28]
 800372c:	6a3a      	ldr	r2, [r7, #32]
 800372e:	e841 2300 	strex	r3, r2, [r1]
 8003732:	61bb      	str	r3, [r7, #24]
   return(result);
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e6      	bne.n	8003708 <HAL_UART_Transmit_IT+0xfc>

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	e000      	b.n	8003740 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800373e:	2302      	movs	r3, #2
  }
}
 8003740:	4618      	mov	r0, r3
 8003742:	3744      	adds	r7, #68	@ 0x44
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	08004d5d 	.word	0x08004d5d
 8003750:	08004c7d 	.word	0x08004c7d
 8003754:	08004bbb 	.word	0x08004bbb
 8003758:	08004b03 	.word	0x08004b03

0800375c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	@ 0x28
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	4613      	mov	r3, r2
 8003768:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003770:	2b20      	cmp	r3, #32
 8003772:	d17a      	bne.n	800386a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_UART_Transmit_DMA+0x24>
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e073      	b.n	800386c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_UART_Transmit_DMA+0x36>
 800378e:	2302      	movs	r3, #2
 8003790:	e06c      	b.n	800386c <HAL_UART_Transmit_DMA+0x110>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->pTxBuffPtr  = pData;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	88fa      	ldrh	r2, [r7, #6]
 80037a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	88fa      	ldrh	r2, [r7, #6]
 80037ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2221      	movs	r2, #33	@ 0x21
 80037bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    if (huart->hdmatx != NULL)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d02c      	beq.n	8003822 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037cc:	4a29      	ldr	r2, [pc, #164]	@ (8003874 <HAL_UART_Transmit_DMA+0x118>)
 80037ce:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037d4:	4a28      	ldr	r2, [pc, #160]	@ (8003878 <HAL_UART_Transmit_DMA+0x11c>)
 80037d6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037dc:	4a27      	ldr	r2, [pc, #156]	@ (800387c <HAL_UART_Transmit_DMA+0x120>)
 80037de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037e4:	2200      	movs	r2, #0
 80037e6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f0:	4619      	mov	r1, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3328      	adds	r3, #40	@ 0x28
 80037f8:	461a      	mov	r2, r3
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	f7fd fd12 	bl	8001224 <HAL_DMA_Start_IT>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00d      	beq.n	8003822 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2210      	movs	r2, #16
 800380a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e024      	b.n	800386c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2240      	movs	r2, #64	@ 0x40
 8003828:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3308      	adds	r3, #8
 8003838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	e853 3f00 	ldrex	r3, [r3]
 8003840:	613b      	str	r3, [r7, #16]
   return(result);
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003848:	627b      	str	r3, [r7, #36]	@ 0x24
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3308      	adds	r3, #8
 8003850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003852:	623a      	str	r2, [r7, #32]
 8003854:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	69f9      	ldr	r1, [r7, #28]
 8003858:	6a3a      	ldr	r2, [r7, #32]
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1e5      	bne.n	8003832 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800386a:	2302      	movs	r3, #2
  }
}
 800386c:	4618      	mov	r0, r3
 800386e:	3728      	adds	r7, #40	@ 0x28
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	080049a1 	.word	0x080049a1
 8003878:	08004a3b 	.word	0x08004a3b
 800387c:	08004a57 	.word	0x08004a57

08003880 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b0ba      	sub	sp, #232	@ 0xe8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80038aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80038ae:	4013      	ands	r3, r2
 80038b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80038b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d11b      	bne.n	80038f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d015      	beq.n	80038f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80038c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d105      	bne.n	80038e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80038d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d009      	beq.n	80038f4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 82d6 	beq.w	8003e96 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	4798      	blx	r3
      }
      return;
 80038f2:	e2d0      	b.n	8003e96 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80038f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 811f 	beq.w	8003b3c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80038fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003902:	4b8b      	ldr	r3, [pc, #556]	@ (8003b30 <HAL_UART_IRQHandler+0x2b0>)
 8003904:	4013      	ands	r3, r2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800390a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800390e:	4b89      	ldr	r3, [pc, #548]	@ (8003b34 <HAL_UART_IRQHandler+0x2b4>)
 8003910:	4013      	ands	r3, r2
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8112 	beq.w	8003b3c <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d011      	beq.n	8003948 <HAL_UART_IRQHandler+0xc8>
 8003924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00b      	beq.n	8003948 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2201      	movs	r2, #1
 8003936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800393e:	f043 0201 	orr.w	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d011      	beq.n	8003978 <HAL_UART_IRQHandler+0xf8>
 8003954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00b      	beq.n	8003978 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2202      	movs	r2, #2
 8003966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800396e:	f043 0204 	orr.w	r2, r3, #4
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d011      	beq.n	80039a8 <HAL_UART_IRQHandler+0x128>
 8003984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00b      	beq.n	80039a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2204      	movs	r2, #4
 8003996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800399e:	f043 0202 	orr.w	r2, r3, #2
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d017      	beq.n	80039e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80039c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80039c4:	4b5a      	ldr	r3, [pc, #360]	@ (8003b30 <HAL_UART_IRQHandler+0x2b0>)
 80039c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00b      	beq.n	80039e4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2208      	movs	r2, #8
 80039d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039da:	f043 0208 	orr.w	r2, r3, #8
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d012      	beq.n	8003a16 <HAL_UART_IRQHandler+0x196>
 80039f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00c      	beq.n	8003a16 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a0c:	f043 0220 	orr.w	r2, r3, #32
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 823c 	beq.w	8003e9a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d013      	beq.n	8003a56 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d105      	bne.n	8003a46 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6a:	2b40      	cmp	r3, #64	@ 0x40
 8003a6c:	d005      	beq.n	8003a7a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a72:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d04f      	beq.n	8003b1a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 ff2a 	bl	80048d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8a:	2b40      	cmp	r3, #64	@ 0x40
 8003a8c:	d141      	bne.n	8003b12 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3308      	adds	r3, #8
 8003a94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a9c:	e853 3f00 	ldrex	r3, [r3]
 8003aa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003aa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003aba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003abe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ac6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1d9      	bne.n	8003a8e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d013      	beq.n	8003b0a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ae6:	4a14      	ldr	r2, [pc, #80]	@ (8003b38 <HAL_UART_IRQHandler+0x2b8>)
 8003ae8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fd fc6f 	bl	80013d2 <HAL_DMA_Abort_IT>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d017      	beq.n	8003b2a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8003b04:	4610      	mov	r0, r2
 8003b06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b08:	e00f      	b.n	8003b2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f9da 	bl	8003ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b10:	e00b      	b.n	8003b2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f9d6 	bl	8003ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b18:	e007      	b.n	8003b2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f9d2 	bl	8003ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8003b28:	e1b7      	b.n	8003e9a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2a:	bf00      	nop
    return;
 8003b2c:	e1b5      	b.n	8003e9a <HAL_UART_IRQHandler+0x61a>
 8003b2e:	bf00      	nop
 8003b30:	10000001 	.word	0x10000001
 8003b34:	04000120 	.word	0x04000120
 8003b38:	08004ad7 	.word	0x08004ad7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	f040 814a 	bne.w	8003dda <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 8143 	beq.w	8003dda <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 813c 	beq.w	8003dda <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2210      	movs	r2, #16
 8003b68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b74:	2b40      	cmp	r3, #64	@ 0x40
 8003b76:	f040 80b5 	bne.w	8003ce4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8187 	beq.w	8003e9e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003b96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	f080 817f 	bcs.w	8003e9e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ba6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f040 8086 	bne.w	8003cc8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003bd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003be6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003bea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003bf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1da      	bne.n	8003bbc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3308      	adds	r3, #8
 8003c26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e1      	bne.n	8003c06 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3308      	adds	r3, #8
 8003c48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3308      	adds	r3, #8
 8003c62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e3      	bne.n	8003c42 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c90:	e853 3f00 	ldrex	r3, [r3]
 8003c94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c98:	f023 0310 	bic.w	r3, r3, #16
 8003c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003caa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003cb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1e4      	bne.n	8003c88 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fd fb29 	bl	800131a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	4619      	mov	r1, r3
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f8fb 	bl	8003ed8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ce2:	e0dc      	b.n	8003e9e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80ce 	beq.w	8003ea2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8003d06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80c9 	beq.w	8003ea2 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d18:	e853 3f00 	ldrex	r3, [r3]
 8003d1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d32:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d34:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d3a:	e841 2300 	strex	r3, r2, [r1]
 8003d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e4      	bne.n	8003d10 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	623b      	str	r3, [r7, #32]
   return(result);
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3308      	adds	r3, #8
 8003d6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1e1      	bne.n	8003d46 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0310 	bic.w	r3, r3, #16
 8003daa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	69b9      	ldr	r1, [r7, #24]
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e4      	bne.n	8003d96 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f880 	bl	8003ed8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dd8:	e063      	b.n	8003ea2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00e      	beq.n	8003e04 <HAL_UART_IRQHandler+0x584>
 8003de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003dfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f001 f84d 	bl	8004e9c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e02:	e051      	b.n	8003ea8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d014      	beq.n	8003e3a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d03a      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	4798      	blx	r3
    }
    return;
 8003e38:	e035      	b.n	8003ea6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <HAL_UART_IRQHandler+0x5da>
 8003e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fff7 	bl	8004e46 <UART_EndTransmit_IT>
    return;
 8003e58:	e026      	b.n	8003ea8 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <HAL_UART_IRQHandler+0x5fa>
 8003e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e6a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f001 f826 	bl	8004ec4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e78:	e016      	b.n	8003ea8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d010      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x628>
 8003e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	da0c      	bge.n	8003ea8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f001 f80e 	bl	8004eb0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e94:	e008      	b.n	8003ea8 <HAL_UART_IRQHandler+0x628>
      return;
 8003e96:	bf00      	nop
 8003e98:	e006      	b.n	8003ea8 <HAL_UART_IRQHandler+0x628>
    return;
 8003e9a:	bf00      	nop
 8003e9c:	e004      	b.n	8003ea8 <HAL_UART_IRQHandler+0x628>
      return;
 8003e9e:	bf00      	nop
 8003ea0:	e002      	b.n	8003ea8 <HAL_UART_IRQHandler+0x628>
      return;
 8003ea2:	bf00      	nop
 8003ea4:	e000      	b.n	8003ea8 <HAL_UART_IRQHandler+0x628>
    return;
 8003ea6:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8003ea8:	37e8      	adds	r7, #232	@ 0xe8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop

08003eb0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef4:	b08c      	sub	sp, #48	@ 0x30
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4baa      	ldr	r3, [pc, #680]	@ (80041c8 <UART_SetConfig+0x2d8>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a9f      	ldr	r2, [pc, #636]	@ (80041cc <UART_SetConfig+0x2dc>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d004      	beq.n	8003f5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003f66:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	6812      	ldr	r2, [r2, #0]
 8003f6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7a:	f023 010f 	bic.w	r1, r3, #15
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a90      	ldr	r2, [pc, #576]	@ (80041d0 <UART_SetConfig+0x2e0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d125      	bne.n	8003fe0 <UART_SetConfig+0xf0>
 8003f94:	4b8f      	ldr	r3, [pc, #572]	@ (80041d4 <UART_SetConfig+0x2e4>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d81a      	bhi.n	8003fd8 <UART_SetConfig+0xe8>
 8003fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa8 <UART_SetConfig+0xb8>)
 8003fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa8:	08003fb9 	.word	0x08003fb9
 8003fac:	08003fc9 	.word	0x08003fc9
 8003fb0:	08003fc1 	.word	0x08003fc1
 8003fb4:	08003fd1 	.word	0x08003fd1
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fbe:	e116      	b.n	80041ee <UART_SetConfig+0x2fe>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fc6:	e112      	b.n	80041ee <UART_SetConfig+0x2fe>
 8003fc8:	2304      	movs	r3, #4
 8003fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fce:	e10e      	b.n	80041ee <UART_SetConfig+0x2fe>
 8003fd0:	2308      	movs	r3, #8
 8003fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fd6:	e10a      	b.n	80041ee <UART_SetConfig+0x2fe>
 8003fd8:	2310      	movs	r3, #16
 8003fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fde:	e106      	b.n	80041ee <UART_SetConfig+0x2fe>
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a7c      	ldr	r2, [pc, #496]	@ (80041d8 <UART_SetConfig+0x2e8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d138      	bne.n	800405c <UART_SetConfig+0x16c>
 8003fea:	4b7a      	ldr	r3, [pc, #488]	@ (80041d4 <UART_SetConfig+0x2e4>)
 8003fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff0:	f003 030c 	and.w	r3, r3, #12
 8003ff4:	2b0c      	cmp	r3, #12
 8003ff6:	d82d      	bhi.n	8004054 <UART_SetConfig+0x164>
 8003ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8004000 <UART_SetConfig+0x110>)
 8003ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffe:	bf00      	nop
 8004000:	08004035 	.word	0x08004035
 8004004:	08004055 	.word	0x08004055
 8004008:	08004055 	.word	0x08004055
 800400c:	08004055 	.word	0x08004055
 8004010:	08004045 	.word	0x08004045
 8004014:	08004055 	.word	0x08004055
 8004018:	08004055 	.word	0x08004055
 800401c:	08004055 	.word	0x08004055
 8004020:	0800403d 	.word	0x0800403d
 8004024:	08004055 	.word	0x08004055
 8004028:	08004055 	.word	0x08004055
 800402c:	08004055 	.word	0x08004055
 8004030:	0800404d 	.word	0x0800404d
 8004034:	2300      	movs	r3, #0
 8004036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800403a:	e0d8      	b.n	80041ee <UART_SetConfig+0x2fe>
 800403c:	2302      	movs	r3, #2
 800403e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004042:	e0d4      	b.n	80041ee <UART_SetConfig+0x2fe>
 8004044:	2304      	movs	r3, #4
 8004046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800404a:	e0d0      	b.n	80041ee <UART_SetConfig+0x2fe>
 800404c:	2308      	movs	r3, #8
 800404e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004052:	e0cc      	b.n	80041ee <UART_SetConfig+0x2fe>
 8004054:	2310      	movs	r3, #16
 8004056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800405a:	e0c8      	b.n	80041ee <UART_SetConfig+0x2fe>
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a5e      	ldr	r2, [pc, #376]	@ (80041dc <UART_SetConfig+0x2ec>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d125      	bne.n	80040b2 <UART_SetConfig+0x1c2>
 8004066:	4b5b      	ldr	r3, [pc, #364]	@ (80041d4 <UART_SetConfig+0x2e4>)
 8004068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004070:	2b30      	cmp	r3, #48	@ 0x30
 8004072:	d016      	beq.n	80040a2 <UART_SetConfig+0x1b2>
 8004074:	2b30      	cmp	r3, #48	@ 0x30
 8004076:	d818      	bhi.n	80040aa <UART_SetConfig+0x1ba>
 8004078:	2b20      	cmp	r3, #32
 800407a:	d00a      	beq.n	8004092 <UART_SetConfig+0x1a2>
 800407c:	2b20      	cmp	r3, #32
 800407e:	d814      	bhi.n	80040aa <UART_SetConfig+0x1ba>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <UART_SetConfig+0x19a>
 8004084:	2b10      	cmp	r3, #16
 8004086:	d008      	beq.n	800409a <UART_SetConfig+0x1aa>
 8004088:	e00f      	b.n	80040aa <UART_SetConfig+0x1ba>
 800408a:	2300      	movs	r3, #0
 800408c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004090:	e0ad      	b.n	80041ee <UART_SetConfig+0x2fe>
 8004092:	2302      	movs	r3, #2
 8004094:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004098:	e0a9      	b.n	80041ee <UART_SetConfig+0x2fe>
 800409a:	2304      	movs	r3, #4
 800409c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040a0:	e0a5      	b.n	80041ee <UART_SetConfig+0x2fe>
 80040a2:	2308      	movs	r3, #8
 80040a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040a8:	e0a1      	b.n	80041ee <UART_SetConfig+0x2fe>
 80040aa:	2310      	movs	r3, #16
 80040ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040b0:	e09d      	b.n	80041ee <UART_SetConfig+0x2fe>
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a4a      	ldr	r2, [pc, #296]	@ (80041e0 <UART_SetConfig+0x2f0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d125      	bne.n	8004108 <UART_SetConfig+0x218>
 80040bc:	4b45      	ldr	r3, [pc, #276]	@ (80041d4 <UART_SetConfig+0x2e4>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80040c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80040c8:	d016      	beq.n	80040f8 <UART_SetConfig+0x208>
 80040ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80040cc:	d818      	bhi.n	8004100 <UART_SetConfig+0x210>
 80040ce:	2b80      	cmp	r3, #128	@ 0x80
 80040d0:	d00a      	beq.n	80040e8 <UART_SetConfig+0x1f8>
 80040d2:	2b80      	cmp	r3, #128	@ 0x80
 80040d4:	d814      	bhi.n	8004100 <UART_SetConfig+0x210>
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <UART_SetConfig+0x1f0>
 80040da:	2b40      	cmp	r3, #64	@ 0x40
 80040dc:	d008      	beq.n	80040f0 <UART_SetConfig+0x200>
 80040de:	e00f      	b.n	8004100 <UART_SetConfig+0x210>
 80040e0:	2300      	movs	r3, #0
 80040e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040e6:	e082      	b.n	80041ee <UART_SetConfig+0x2fe>
 80040e8:	2302      	movs	r3, #2
 80040ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ee:	e07e      	b.n	80041ee <UART_SetConfig+0x2fe>
 80040f0:	2304      	movs	r3, #4
 80040f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040f6:	e07a      	b.n	80041ee <UART_SetConfig+0x2fe>
 80040f8:	2308      	movs	r3, #8
 80040fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040fe:	e076      	b.n	80041ee <UART_SetConfig+0x2fe>
 8004100:	2310      	movs	r3, #16
 8004102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004106:	e072      	b.n	80041ee <UART_SetConfig+0x2fe>
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a35      	ldr	r2, [pc, #212]	@ (80041e4 <UART_SetConfig+0x2f4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d12a      	bne.n	8004168 <UART_SetConfig+0x278>
 8004112:	4b30      	ldr	r3, [pc, #192]	@ (80041d4 <UART_SetConfig+0x2e4>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004118:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800411c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004120:	d01a      	beq.n	8004158 <UART_SetConfig+0x268>
 8004122:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004126:	d81b      	bhi.n	8004160 <UART_SetConfig+0x270>
 8004128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800412c:	d00c      	beq.n	8004148 <UART_SetConfig+0x258>
 800412e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004132:	d815      	bhi.n	8004160 <UART_SetConfig+0x270>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <UART_SetConfig+0x250>
 8004138:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800413c:	d008      	beq.n	8004150 <UART_SetConfig+0x260>
 800413e:	e00f      	b.n	8004160 <UART_SetConfig+0x270>
 8004140:	2300      	movs	r3, #0
 8004142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004146:	e052      	b.n	80041ee <UART_SetConfig+0x2fe>
 8004148:	2302      	movs	r3, #2
 800414a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800414e:	e04e      	b.n	80041ee <UART_SetConfig+0x2fe>
 8004150:	2304      	movs	r3, #4
 8004152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004156:	e04a      	b.n	80041ee <UART_SetConfig+0x2fe>
 8004158:	2308      	movs	r3, #8
 800415a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800415e:	e046      	b.n	80041ee <UART_SetConfig+0x2fe>
 8004160:	2310      	movs	r3, #16
 8004162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004166:	e042      	b.n	80041ee <UART_SetConfig+0x2fe>
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a17      	ldr	r2, [pc, #92]	@ (80041cc <UART_SetConfig+0x2dc>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d13a      	bne.n	80041e8 <UART_SetConfig+0x2f8>
 8004172:	4b18      	ldr	r3, [pc, #96]	@ (80041d4 <UART_SetConfig+0x2e4>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004178:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800417c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004180:	d01a      	beq.n	80041b8 <UART_SetConfig+0x2c8>
 8004182:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004186:	d81b      	bhi.n	80041c0 <UART_SetConfig+0x2d0>
 8004188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800418c:	d00c      	beq.n	80041a8 <UART_SetConfig+0x2b8>
 800418e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004192:	d815      	bhi.n	80041c0 <UART_SetConfig+0x2d0>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <UART_SetConfig+0x2b0>
 8004198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800419c:	d008      	beq.n	80041b0 <UART_SetConfig+0x2c0>
 800419e:	e00f      	b.n	80041c0 <UART_SetConfig+0x2d0>
 80041a0:	2300      	movs	r3, #0
 80041a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041a6:	e022      	b.n	80041ee <UART_SetConfig+0x2fe>
 80041a8:	2302      	movs	r3, #2
 80041aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ae:	e01e      	b.n	80041ee <UART_SetConfig+0x2fe>
 80041b0:	2304      	movs	r3, #4
 80041b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041b6:	e01a      	b.n	80041ee <UART_SetConfig+0x2fe>
 80041b8:	2308      	movs	r3, #8
 80041ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041be:	e016      	b.n	80041ee <UART_SetConfig+0x2fe>
 80041c0:	2310      	movs	r3, #16
 80041c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041c6:	e012      	b.n	80041ee <UART_SetConfig+0x2fe>
 80041c8:	cfff69f3 	.word	0xcfff69f3
 80041cc:	40008000 	.word	0x40008000
 80041d0:	40013800 	.word	0x40013800
 80041d4:	40021000 	.word	0x40021000
 80041d8:	40004400 	.word	0x40004400
 80041dc:	40004800 	.word	0x40004800
 80041e0:	40004c00 	.word	0x40004c00
 80041e4:	40005000 	.word	0x40005000
 80041e8:	2310      	movs	r3, #16
 80041ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4aae      	ldr	r2, [pc, #696]	@ (80044ac <UART_SetConfig+0x5bc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	f040 8097 	bne.w	8004328 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d823      	bhi.n	800424a <UART_SetConfig+0x35a>
 8004202:	a201      	add	r2, pc, #4	@ (adr r2, 8004208 <UART_SetConfig+0x318>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	0800422d 	.word	0x0800422d
 800420c:	0800424b 	.word	0x0800424b
 8004210:	08004235 	.word	0x08004235
 8004214:	0800424b 	.word	0x0800424b
 8004218:	0800423b 	.word	0x0800423b
 800421c:	0800424b 	.word	0x0800424b
 8004220:	0800424b 	.word	0x0800424b
 8004224:	0800424b 	.word	0x0800424b
 8004228:	08004243 	.word	0x08004243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800422c:	f7fe fb04 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 8004230:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004232:	e010      	b.n	8004256 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004234:	4b9e      	ldr	r3, [pc, #632]	@ (80044b0 <UART_SetConfig+0x5c0>)
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004238:	e00d      	b.n	8004256 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800423a:	f7fe fa65 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 800423e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004240:	e009      	b.n	8004256 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004242:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004246:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004248:	e005      	b.n	8004256 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800424a:	2300      	movs	r3, #0
 800424c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004254:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 8130 	beq.w	80044be <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	4a94      	ldr	r2, [pc, #592]	@ (80044b4 <UART_SetConfig+0x5c4>)
 8004264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004268:	461a      	mov	r2, r3
 800426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004270:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	4413      	add	r3, r2
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	429a      	cmp	r2, r3
 8004280:	d305      	bcc.n	800428e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	429a      	cmp	r2, r3
 800428c:	d903      	bls.n	8004296 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004294:	e113      	b.n	80044be <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	2200      	movs	r2, #0
 800429a:	60bb      	str	r3, [r7, #8]
 800429c:	60fa      	str	r2, [r7, #12]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a2:	4a84      	ldr	r2, [pc, #528]	@ (80044b4 <UART_SetConfig+0x5c4>)
 80042a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2200      	movs	r2, #0
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042b8:	f7fb fffa 	bl	80002b0 <__aeabi_uldivmod>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4610      	mov	r0, r2
 80042c2:	4619      	mov	r1, r3
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	020b      	lsls	r3, r1, #8
 80042ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80042d2:	0202      	lsls	r2, r0, #8
 80042d4:	6979      	ldr	r1, [r7, #20]
 80042d6:	6849      	ldr	r1, [r1, #4]
 80042d8:	0849      	lsrs	r1, r1, #1
 80042da:	2000      	movs	r0, #0
 80042dc:	460c      	mov	r4, r1
 80042de:	4605      	mov	r5, r0
 80042e0:	eb12 0804 	adds.w	r8, r2, r4
 80042e4:	eb43 0905 	adc.w	r9, r3, r5
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	469a      	mov	sl, r3
 80042f0:	4693      	mov	fp, r2
 80042f2:	4652      	mov	r2, sl
 80042f4:	465b      	mov	r3, fp
 80042f6:	4640      	mov	r0, r8
 80042f8:	4649      	mov	r1, r9
 80042fa:	f7fb ffd9 	bl	80002b0 <__aeabi_uldivmod>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4613      	mov	r3, r2
 8004304:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800430c:	d308      	bcc.n	8004320 <UART_SetConfig+0x430>
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004314:	d204      	bcs.n	8004320 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6a3a      	ldr	r2, [r7, #32]
 800431c:	60da      	str	r2, [r3, #12]
 800431e:	e0ce      	b.n	80044be <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004326:	e0ca      	b.n	80044be <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004330:	d166      	bne.n	8004400 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004332:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004336:	2b08      	cmp	r3, #8
 8004338:	d827      	bhi.n	800438a <UART_SetConfig+0x49a>
 800433a:	a201      	add	r2, pc, #4	@ (adr r2, 8004340 <UART_SetConfig+0x450>)
 800433c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004340:	08004365 	.word	0x08004365
 8004344:	0800436d 	.word	0x0800436d
 8004348:	08004375 	.word	0x08004375
 800434c:	0800438b 	.word	0x0800438b
 8004350:	0800437b 	.word	0x0800437b
 8004354:	0800438b 	.word	0x0800438b
 8004358:	0800438b 	.word	0x0800438b
 800435c:	0800438b 	.word	0x0800438b
 8004360:	08004383 	.word	0x08004383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004364:	f7fe fa68 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 8004368:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800436a:	e014      	b.n	8004396 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800436c:	f7fe fa7a 	bl	8002864 <HAL_RCC_GetPCLK2Freq>
 8004370:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004372:	e010      	b.n	8004396 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004374:	4b4e      	ldr	r3, [pc, #312]	@ (80044b0 <UART_SetConfig+0x5c0>)
 8004376:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004378:	e00d      	b.n	8004396 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800437a:	f7fe f9c5 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 800437e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004380:	e009      	b.n	8004396 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004386:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004388:	e005      	b.n	8004396 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8090 	beq.w	80044be <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	4a44      	ldr	r2, [pc, #272]	@ (80044b4 <UART_SetConfig+0x5c4>)
 80043a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043a8:	461a      	mov	r2, r3
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80043b0:	005a      	lsls	r2, r3, #1
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	085b      	lsrs	r3, r3, #1
 80043b8:	441a      	add	r2, r3
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	2b0f      	cmp	r3, #15
 80043c8:	d916      	bls.n	80043f8 <UART_SetConfig+0x508>
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043d0:	d212      	bcs.n	80043f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f023 030f 	bic.w	r3, r3, #15
 80043da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	085b      	lsrs	r3, r3, #1
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	8bfb      	ldrh	r3, [r7, #30]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	8bfa      	ldrh	r2, [r7, #30]
 80043f4:	60da      	str	r2, [r3, #12]
 80043f6:	e062      	b.n	80044be <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80043fe:	e05e      	b.n	80044be <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004400:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004404:	2b08      	cmp	r3, #8
 8004406:	d828      	bhi.n	800445a <UART_SetConfig+0x56a>
 8004408:	a201      	add	r2, pc, #4	@ (adr r2, 8004410 <UART_SetConfig+0x520>)
 800440a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440e:	bf00      	nop
 8004410:	08004435 	.word	0x08004435
 8004414:	0800443d 	.word	0x0800443d
 8004418:	08004445 	.word	0x08004445
 800441c:	0800445b 	.word	0x0800445b
 8004420:	0800444b 	.word	0x0800444b
 8004424:	0800445b 	.word	0x0800445b
 8004428:	0800445b 	.word	0x0800445b
 800442c:	0800445b 	.word	0x0800445b
 8004430:	08004453 	.word	0x08004453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004434:	f7fe fa00 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 8004438:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800443a:	e014      	b.n	8004466 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800443c:	f7fe fa12 	bl	8002864 <HAL_RCC_GetPCLK2Freq>
 8004440:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004442:	e010      	b.n	8004466 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004444:	4b1a      	ldr	r3, [pc, #104]	@ (80044b0 <UART_SetConfig+0x5c0>)
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004448:	e00d      	b.n	8004466 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800444a:	f7fe f95d 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 800444e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004450:	e009      	b.n	8004466 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004458:	e005      	b.n	8004466 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004464:	bf00      	nop
    }

    if (pclk != 0U)
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	2b00      	cmp	r3, #0
 800446a:	d028      	beq.n	80044be <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004470:	4a10      	ldr	r2, [pc, #64]	@ (80044b4 <UART_SetConfig+0x5c4>)
 8004472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004476:	461a      	mov	r2, r3
 8004478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447a:	fbb3 f2f2 	udiv	r2, r3, r2
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	085b      	lsrs	r3, r3, #1
 8004484:	441a      	add	r2, r3
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	fbb2 f3f3 	udiv	r3, r2, r3
 800448e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	2b0f      	cmp	r3, #15
 8004494:	d910      	bls.n	80044b8 <UART_SetConfig+0x5c8>
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800449c:	d20c      	bcs.n	80044b8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60da      	str	r2, [r3, #12]
 80044a8:	e009      	b.n	80044be <UART_SetConfig+0x5ce>
 80044aa:	bf00      	nop
 80044ac:	40008000 	.word	0x40008000
 80044b0:	00f42400 	.word	0x00f42400
 80044b4:	08005b5c 	.word	0x08005b5c
      }
      else
      {
        ret = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2200      	movs	r2, #0
 80044d2:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2200      	movs	r2, #0
 80044d8:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 80044da:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3730      	adds	r7, #48	@ 0x30
 80044e2:	46bd      	mov	sp, r7
 80044e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080044e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d01a      	beq.n	80045fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045e6:	d10a      	bne.n	80045fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	605a      	str	r2, [r3, #4]
  }
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af02      	add	r7, sp, #8
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800463c:	f7fc fc08 	bl	8000e50 <HAL_GetTick>
 8004640:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b08      	cmp	r3, #8
 800464e:	d10e      	bne.n	800466e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004650:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f82f 	bl	80046c2 <UART_WaitOnFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e025      	b.n	80046ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b04      	cmp	r3, #4
 800467a:	d10e      	bne.n	800469a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800467c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f819 	bl	80046c2 <UART_WaitOnFlagUntilTimeout>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e00f      	b.n	80046ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2220      	movs	r2, #32
 80046a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b09c      	sub	sp, #112	@ 0x70
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	4613      	mov	r3, r2
 80046d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d2:	e0a9      	b.n	8004828 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046da:	f000 80a5 	beq.w	8004828 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046de:	f7fc fbb7 	bl	8000e50 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d302      	bcc.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80046ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d140      	bne.n	8004776 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004704:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004708:	667b      	str	r3, [r7, #100]	@ 0x64
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004712:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004714:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004718:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e6      	bne.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3308      	adds	r3, #8
 800472c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004738:	f023 0301 	bic.w	r3, r3, #1
 800473c:	663b      	str	r3, [r7, #96]	@ 0x60
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3308      	adds	r3, #8
 8004744:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004746:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004748:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800474c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004754:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e5      	bne.n	8004726 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2220      	movs	r2, #32
 800475e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2220      	movs	r2, #32
 8004766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e069      	b.n	800484a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d051      	beq.n	8004828 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800478e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004792:	d149      	bne.n	8004828 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800479c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80047b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80047be:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80047c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047c4:	e841 2300 	strex	r3, r2, [r1]
 80047c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80047ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e6      	bne.n	800479e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3308      	adds	r3, #8
 80047d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	e853 3f00 	ldrex	r3, [r3]
 80047de:	613b      	str	r3, [r7, #16]
   return(result);
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f023 0301 	bic.w	r3, r3, #1
 80047e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3308      	adds	r3, #8
 80047ee:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80047f0:	623a      	str	r2, [r7, #32]
 80047f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f4:	69f9      	ldr	r1, [r7, #28]
 80047f6:	6a3a      	ldr	r2, [r7, #32]
 80047f8:	e841 2300 	strex	r3, r2, [r1]
 80047fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e5      	bne.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e010      	b.n	800484a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69da      	ldr	r2, [r3, #28]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	4013      	ands	r3, r2
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	429a      	cmp	r2, r3
 8004836:	bf0c      	ite	eq
 8004838:	2301      	moveq	r3, #1
 800483a:	2300      	movne	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	429a      	cmp	r2, r3
 8004844:	f43f af46 	beq.w	80046d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3770      	adds	r7, #112	@ 0x70
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004852:	b480      	push	{r7}
 8004854:	b08f      	sub	sp, #60	@ 0x3c
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	e853 3f00 	ldrex	r3, [r3]
 8004866:	61fb      	str	r3, [r7, #28]
   return(result);
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800486e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	461a      	mov	r2, r3
 8004876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800487a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800487e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004880:	e841 2300 	strex	r3, r2, [r1]
 8004884:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e6      	bne.n	800485a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3308      	adds	r3, #8
 8004892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	e853 3f00 	ldrex	r3, [r3]
 800489a:	60bb      	str	r3, [r7, #8]
   return(result);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80048a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3308      	adds	r3, #8
 80048aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ac:	61ba      	str	r2, [r7, #24]
 80048ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	6979      	ldr	r1, [r7, #20]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	613b      	str	r3, [r7, #16]
   return(result);
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e5      	bne.n	800488c <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 80048c8:	bf00      	nop
 80048ca:	373c      	adds	r7, #60	@ 0x3c
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b095      	sub	sp, #84	@ 0x54
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80048fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004900:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e6      	bne.n	80048dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3308      	adds	r3, #8
 8004914:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	61fb      	str	r3, [r7, #28]
   return(result);
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3308      	adds	r3, #8
 8004930:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004932:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004934:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e3      	bne.n	800490e <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800494a:	2b01      	cmp	r3, #1
 800494c:	d118      	bne.n	8004980 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	60bb      	str	r3, [r7, #8]
   return(result);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f023 0310 	bic.w	r3, r3, #16
 8004962:	647b      	str	r3, [r7, #68]	@ 0x44
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	6979      	ldr	r1, [r7, #20]
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	613b      	str	r3, [r7, #16]
   return(result);
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e6      	bne.n	800494e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8004994:	bf00      	nop
 8004996:	3754      	adds	r7, #84	@ 0x54
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b090      	sub	sp, #64	@ 0x40
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ac:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d137      	bne.n	8004a2c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80049bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049be:	2200      	movs	r2, #0
 80049c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3308      	adds	r3, #8
 80049ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ce:	e853 3f00 	ldrex	r3, [r3]
 80049d2:	623b      	str	r3, [r7, #32]
   return(result);
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3308      	adds	r3, #8
 80049e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80049e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049ec:	e841 2300 	strex	r3, r2, [r1]
 80049f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e5      	bne.n	80049c4 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a16:	61fb      	str	r3, [r7, #28]
 8004a18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	69b9      	ldr	r1, [r7, #24]
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	617b      	str	r3, [r7, #20]
   return(result);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e6      	bne.n	80049f8 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a2a:	e002      	b.n	8004a32 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004a2c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004a2e:	f7fb fdd5 	bl	80005dc <HAL_UART_TxCpltCallback>
}
 8004a32:	bf00      	nop
 8004a34:	3740      	adds	r7, #64	@ 0x40
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a46:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f7ff fa31 	bl	8003eb0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b086      	sub	sp, #24
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a62:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a6a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a7e:	2b80      	cmp	r3, #128	@ 0x80
 8004a80:	d109      	bne.n	8004a96 <UART_DMAError+0x40>
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b21      	cmp	r3, #33	@ 0x21
 8004a86:	d106      	bne.n	8004a96 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8004a90:	6978      	ldr	r0, [r7, #20]
 8004a92:	f7ff fede 	bl	8004852 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa0:	2b40      	cmp	r3, #64	@ 0x40
 8004aa2:	d109      	bne.n	8004ab8 <UART_DMAError+0x62>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b22      	cmp	r3, #34	@ 0x22
 8004aa8:	d106      	bne.n	8004ab8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8004ab2:	6978      	ldr	r0, [r7, #20]
 8004ab4:	f7ff ff0e 	bl	80048d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004abe:	f043 0210 	orr.w	r2, r3, #16
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ac8:	6978      	ldr	r0, [r7, #20]
 8004aca:	f7ff f9fb 	bl	8003ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ace:	bf00      	nop
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f7ff f9e5 	bl	8003ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004afa:	bf00      	nop
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b08f      	sub	sp, #60	@ 0x3c
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b10:	2b21      	cmp	r3, #33	@ 0x21
 8004b12:	d14c      	bne.n	8004bae <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d132      	bne.n	8004b86 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b40:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e6      	bne.n	8004b20 <UART_TxISR_8BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b66:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	6979      	ldr	r1, [r7, #20]
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e6      	bne.n	8004b52 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004b84:	e013      	b.n	8004bae <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b8a:	781a      	ldrb	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8004bae:	bf00      	nop
 8004bb0:	373c      	adds	r7, #60	@ 0x3c
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b091      	sub	sp, #68	@ 0x44
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bc8:	2b21      	cmp	r3, #33	@ 0x21
 8004bca:	d151      	bne.n	8004c70 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d132      	bne.n	8004c3e <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	623b      	str	r3, [r7, #32]
   return(result);
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e6      	bne.n	8004bd8 <UART_TxISR_16BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	461a      	mov	r2, r3
 8004c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	69b9      	ldr	r1, [r7, #24]
 8004c2e:	69fa      	ldr	r2, [r7, #28]
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	617b      	str	r3, [r7, #20]
   return(result);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e6      	bne.n	8004c0a <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004c3c:	e018      	b.n	8004c70 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c46:	881a      	ldrh	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c50:	b292      	uxth	r2, r2
 8004c52:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c58:	1c9a      	adds	r2, r3, #2
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3b01      	subs	r3, #1
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8004c70:	bf00      	nop
 8004c72:	3744      	adds	r7, #68	@ 0x44
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b091      	sub	sp, #68	@ 0x44
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c8a:	2b21      	cmp	r3, #33	@ 0x21
 8004c8c:	d160      	bne.n	8004d50 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004c94:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004c96:	e057      	b.n	8004d48 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d133      	bne.n	8004d0c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3308      	adds	r3, #8
 8004caa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	623b      	str	r3, [r7, #32]
   return(result);
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004cba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004cc4:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e5      	bne.n	8004ca4 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	69b9      	ldr	r1, [r7, #24]
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	617b      	str	r3, [r7, #20]
   return(result);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e6      	bne.n	8004cd8 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004d0a:	e021      	b.n	8004d50 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d013      	beq.n	8004d42 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d1e:	781a      	ldrb	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	851a      	strh	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004d42:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004d44:	3b01      	subs	r3, #1
 8004d46:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004d48:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1a4      	bne.n	8004c98 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004d4e:	e7ff      	b.n	8004d50 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8004d50:	bf00      	nop
 8004d52:	3744      	adds	r7, #68	@ 0x44
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b091      	sub	sp, #68	@ 0x44
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d6a:	2b21      	cmp	r3, #33	@ 0x21
 8004d6c:	d165      	bne.n	8004e3a <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004d74:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004d76:	e05c      	b.n	8004e32 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d133      	bne.n	8004dec <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3308      	adds	r3, #8
 8004da2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004da4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004da6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004daa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e5      	bne.n	8004d84 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	e853 3f00 	ldrex	r3, [r3]
 8004dc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dda:	6979      	ldr	r1, [r7, #20]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	613b      	str	r3, [r7, #16]
   return(result);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1e6      	bne.n	8004db8 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004dea:	e026      	b.n	8004e3a <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d018      	beq.n	8004e2c <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e02:	881a      	ldrh	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e0c:	b292      	uxth	r2, r2
 8004e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e14:	1c9a      	adds	r2, r3, #2
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004e2c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004e32:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d19f      	bne.n	8004d78 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004e38:	e7ff      	b.n	8004e3a <UART_TxISR_16BIT_FIFOEN+0xde>
 8004e3a:	bf00      	nop
 8004e3c:	3744      	adds	r7, #68	@ 0x44
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b088      	sub	sp, #32
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	61bb      	str	r3, [r7, #24]
 8004e6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	6979      	ldr	r1, [r7, #20]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	613b      	str	r3, [r7, #16]
   return(result);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e6      	bne.n	8004e4e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fb fba4 	bl	80005dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e94:	bf00      	nop
 8004e96:	3720      	adds	r7, #32
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d101      	bne.n	8004eee <HAL_UARTEx_DisableFifoMode+0x16>
 8004eea:	2302      	movs	r3, #2
 8004eec:	e027      	b.n	8004f3e <HAL_UARTEx_DisableFifoMode+0x66>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2224      	movs	r2, #36	@ 0x24
 8004efa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0201 	bic.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004f1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e02d      	b.n	8004fbe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2224      	movs	r2, #36	@ 0x24
 8004f6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0201 	bic.w	r2, r2, #1
 8004f88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f850 	bl	8005044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d101      	bne.n	8004fde <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	e02d      	b.n	800503a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2224      	movs	r2, #36	@ 0x24
 8004fea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0201 	bic.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f812 	bl	8005044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2220      	movs	r2, #32
 800502c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005050:	2b00      	cmp	r3, #0
 8005052:	d108      	bne.n	8005066 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005064:	e031      	b.n	80050ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005066:	2308      	movs	r3, #8
 8005068:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800506a:	2308      	movs	r3, #8
 800506c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	0e5b      	lsrs	r3, r3, #25
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	0f5b      	lsrs	r3, r3, #29
 8005086:	b2db      	uxtb	r3, r3
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800508e:	7bbb      	ldrb	r3, [r7, #14]
 8005090:	7b3a      	ldrb	r2, [r7, #12]
 8005092:	4911      	ldr	r1, [pc, #68]	@ (80050d8 <UARTEx_SetNbDataToProcess+0x94>)
 8005094:	5c8a      	ldrb	r2, [r1, r2]
 8005096:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800509a:	7b3a      	ldrb	r2, [r7, #12]
 800509c:	490f      	ldr	r1, [pc, #60]	@ (80050dc <UARTEx_SetNbDataToProcess+0x98>)
 800509e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	7b7a      	ldrb	r2, [r7, #13]
 80050b0:	4909      	ldr	r1, [pc, #36]	@ (80050d8 <UARTEx_SetNbDataToProcess+0x94>)
 80050b2:	5c8a      	ldrb	r2, [r1, r2]
 80050b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80050b8:	7b7a      	ldrb	r2, [r7, #13]
 80050ba:	4908      	ldr	r1, [pc, #32]	@ (80050dc <UARTEx_SetNbDataToProcess+0x98>)
 80050bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050be:	fb93 f3f2 	sdiv	r3, r3, r2
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80050ca:	bf00      	nop
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	08005b74 	.word	0x08005b74
 80050dc:	08005b7c 	.word	0x08005b7c

080050e0 <siprintf>:
 80050e0:	b40e      	push	{r1, r2, r3}
 80050e2:	b510      	push	{r4, lr}
 80050e4:	b09d      	sub	sp, #116	@ 0x74
 80050e6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80050e8:	9002      	str	r0, [sp, #8]
 80050ea:	9006      	str	r0, [sp, #24]
 80050ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80050f0:	480a      	ldr	r0, [pc, #40]	@ (800511c <siprintf+0x3c>)
 80050f2:	9107      	str	r1, [sp, #28]
 80050f4:	9104      	str	r1, [sp, #16]
 80050f6:	490a      	ldr	r1, [pc, #40]	@ (8005120 <siprintf+0x40>)
 80050f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80050fc:	9105      	str	r1, [sp, #20]
 80050fe:	2400      	movs	r4, #0
 8005100:	a902      	add	r1, sp, #8
 8005102:	6800      	ldr	r0, [r0, #0]
 8005104:	9301      	str	r3, [sp, #4]
 8005106:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005108:	f000 f8aa 	bl	8005260 <_svfiprintf_r>
 800510c:	9b02      	ldr	r3, [sp, #8]
 800510e:	701c      	strb	r4, [r3, #0]
 8005110:	b01d      	add	sp, #116	@ 0x74
 8005112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005116:	b003      	add	sp, #12
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	2000000c 	.word	0x2000000c
 8005120:	ffff0208 	.word	0xffff0208

08005124 <memset>:
 8005124:	4402      	add	r2, r0
 8005126:	4603      	mov	r3, r0
 8005128:	4293      	cmp	r3, r2
 800512a:	d100      	bne.n	800512e <memset+0xa>
 800512c:	4770      	bx	lr
 800512e:	f803 1b01 	strb.w	r1, [r3], #1
 8005132:	e7f9      	b.n	8005128 <memset+0x4>

08005134 <__errno>:
 8005134:	4b01      	ldr	r3, [pc, #4]	@ (800513c <__errno+0x8>)
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	2000000c 	.word	0x2000000c

08005140 <__libc_init_array>:
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	4d0d      	ldr	r5, [pc, #52]	@ (8005178 <__libc_init_array+0x38>)
 8005144:	4c0d      	ldr	r4, [pc, #52]	@ (800517c <__libc_init_array+0x3c>)
 8005146:	1b64      	subs	r4, r4, r5
 8005148:	10a4      	asrs	r4, r4, #2
 800514a:	2600      	movs	r6, #0
 800514c:	42a6      	cmp	r6, r4
 800514e:	d109      	bne.n	8005164 <__libc_init_array+0x24>
 8005150:	4d0b      	ldr	r5, [pc, #44]	@ (8005180 <__libc_init_array+0x40>)
 8005152:	4c0c      	ldr	r4, [pc, #48]	@ (8005184 <__libc_init_array+0x44>)
 8005154:	f000 fc64 	bl	8005a20 <_init>
 8005158:	1b64      	subs	r4, r4, r5
 800515a:	10a4      	asrs	r4, r4, #2
 800515c:	2600      	movs	r6, #0
 800515e:	42a6      	cmp	r6, r4
 8005160:	d105      	bne.n	800516e <__libc_init_array+0x2e>
 8005162:	bd70      	pop	{r4, r5, r6, pc}
 8005164:	f855 3b04 	ldr.w	r3, [r5], #4
 8005168:	4798      	blx	r3
 800516a:	3601      	adds	r6, #1
 800516c:	e7ee      	b.n	800514c <__libc_init_array+0xc>
 800516e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005172:	4798      	blx	r3
 8005174:	3601      	adds	r6, #1
 8005176:	e7f2      	b.n	800515e <__libc_init_array+0x1e>
 8005178:	08005bc0 	.word	0x08005bc0
 800517c:	08005bc0 	.word	0x08005bc0
 8005180:	08005bc0 	.word	0x08005bc0
 8005184:	08005bc4 	.word	0x08005bc4

08005188 <__retarget_lock_acquire_recursive>:
 8005188:	4770      	bx	lr

0800518a <__retarget_lock_release_recursive>:
 800518a:	4770      	bx	lr

0800518c <memcpy>:
 800518c:	440a      	add	r2, r1
 800518e:	4291      	cmp	r1, r2
 8005190:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005194:	d100      	bne.n	8005198 <memcpy+0xc>
 8005196:	4770      	bx	lr
 8005198:	b510      	push	{r4, lr}
 800519a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800519e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051a2:	4291      	cmp	r1, r2
 80051a4:	d1f9      	bne.n	800519a <memcpy+0xe>
 80051a6:	bd10      	pop	{r4, pc}

080051a8 <__ssputs_r>:
 80051a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ac:	688e      	ldr	r6, [r1, #8]
 80051ae:	461f      	mov	r7, r3
 80051b0:	42be      	cmp	r6, r7
 80051b2:	680b      	ldr	r3, [r1, #0]
 80051b4:	4682      	mov	sl, r0
 80051b6:	460c      	mov	r4, r1
 80051b8:	4690      	mov	r8, r2
 80051ba:	d82d      	bhi.n	8005218 <__ssputs_r+0x70>
 80051bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80051c4:	d026      	beq.n	8005214 <__ssputs_r+0x6c>
 80051c6:	6965      	ldr	r5, [r4, #20]
 80051c8:	6909      	ldr	r1, [r1, #16]
 80051ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051ce:	eba3 0901 	sub.w	r9, r3, r1
 80051d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051d6:	1c7b      	adds	r3, r7, #1
 80051d8:	444b      	add	r3, r9
 80051da:	106d      	asrs	r5, r5, #1
 80051dc:	429d      	cmp	r5, r3
 80051de:	bf38      	it	cc
 80051e0:	461d      	movcc	r5, r3
 80051e2:	0553      	lsls	r3, r2, #21
 80051e4:	d527      	bpl.n	8005236 <__ssputs_r+0x8e>
 80051e6:	4629      	mov	r1, r5
 80051e8:	f000 f958 	bl	800549c <_malloc_r>
 80051ec:	4606      	mov	r6, r0
 80051ee:	b360      	cbz	r0, 800524a <__ssputs_r+0xa2>
 80051f0:	6921      	ldr	r1, [r4, #16]
 80051f2:	464a      	mov	r2, r9
 80051f4:	f7ff ffca 	bl	800518c <memcpy>
 80051f8:	89a3      	ldrh	r3, [r4, #12]
 80051fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80051fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005202:	81a3      	strh	r3, [r4, #12]
 8005204:	6126      	str	r6, [r4, #16]
 8005206:	6165      	str	r5, [r4, #20]
 8005208:	444e      	add	r6, r9
 800520a:	eba5 0509 	sub.w	r5, r5, r9
 800520e:	6026      	str	r6, [r4, #0]
 8005210:	60a5      	str	r5, [r4, #8]
 8005212:	463e      	mov	r6, r7
 8005214:	42be      	cmp	r6, r7
 8005216:	d900      	bls.n	800521a <__ssputs_r+0x72>
 8005218:	463e      	mov	r6, r7
 800521a:	6820      	ldr	r0, [r4, #0]
 800521c:	4632      	mov	r2, r6
 800521e:	4641      	mov	r1, r8
 8005220:	f000 fb82 	bl	8005928 <memmove>
 8005224:	68a3      	ldr	r3, [r4, #8]
 8005226:	1b9b      	subs	r3, r3, r6
 8005228:	60a3      	str	r3, [r4, #8]
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	4433      	add	r3, r6
 800522e:	6023      	str	r3, [r4, #0]
 8005230:	2000      	movs	r0, #0
 8005232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005236:	462a      	mov	r2, r5
 8005238:	f000 fb48 	bl	80058cc <_realloc_r>
 800523c:	4606      	mov	r6, r0
 800523e:	2800      	cmp	r0, #0
 8005240:	d1e0      	bne.n	8005204 <__ssputs_r+0x5c>
 8005242:	6921      	ldr	r1, [r4, #16]
 8005244:	4650      	mov	r0, sl
 8005246:	f000 fb99 	bl	800597c <_free_r>
 800524a:	230c      	movs	r3, #12
 800524c:	f8ca 3000 	str.w	r3, [sl]
 8005250:	89a3      	ldrh	r3, [r4, #12]
 8005252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005256:	81a3      	strh	r3, [r4, #12]
 8005258:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800525c:	e7e9      	b.n	8005232 <__ssputs_r+0x8a>
	...

08005260 <_svfiprintf_r>:
 8005260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005264:	4698      	mov	r8, r3
 8005266:	898b      	ldrh	r3, [r1, #12]
 8005268:	061b      	lsls	r3, r3, #24
 800526a:	b09d      	sub	sp, #116	@ 0x74
 800526c:	4607      	mov	r7, r0
 800526e:	460d      	mov	r5, r1
 8005270:	4614      	mov	r4, r2
 8005272:	d510      	bpl.n	8005296 <_svfiprintf_r+0x36>
 8005274:	690b      	ldr	r3, [r1, #16]
 8005276:	b973      	cbnz	r3, 8005296 <_svfiprintf_r+0x36>
 8005278:	2140      	movs	r1, #64	@ 0x40
 800527a:	f000 f90f 	bl	800549c <_malloc_r>
 800527e:	6028      	str	r0, [r5, #0]
 8005280:	6128      	str	r0, [r5, #16]
 8005282:	b930      	cbnz	r0, 8005292 <_svfiprintf_r+0x32>
 8005284:	230c      	movs	r3, #12
 8005286:	603b      	str	r3, [r7, #0]
 8005288:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800528c:	b01d      	add	sp, #116	@ 0x74
 800528e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005292:	2340      	movs	r3, #64	@ 0x40
 8005294:	616b      	str	r3, [r5, #20]
 8005296:	2300      	movs	r3, #0
 8005298:	9309      	str	r3, [sp, #36]	@ 0x24
 800529a:	2320      	movs	r3, #32
 800529c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80052a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80052a4:	2330      	movs	r3, #48	@ 0x30
 80052a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005444 <_svfiprintf_r+0x1e4>
 80052aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80052ae:	f04f 0901 	mov.w	r9, #1
 80052b2:	4623      	mov	r3, r4
 80052b4:	469a      	mov	sl, r3
 80052b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052ba:	b10a      	cbz	r2, 80052c0 <_svfiprintf_r+0x60>
 80052bc:	2a25      	cmp	r2, #37	@ 0x25
 80052be:	d1f9      	bne.n	80052b4 <_svfiprintf_r+0x54>
 80052c0:	ebba 0b04 	subs.w	fp, sl, r4
 80052c4:	d00b      	beq.n	80052de <_svfiprintf_r+0x7e>
 80052c6:	465b      	mov	r3, fp
 80052c8:	4622      	mov	r2, r4
 80052ca:	4629      	mov	r1, r5
 80052cc:	4638      	mov	r0, r7
 80052ce:	f7ff ff6b 	bl	80051a8 <__ssputs_r>
 80052d2:	3001      	adds	r0, #1
 80052d4:	f000 80a7 	beq.w	8005426 <_svfiprintf_r+0x1c6>
 80052d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052da:	445a      	add	r2, fp
 80052dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80052de:	f89a 3000 	ldrb.w	r3, [sl]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 809f 	beq.w	8005426 <_svfiprintf_r+0x1c6>
 80052e8:	2300      	movs	r3, #0
 80052ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052f2:	f10a 0a01 	add.w	sl, sl, #1
 80052f6:	9304      	str	r3, [sp, #16]
 80052f8:	9307      	str	r3, [sp, #28]
 80052fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8005300:	4654      	mov	r4, sl
 8005302:	2205      	movs	r2, #5
 8005304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005308:	484e      	ldr	r0, [pc, #312]	@ (8005444 <_svfiprintf_r+0x1e4>)
 800530a:	f7fa ff81 	bl	8000210 <memchr>
 800530e:	9a04      	ldr	r2, [sp, #16]
 8005310:	b9d8      	cbnz	r0, 800534a <_svfiprintf_r+0xea>
 8005312:	06d0      	lsls	r0, r2, #27
 8005314:	bf44      	itt	mi
 8005316:	2320      	movmi	r3, #32
 8005318:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800531c:	0711      	lsls	r1, r2, #28
 800531e:	bf44      	itt	mi
 8005320:	232b      	movmi	r3, #43	@ 0x2b
 8005322:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005326:	f89a 3000 	ldrb.w	r3, [sl]
 800532a:	2b2a      	cmp	r3, #42	@ 0x2a
 800532c:	d015      	beq.n	800535a <_svfiprintf_r+0xfa>
 800532e:	9a07      	ldr	r2, [sp, #28]
 8005330:	4654      	mov	r4, sl
 8005332:	2000      	movs	r0, #0
 8005334:	f04f 0c0a 	mov.w	ip, #10
 8005338:	4621      	mov	r1, r4
 800533a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800533e:	3b30      	subs	r3, #48	@ 0x30
 8005340:	2b09      	cmp	r3, #9
 8005342:	d94b      	bls.n	80053dc <_svfiprintf_r+0x17c>
 8005344:	b1b0      	cbz	r0, 8005374 <_svfiprintf_r+0x114>
 8005346:	9207      	str	r2, [sp, #28]
 8005348:	e014      	b.n	8005374 <_svfiprintf_r+0x114>
 800534a:	eba0 0308 	sub.w	r3, r0, r8
 800534e:	fa09 f303 	lsl.w	r3, r9, r3
 8005352:	4313      	orrs	r3, r2
 8005354:	9304      	str	r3, [sp, #16]
 8005356:	46a2      	mov	sl, r4
 8005358:	e7d2      	b.n	8005300 <_svfiprintf_r+0xa0>
 800535a:	9b03      	ldr	r3, [sp, #12]
 800535c:	1d19      	adds	r1, r3, #4
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	9103      	str	r1, [sp, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	bfbb      	ittet	lt
 8005366:	425b      	neglt	r3, r3
 8005368:	f042 0202 	orrlt.w	r2, r2, #2
 800536c:	9307      	strge	r3, [sp, #28]
 800536e:	9307      	strlt	r3, [sp, #28]
 8005370:	bfb8      	it	lt
 8005372:	9204      	strlt	r2, [sp, #16]
 8005374:	7823      	ldrb	r3, [r4, #0]
 8005376:	2b2e      	cmp	r3, #46	@ 0x2e
 8005378:	d10a      	bne.n	8005390 <_svfiprintf_r+0x130>
 800537a:	7863      	ldrb	r3, [r4, #1]
 800537c:	2b2a      	cmp	r3, #42	@ 0x2a
 800537e:	d132      	bne.n	80053e6 <_svfiprintf_r+0x186>
 8005380:	9b03      	ldr	r3, [sp, #12]
 8005382:	1d1a      	adds	r2, r3, #4
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	9203      	str	r2, [sp, #12]
 8005388:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800538c:	3402      	adds	r4, #2
 800538e:	9305      	str	r3, [sp, #20]
 8005390:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005454 <_svfiprintf_r+0x1f4>
 8005394:	7821      	ldrb	r1, [r4, #0]
 8005396:	2203      	movs	r2, #3
 8005398:	4650      	mov	r0, sl
 800539a:	f7fa ff39 	bl	8000210 <memchr>
 800539e:	b138      	cbz	r0, 80053b0 <_svfiprintf_r+0x150>
 80053a0:	9b04      	ldr	r3, [sp, #16]
 80053a2:	eba0 000a 	sub.w	r0, r0, sl
 80053a6:	2240      	movs	r2, #64	@ 0x40
 80053a8:	4082      	lsls	r2, r0
 80053aa:	4313      	orrs	r3, r2
 80053ac:	3401      	adds	r4, #1
 80053ae:	9304      	str	r3, [sp, #16]
 80053b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053b4:	4824      	ldr	r0, [pc, #144]	@ (8005448 <_svfiprintf_r+0x1e8>)
 80053b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80053ba:	2206      	movs	r2, #6
 80053bc:	f7fa ff28 	bl	8000210 <memchr>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d036      	beq.n	8005432 <_svfiprintf_r+0x1d2>
 80053c4:	4b21      	ldr	r3, [pc, #132]	@ (800544c <_svfiprintf_r+0x1ec>)
 80053c6:	bb1b      	cbnz	r3, 8005410 <_svfiprintf_r+0x1b0>
 80053c8:	9b03      	ldr	r3, [sp, #12]
 80053ca:	3307      	adds	r3, #7
 80053cc:	f023 0307 	bic.w	r3, r3, #7
 80053d0:	3308      	adds	r3, #8
 80053d2:	9303      	str	r3, [sp, #12]
 80053d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053d6:	4433      	add	r3, r6
 80053d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80053da:	e76a      	b.n	80052b2 <_svfiprintf_r+0x52>
 80053dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80053e0:	460c      	mov	r4, r1
 80053e2:	2001      	movs	r0, #1
 80053e4:	e7a8      	b.n	8005338 <_svfiprintf_r+0xd8>
 80053e6:	2300      	movs	r3, #0
 80053e8:	3401      	adds	r4, #1
 80053ea:	9305      	str	r3, [sp, #20]
 80053ec:	4619      	mov	r1, r3
 80053ee:	f04f 0c0a 	mov.w	ip, #10
 80053f2:	4620      	mov	r0, r4
 80053f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053f8:	3a30      	subs	r2, #48	@ 0x30
 80053fa:	2a09      	cmp	r2, #9
 80053fc:	d903      	bls.n	8005406 <_svfiprintf_r+0x1a6>
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0c6      	beq.n	8005390 <_svfiprintf_r+0x130>
 8005402:	9105      	str	r1, [sp, #20]
 8005404:	e7c4      	b.n	8005390 <_svfiprintf_r+0x130>
 8005406:	fb0c 2101 	mla	r1, ip, r1, r2
 800540a:	4604      	mov	r4, r0
 800540c:	2301      	movs	r3, #1
 800540e:	e7f0      	b.n	80053f2 <_svfiprintf_r+0x192>
 8005410:	ab03      	add	r3, sp, #12
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	462a      	mov	r2, r5
 8005416:	4b0e      	ldr	r3, [pc, #56]	@ (8005450 <_svfiprintf_r+0x1f0>)
 8005418:	a904      	add	r1, sp, #16
 800541a:	4638      	mov	r0, r7
 800541c:	f3af 8000 	nop.w
 8005420:	1c42      	adds	r2, r0, #1
 8005422:	4606      	mov	r6, r0
 8005424:	d1d6      	bne.n	80053d4 <_svfiprintf_r+0x174>
 8005426:	89ab      	ldrh	r3, [r5, #12]
 8005428:	065b      	lsls	r3, r3, #25
 800542a:	f53f af2d 	bmi.w	8005288 <_svfiprintf_r+0x28>
 800542e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005430:	e72c      	b.n	800528c <_svfiprintf_r+0x2c>
 8005432:	ab03      	add	r3, sp, #12
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	462a      	mov	r2, r5
 8005438:	4b05      	ldr	r3, [pc, #20]	@ (8005450 <_svfiprintf_r+0x1f0>)
 800543a:	a904      	add	r1, sp, #16
 800543c:	4638      	mov	r0, r7
 800543e:	f000 f91b 	bl	8005678 <_printf_i>
 8005442:	e7ed      	b.n	8005420 <_svfiprintf_r+0x1c0>
 8005444:	08005b84 	.word	0x08005b84
 8005448:	08005b8e 	.word	0x08005b8e
 800544c:	00000000 	.word	0x00000000
 8005450:	080051a9 	.word	0x080051a9
 8005454:	08005b8a 	.word	0x08005b8a

08005458 <sbrk_aligned>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	4e0f      	ldr	r6, [pc, #60]	@ (8005498 <sbrk_aligned+0x40>)
 800545c:	460c      	mov	r4, r1
 800545e:	6831      	ldr	r1, [r6, #0]
 8005460:	4605      	mov	r5, r0
 8005462:	b911      	cbnz	r1, 800546a <sbrk_aligned+0x12>
 8005464:	f000 fa7a 	bl	800595c <_sbrk_r>
 8005468:	6030      	str	r0, [r6, #0]
 800546a:	4621      	mov	r1, r4
 800546c:	4628      	mov	r0, r5
 800546e:	f000 fa75 	bl	800595c <_sbrk_r>
 8005472:	1c43      	adds	r3, r0, #1
 8005474:	d103      	bne.n	800547e <sbrk_aligned+0x26>
 8005476:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800547a:	4620      	mov	r0, r4
 800547c:	bd70      	pop	{r4, r5, r6, pc}
 800547e:	1cc4      	adds	r4, r0, #3
 8005480:	f024 0403 	bic.w	r4, r4, #3
 8005484:	42a0      	cmp	r0, r4
 8005486:	d0f8      	beq.n	800547a <sbrk_aligned+0x22>
 8005488:	1a21      	subs	r1, r4, r0
 800548a:	4628      	mov	r0, r5
 800548c:	f000 fa66 	bl	800595c <_sbrk_r>
 8005490:	3001      	adds	r0, #1
 8005492:	d1f2      	bne.n	800547a <sbrk_aligned+0x22>
 8005494:	e7ef      	b.n	8005476 <sbrk_aligned+0x1e>
 8005496:	bf00      	nop
 8005498:	20000440 	.word	0x20000440

0800549c <_malloc_r>:
 800549c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054a0:	1ccd      	adds	r5, r1, #3
 80054a2:	f025 0503 	bic.w	r5, r5, #3
 80054a6:	3508      	adds	r5, #8
 80054a8:	2d0c      	cmp	r5, #12
 80054aa:	bf38      	it	cc
 80054ac:	250c      	movcc	r5, #12
 80054ae:	2d00      	cmp	r5, #0
 80054b0:	4606      	mov	r6, r0
 80054b2:	db01      	blt.n	80054b8 <_malloc_r+0x1c>
 80054b4:	42a9      	cmp	r1, r5
 80054b6:	d904      	bls.n	80054c2 <_malloc_r+0x26>
 80054b8:	230c      	movs	r3, #12
 80054ba:	6033      	str	r3, [r6, #0]
 80054bc:	2000      	movs	r0, #0
 80054be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005598 <_malloc_r+0xfc>
 80054c6:	f000 f9f5 	bl	80058b4 <__malloc_lock>
 80054ca:	f8d8 3000 	ldr.w	r3, [r8]
 80054ce:	461c      	mov	r4, r3
 80054d0:	bb44      	cbnz	r4, 8005524 <_malloc_r+0x88>
 80054d2:	4629      	mov	r1, r5
 80054d4:	4630      	mov	r0, r6
 80054d6:	f7ff ffbf 	bl	8005458 <sbrk_aligned>
 80054da:	1c43      	adds	r3, r0, #1
 80054dc:	4604      	mov	r4, r0
 80054de:	d158      	bne.n	8005592 <_malloc_r+0xf6>
 80054e0:	f8d8 4000 	ldr.w	r4, [r8]
 80054e4:	4627      	mov	r7, r4
 80054e6:	2f00      	cmp	r7, #0
 80054e8:	d143      	bne.n	8005572 <_malloc_r+0xd6>
 80054ea:	2c00      	cmp	r4, #0
 80054ec:	d04b      	beq.n	8005586 <_malloc_r+0xea>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	4639      	mov	r1, r7
 80054f2:	4630      	mov	r0, r6
 80054f4:	eb04 0903 	add.w	r9, r4, r3
 80054f8:	f000 fa30 	bl	800595c <_sbrk_r>
 80054fc:	4581      	cmp	r9, r0
 80054fe:	d142      	bne.n	8005586 <_malloc_r+0xea>
 8005500:	6821      	ldr	r1, [r4, #0]
 8005502:	1a6d      	subs	r5, r5, r1
 8005504:	4629      	mov	r1, r5
 8005506:	4630      	mov	r0, r6
 8005508:	f7ff ffa6 	bl	8005458 <sbrk_aligned>
 800550c:	3001      	adds	r0, #1
 800550e:	d03a      	beq.n	8005586 <_malloc_r+0xea>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	442b      	add	r3, r5
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	f8d8 3000 	ldr.w	r3, [r8]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	bb62      	cbnz	r2, 8005578 <_malloc_r+0xdc>
 800551e:	f8c8 7000 	str.w	r7, [r8]
 8005522:	e00f      	b.n	8005544 <_malloc_r+0xa8>
 8005524:	6822      	ldr	r2, [r4, #0]
 8005526:	1b52      	subs	r2, r2, r5
 8005528:	d420      	bmi.n	800556c <_malloc_r+0xd0>
 800552a:	2a0b      	cmp	r2, #11
 800552c:	d917      	bls.n	800555e <_malloc_r+0xc2>
 800552e:	1961      	adds	r1, r4, r5
 8005530:	42a3      	cmp	r3, r4
 8005532:	6025      	str	r5, [r4, #0]
 8005534:	bf18      	it	ne
 8005536:	6059      	strne	r1, [r3, #4]
 8005538:	6863      	ldr	r3, [r4, #4]
 800553a:	bf08      	it	eq
 800553c:	f8c8 1000 	streq.w	r1, [r8]
 8005540:	5162      	str	r2, [r4, r5]
 8005542:	604b      	str	r3, [r1, #4]
 8005544:	4630      	mov	r0, r6
 8005546:	f000 f9bb 	bl	80058c0 <__malloc_unlock>
 800554a:	f104 000b 	add.w	r0, r4, #11
 800554e:	1d23      	adds	r3, r4, #4
 8005550:	f020 0007 	bic.w	r0, r0, #7
 8005554:	1ac2      	subs	r2, r0, r3
 8005556:	bf1c      	itt	ne
 8005558:	1a1b      	subne	r3, r3, r0
 800555a:	50a3      	strne	r3, [r4, r2]
 800555c:	e7af      	b.n	80054be <_malloc_r+0x22>
 800555e:	6862      	ldr	r2, [r4, #4]
 8005560:	42a3      	cmp	r3, r4
 8005562:	bf0c      	ite	eq
 8005564:	f8c8 2000 	streq.w	r2, [r8]
 8005568:	605a      	strne	r2, [r3, #4]
 800556a:	e7eb      	b.n	8005544 <_malloc_r+0xa8>
 800556c:	4623      	mov	r3, r4
 800556e:	6864      	ldr	r4, [r4, #4]
 8005570:	e7ae      	b.n	80054d0 <_malloc_r+0x34>
 8005572:	463c      	mov	r4, r7
 8005574:	687f      	ldr	r7, [r7, #4]
 8005576:	e7b6      	b.n	80054e6 <_malloc_r+0x4a>
 8005578:	461a      	mov	r2, r3
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	42a3      	cmp	r3, r4
 800557e:	d1fb      	bne.n	8005578 <_malloc_r+0xdc>
 8005580:	2300      	movs	r3, #0
 8005582:	6053      	str	r3, [r2, #4]
 8005584:	e7de      	b.n	8005544 <_malloc_r+0xa8>
 8005586:	230c      	movs	r3, #12
 8005588:	6033      	str	r3, [r6, #0]
 800558a:	4630      	mov	r0, r6
 800558c:	f000 f998 	bl	80058c0 <__malloc_unlock>
 8005590:	e794      	b.n	80054bc <_malloc_r+0x20>
 8005592:	6005      	str	r5, [r0, #0]
 8005594:	e7d6      	b.n	8005544 <_malloc_r+0xa8>
 8005596:	bf00      	nop
 8005598:	20000444 	.word	0x20000444

0800559c <_printf_common>:
 800559c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a0:	4616      	mov	r6, r2
 80055a2:	4698      	mov	r8, r3
 80055a4:	688a      	ldr	r2, [r1, #8]
 80055a6:	690b      	ldr	r3, [r1, #16]
 80055a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055ac:	4293      	cmp	r3, r2
 80055ae:	bfb8      	it	lt
 80055b0:	4613      	movlt	r3, r2
 80055b2:	6033      	str	r3, [r6, #0]
 80055b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055b8:	4607      	mov	r7, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	b10a      	cbz	r2, 80055c2 <_printf_common+0x26>
 80055be:	3301      	adds	r3, #1
 80055c0:	6033      	str	r3, [r6, #0]
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	0699      	lsls	r1, r3, #26
 80055c6:	bf42      	ittt	mi
 80055c8:	6833      	ldrmi	r3, [r6, #0]
 80055ca:	3302      	addmi	r3, #2
 80055cc:	6033      	strmi	r3, [r6, #0]
 80055ce:	6825      	ldr	r5, [r4, #0]
 80055d0:	f015 0506 	ands.w	r5, r5, #6
 80055d4:	d106      	bne.n	80055e4 <_printf_common+0x48>
 80055d6:	f104 0a19 	add.w	sl, r4, #25
 80055da:	68e3      	ldr	r3, [r4, #12]
 80055dc:	6832      	ldr	r2, [r6, #0]
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	42ab      	cmp	r3, r5
 80055e2:	dc26      	bgt.n	8005632 <_printf_common+0x96>
 80055e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055e8:	6822      	ldr	r2, [r4, #0]
 80055ea:	3b00      	subs	r3, #0
 80055ec:	bf18      	it	ne
 80055ee:	2301      	movne	r3, #1
 80055f0:	0692      	lsls	r2, r2, #26
 80055f2:	d42b      	bmi.n	800564c <_printf_common+0xb0>
 80055f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055f8:	4641      	mov	r1, r8
 80055fa:	4638      	mov	r0, r7
 80055fc:	47c8      	blx	r9
 80055fe:	3001      	adds	r0, #1
 8005600:	d01e      	beq.n	8005640 <_printf_common+0xa4>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	6922      	ldr	r2, [r4, #16]
 8005606:	f003 0306 	and.w	r3, r3, #6
 800560a:	2b04      	cmp	r3, #4
 800560c:	bf02      	ittt	eq
 800560e:	68e5      	ldreq	r5, [r4, #12]
 8005610:	6833      	ldreq	r3, [r6, #0]
 8005612:	1aed      	subeq	r5, r5, r3
 8005614:	68a3      	ldr	r3, [r4, #8]
 8005616:	bf0c      	ite	eq
 8005618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800561c:	2500      	movne	r5, #0
 800561e:	4293      	cmp	r3, r2
 8005620:	bfc4      	itt	gt
 8005622:	1a9b      	subgt	r3, r3, r2
 8005624:	18ed      	addgt	r5, r5, r3
 8005626:	2600      	movs	r6, #0
 8005628:	341a      	adds	r4, #26
 800562a:	42b5      	cmp	r5, r6
 800562c:	d11a      	bne.n	8005664 <_printf_common+0xc8>
 800562e:	2000      	movs	r0, #0
 8005630:	e008      	b.n	8005644 <_printf_common+0xa8>
 8005632:	2301      	movs	r3, #1
 8005634:	4652      	mov	r2, sl
 8005636:	4641      	mov	r1, r8
 8005638:	4638      	mov	r0, r7
 800563a:	47c8      	blx	r9
 800563c:	3001      	adds	r0, #1
 800563e:	d103      	bne.n	8005648 <_printf_common+0xac>
 8005640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005648:	3501      	adds	r5, #1
 800564a:	e7c6      	b.n	80055da <_printf_common+0x3e>
 800564c:	18e1      	adds	r1, r4, r3
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	2030      	movs	r0, #48	@ 0x30
 8005652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005656:	4422      	add	r2, r4
 8005658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800565c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005660:	3302      	adds	r3, #2
 8005662:	e7c7      	b.n	80055f4 <_printf_common+0x58>
 8005664:	2301      	movs	r3, #1
 8005666:	4622      	mov	r2, r4
 8005668:	4641      	mov	r1, r8
 800566a:	4638      	mov	r0, r7
 800566c:	47c8      	blx	r9
 800566e:	3001      	adds	r0, #1
 8005670:	d0e6      	beq.n	8005640 <_printf_common+0xa4>
 8005672:	3601      	adds	r6, #1
 8005674:	e7d9      	b.n	800562a <_printf_common+0x8e>
	...

08005678 <_printf_i>:
 8005678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800567c:	7e0f      	ldrb	r7, [r1, #24]
 800567e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005680:	2f78      	cmp	r7, #120	@ 0x78
 8005682:	4691      	mov	r9, r2
 8005684:	4680      	mov	r8, r0
 8005686:	460c      	mov	r4, r1
 8005688:	469a      	mov	sl, r3
 800568a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800568e:	d807      	bhi.n	80056a0 <_printf_i+0x28>
 8005690:	2f62      	cmp	r7, #98	@ 0x62
 8005692:	d80a      	bhi.n	80056aa <_printf_i+0x32>
 8005694:	2f00      	cmp	r7, #0
 8005696:	f000 80d1 	beq.w	800583c <_printf_i+0x1c4>
 800569a:	2f58      	cmp	r7, #88	@ 0x58
 800569c:	f000 80b8 	beq.w	8005810 <_printf_i+0x198>
 80056a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056a8:	e03a      	b.n	8005720 <_printf_i+0xa8>
 80056aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056ae:	2b15      	cmp	r3, #21
 80056b0:	d8f6      	bhi.n	80056a0 <_printf_i+0x28>
 80056b2:	a101      	add	r1, pc, #4	@ (adr r1, 80056b8 <_printf_i+0x40>)
 80056b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056b8:	08005711 	.word	0x08005711
 80056bc:	08005725 	.word	0x08005725
 80056c0:	080056a1 	.word	0x080056a1
 80056c4:	080056a1 	.word	0x080056a1
 80056c8:	080056a1 	.word	0x080056a1
 80056cc:	080056a1 	.word	0x080056a1
 80056d0:	08005725 	.word	0x08005725
 80056d4:	080056a1 	.word	0x080056a1
 80056d8:	080056a1 	.word	0x080056a1
 80056dc:	080056a1 	.word	0x080056a1
 80056e0:	080056a1 	.word	0x080056a1
 80056e4:	08005823 	.word	0x08005823
 80056e8:	0800574f 	.word	0x0800574f
 80056ec:	080057dd 	.word	0x080057dd
 80056f0:	080056a1 	.word	0x080056a1
 80056f4:	080056a1 	.word	0x080056a1
 80056f8:	08005845 	.word	0x08005845
 80056fc:	080056a1 	.word	0x080056a1
 8005700:	0800574f 	.word	0x0800574f
 8005704:	080056a1 	.word	0x080056a1
 8005708:	080056a1 	.word	0x080056a1
 800570c:	080057e5 	.word	0x080057e5
 8005710:	6833      	ldr	r3, [r6, #0]
 8005712:	1d1a      	adds	r2, r3, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6032      	str	r2, [r6, #0]
 8005718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800571c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005720:	2301      	movs	r3, #1
 8005722:	e09c      	b.n	800585e <_printf_i+0x1e6>
 8005724:	6833      	ldr	r3, [r6, #0]
 8005726:	6820      	ldr	r0, [r4, #0]
 8005728:	1d19      	adds	r1, r3, #4
 800572a:	6031      	str	r1, [r6, #0]
 800572c:	0606      	lsls	r6, r0, #24
 800572e:	d501      	bpl.n	8005734 <_printf_i+0xbc>
 8005730:	681d      	ldr	r5, [r3, #0]
 8005732:	e003      	b.n	800573c <_printf_i+0xc4>
 8005734:	0645      	lsls	r5, r0, #25
 8005736:	d5fb      	bpl.n	8005730 <_printf_i+0xb8>
 8005738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800573c:	2d00      	cmp	r5, #0
 800573e:	da03      	bge.n	8005748 <_printf_i+0xd0>
 8005740:	232d      	movs	r3, #45	@ 0x2d
 8005742:	426d      	negs	r5, r5
 8005744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005748:	4858      	ldr	r0, [pc, #352]	@ (80058ac <_printf_i+0x234>)
 800574a:	230a      	movs	r3, #10
 800574c:	e011      	b.n	8005772 <_printf_i+0xfa>
 800574e:	6821      	ldr	r1, [r4, #0]
 8005750:	6833      	ldr	r3, [r6, #0]
 8005752:	0608      	lsls	r0, r1, #24
 8005754:	f853 5b04 	ldr.w	r5, [r3], #4
 8005758:	d402      	bmi.n	8005760 <_printf_i+0xe8>
 800575a:	0649      	lsls	r1, r1, #25
 800575c:	bf48      	it	mi
 800575e:	b2ad      	uxthmi	r5, r5
 8005760:	2f6f      	cmp	r7, #111	@ 0x6f
 8005762:	4852      	ldr	r0, [pc, #328]	@ (80058ac <_printf_i+0x234>)
 8005764:	6033      	str	r3, [r6, #0]
 8005766:	bf14      	ite	ne
 8005768:	230a      	movne	r3, #10
 800576a:	2308      	moveq	r3, #8
 800576c:	2100      	movs	r1, #0
 800576e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005772:	6866      	ldr	r6, [r4, #4]
 8005774:	60a6      	str	r6, [r4, #8]
 8005776:	2e00      	cmp	r6, #0
 8005778:	db05      	blt.n	8005786 <_printf_i+0x10e>
 800577a:	6821      	ldr	r1, [r4, #0]
 800577c:	432e      	orrs	r6, r5
 800577e:	f021 0104 	bic.w	r1, r1, #4
 8005782:	6021      	str	r1, [r4, #0]
 8005784:	d04b      	beq.n	800581e <_printf_i+0x1a6>
 8005786:	4616      	mov	r6, r2
 8005788:	fbb5 f1f3 	udiv	r1, r5, r3
 800578c:	fb03 5711 	mls	r7, r3, r1, r5
 8005790:	5dc7      	ldrb	r7, [r0, r7]
 8005792:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005796:	462f      	mov	r7, r5
 8005798:	42bb      	cmp	r3, r7
 800579a:	460d      	mov	r5, r1
 800579c:	d9f4      	bls.n	8005788 <_printf_i+0x110>
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d10b      	bne.n	80057ba <_printf_i+0x142>
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	07df      	lsls	r7, r3, #31
 80057a6:	d508      	bpl.n	80057ba <_printf_i+0x142>
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	6861      	ldr	r1, [r4, #4]
 80057ac:	4299      	cmp	r1, r3
 80057ae:	bfde      	ittt	le
 80057b0:	2330      	movle	r3, #48	@ 0x30
 80057b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057b6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80057ba:	1b92      	subs	r2, r2, r6
 80057bc:	6122      	str	r2, [r4, #16]
 80057be:	f8cd a000 	str.w	sl, [sp]
 80057c2:	464b      	mov	r3, r9
 80057c4:	aa03      	add	r2, sp, #12
 80057c6:	4621      	mov	r1, r4
 80057c8:	4640      	mov	r0, r8
 80057ca:	f7ff fee7 	bl	800559c <_printf_common>
 80057ce:	3001      	adds	r0, #1
 80057d0:	d14a      	bne.n	8005868 <_printf_i+0x1f0>
 80057d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057d6:	b004      	add	sp, #16
 80057d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	f043 0320 	orr.w	r3, r3, #32
 80057e2:	6023      	str	r3, [r4, #0]
 80057e4:	4832      	ldr	r0, [pc, #200]	@ (80058b0 <_printf_i+0x238>)
 80057e6:	2778      	movs	r7, #120	@ 0x78
 80057e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	6831      	ldr	r1, [r6, #0]
 80057f0:	061f      	lsls	r7, r3, #24
 80057f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80057f6:	d402      	bmi.n	80057fe <_printf_i+0x186>
 80057f8:	065f      	lsls	r7, r3, #25
 80057fa:	bf48      	it	mi
 80057fc:	b2ad      	uxthmi	r5, r5
 80057fe:	6031      	str	r1, [r6, #0]
 8005800:	07d9      	lsls	r1, r3, #31
 8005802:	bf44      	itt	mi
 8005804:	f043 0320 	orrmi.w	r3, r3, #32
 8005808:	6023      	strmi	r3, [r4, #0]
 800580a:	b11d      	cbz	r5, 8005814 <_printf_i+0x19c>
 800580c:	2310      	movs	r3, #16
 800580e:	e7ad      	b.n	800576c <_printf_i+0xf4>
 8005810:	4826      	ldr	r0, [pc, #152]	@ (80058ac <_printf_i+0x234>)
 8005812:	e7e9      	b.n	80057e8 <_printf_i+0x170>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	f023 0320 	bic.w	r3, r3, #32
 800581a:	6023      	str	r3, [r4, #0]
 800581c:	e7f6      	b.n	800580c <_printf_i+0x194>
 800581e:	4616      	mov	r6, r2
 8005820:	e7bd      	b.n	800579e <_printf_i+0x126>
 8005822:	6833      	ldr	r3, [r6, #0]
 8005824:	6825      	ldr	r5, [r4, #0]
 8005826:	6961      	ldr	r1, [r4, #20]
 8005828:	1d18      	adds	r0, r3, #4
 800582a:	6030      	str	r0, [r6, #0]
 800582c:	062e      	lsls	r6, r5, #24
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	d501      	bpl.n	8005836 <_printf_i+0x1be>
 8005832:	6019      	str	r1, [r3, #0]
 8005834:	e002      	b.n	800583c <_printf_i+0x1c4>
 8005836:	0668      	lsls	r0, r5, #25
 8005838:	d5fb      	bpl.n	8005832 <_printf_i+0x1ba>
 800583a:	8019      	strh	r1, [r3, #0]
 800583c:	2300      	movs	r3, #0
 800583e:	6123      	str	r3, [r4, #16]
 8005840:	4616      	mov	r6, r2
 8005842:	e7bc      	b.n	80057be <_printf_i+0x146>
 8005844:	6833      	ldr	r3, [r6, #0]
 8005846:	1d1a      	adds	r2, r3, #4
 8005848:	6032      	str	r2, [r6, #0]
 800584a:	681e      	ldr	r6, [r3, #0]
 800584c:	6862      	ldr	r2, [r4, #4]
 800584e:	2100      	movs	r1, #0
 8005850:	4630      	mov	r0, r6
 8005852:	f7fa fcdd 	bl	8000210 <memchr>
 8005856:	b108      	cbz	r0, 800585c <_printf_i+0x1e4>
 8005858:	1b80      	subs	r0, r0, r6
 800585a:	6060      	str	r0, [r4, #4]
 800585c:	6863      	ldr	r3, [r4, #4]
 800585e:	6123      	str	r3, [r4, #16]
 8005860:	2300      	movs	r3, #0
 8005862:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005866:	e7aa      	b.n	80057be <_printf_i+0x146>
 8005868:	6923      	ldr	r3, [r4, #16]
 800586a:	4632      	mov	r2, r6
 800586c:	4649      	mov	r1, r9
 800586e:	4640      	mov	r0, r8
 8005870:	47d0      	blx	sl
 8005872:	3001      	adds	r0, #1
 8005874:	d0ad      	beq.n	80057d2 <_printf_i+0x15a>
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	079b      	lsls	r3, r3, #30
 800587a:	d413      	bmi.n	80058a4 <_printf_i+0x22c>
 800587c:	68e0      	ldr	r0, [r4, #12]
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	4298      	cmp	r0, r3
 8005882:	bfb8      	it	lt
 8005884:	4618      	movlt	r0, r3
 8005886:	e7a6      	b.n	80057d6 <_printf_i+0x15e>
 8005888:	2301      	movs	r3, #1
 800588a:	4632      	mov	r2, r6
 800588c:	4649      	mov	r1, r9
 800588e:	4640      	mov	r0, r8
 8005890:	47d0      	blx	sl
 8005892:	3001      	adds	r0, #1
 8005894:	d09d      	beq.n	80057d2 <_printf_i+0x15a>
 8005896:	3501      	adds	r5, #1
 8005898:	68e3      	ldr	r3, [r4, #12]
 800589a:	9903      	ldr	r1, [sp, #12]
 800589c:	1a5b      	subs	r3, r3, r1
 800589e:	42ab      	cmp	r3, r5
 80058a0:	dcf2      	bgt.n	8005888 <_printf_i+0x210>
 80058a2:	e7eb      	b.n	800587c <_printf_i+0x204>
 80058a4:	2500      	movs	r5, #0
 80058a6:	f104 0619 	add.w	r6, r4, #25
 80058aa:	e7f5      	b.n	8005898 <_printf_i+0x220>
 80058ac:	08005b95 	.word	0x08005b95
 80058b0:	08005ba6 	.word	0x08005ba6

080058b4 <__malloc_lock>:
 80058b4:	4801      	ldr	r0, [pc, #4]	@ (80058bc <__malloc_lock+0x8>)
 80058b6:	f7ff bc67 	b.w	8005188 <__retarget_lock_acquire_recursive>
 80058ba:	bf00      	nop
 80058bc:	2000043c 	.word	0x2000043c

080058c0 <__malloc_unlock>:
 80058c0:	4801      	ldr	r0, [pc, #4]	@ (80058c8 <__malloc_unlock+0x8>)
 80058c2:	f7ff bc62 	b.w	800518a <__retarget_lock_release_recursive>
 80058c6:	bf00      	nop
 80058c8:	2000043c 	.word	0x2000043c

080058cc <_realloc_r>:
 80058cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d0:	4607      	mov	r7, r0
 80058d2:	4614      	mov	r4, r2
 80058d4:	460d      	mov	r5, r1
 80058d6:	b921      	cbnz	r1, 80058e2 <_realloc_r+0x16>
 80058d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058dc:	4611      	mov	r1, r2
 80058de:	f7ff bddd 	b.w	800549c <_malloc_r>
 80058e2:	b92a      	cbnz	r2, 80058f0 <_realloc_r+0x24>
 80058e4:	f000 f84a 	bl	800597c <_free_r>
 80058e8:	4625      	mov	r5, r4
 80058ea:	4628      	mov	r0, r5
 80058ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058f0:	f000 f88e 	bl	8005a10 <_malloc_usable_size_r>
 80058f4:	4284      	cmp	r4, r0
 80058f6:	4606      	mov	r6, r0
 80058f8:	d802      	bhi.n	8005900 <_realloc_r+0x34>
 80058fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058fe:	d8f4      	bhi.n	80058ea <_realloc_r+0x1e>
 8005900:	4621      	mov	r1, r4
 8005902:	4638      	mov	r0, r7
 8005904:	f7ff fdca 	bl	800549c <_malloc_r>
 8005908:	4680      	mov	r8, r0
 800590a:	b908      	cbnz	r0, 8005910 <_realloc_r+0x44>
 800590c:	4645      	mov	r5, r8
 800590e:	e7ec      	b.n	80058ea <_realloc_r+0x1e>
 8005910:	42b4      	cmp	r4, r6
 8005912:	4622      	mov	r2, r4
 8005914:	4629      	mov	r1, r5
 8005916:	bf28      	it	cs
 8005918:	4632      	movcs	r2, r6
 800591a:	f7ff fc37 	bl	800518c <memcpy>
 800591e:	4629      	mov	r1, r5
 8005920:	4638      	mov	r0, r7
 8005922:	f000 f82b 	bl	800597c <_free_r>
 8005926:	e7f1      	b.n	800590c <_realloc_r+0x40>

08005928 <memmove>:
 8005928:	4288      	cmp	r0, r1
 800592a:	b510      	push	{r4, lr}
 800592c:	eb01 0402 	add.w	r4, r1, r2
 8005930:	d902      	bls.n	8005938 <memmove+0x10>
 8005932:	4284      	cmp	r4, r0
 8005934:	4623      	mov	r3, r4
 8005936:	d807      	bhi.n	8005948 <memmove+0x20>
 8005938:	1e43      	subs	r3, r0, #1
 800593a:	42a1      	cmp	r1, r4
 800593c:	d008      	beq.n	8005950 <memmove+0x28>
 800593e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005942:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005946:	e7f8      	b.n	800593a <memmove+0x12>
 8005948:	4402      	add	r2, r0
 800594a:	4601      	mov	r1, r0
 800594c:	428a      	cmp	r2, r1
 800594e:	d100      	bne.n	8005952 <memmove+0x2a>
 8005950:	bd10      	pop	{r4, pc}
 8005952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005956:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800595a:	e7f7      	b.n	800594c <memmove+0x24>

0800595c <_sbrk_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	4d06      	ldr	r5, [pc, #24]	@ (8005978 <_sbrk_r+0x1c>)
 8005960:	2300      	movs	r3, #0
 8005962:	4604      	mov	r4, r0
 8005964:	4608      	mov	r0, r1
 8005966:	602b      	str	r3, [r5, #0]
 8005968:	f7fb f998 	bl	8000c9c <_sbrk>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d102      	bne.n	8005976 <_sbrk_r+0x1a>
 8005970:	682b      	ldr	r3, [r5, #0]
 8005972:	b103      	cbz	r3, 8005976 <_sbrk_r+0x1a>
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	bd38      	pop	{r3, r4, r5, pc}
 8005978:	20000448 	.word	0x20000448

0800597c <_free_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	4605      	mov	r5, r0
 8005980:	2900      	cmp	r1, #0
 8005982:	d041      	beq.n	8005a08 <_free_r+0x8c>
 8005984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005988:	1f0c      	subs	r4, r1, #4
 800598a:	2b00      	cmp	r3, #0
 800598c:	bfb8      	it	lt
 800598e:	18e4      	addlt	r4, r4, r3
 8005990:	f7ff ff90 	bl	80058b4 <__malloc_lock>
 8005994:	4a1d      	ldr	r2, [pc, #116]	@ (8005a0c <_free_r+0x90>)
 8005996:	6813      	ldr	r3, [r2, #0]
 8005998:	b933      	cbnz	r3, 80059a8 <_free_r+0x2c>
 800599a:	6063      	str	r3, [r4, #4]
 800599c:	6014      	str	r4, [r2, #0]
 800599e:	4628      	mov	r0, r5
 80059a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059a4:	f7ff bf8c 	b.w	80058c0 <__malloc_unlock>
 80059a8:	42a3      	cmp	r3, r4
 80059aa:	d908      	bls.n	80059be <_free_r+0x42>
 80059ac:	6820      	ldr	r0, [r4, #0]
 80059ae:	1821      	adds	r1, r4, r0
 80059b0:	428b      	cmp	r3, r1
 80059b2:	bf01      	itttt	eq
 80059b4:	6819      	ldreq	r1, [r3, #0]
 80059b6:	685b      	ldreq	r3, [r3, #4]
 80059b8:	1809      	addeq	r1, r1, r0
 80059ba:	6021      	streq	r1, [r4, #0]
 80059bc:	e7ed      	b.n	800599a <_free_r+0x1e>
 80059be:	461a      	mov	r2, r3
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	b10b      	cbz	r3, 80059c8 <_free_r+0x4c>
 80059c4:	42a3      	cmp	r3, r4
 80059c6:	d9fa      	bls.n	80059be <_free_r+0x42>
 80059c8:	6811      	ldr	r1, [r2, #0]
 80059ca:	1850      	adds	r0, r2, r1
 80059cc:	42a0      	cmp	r0, r4
 80059ce:	d10b      	bne.n	80059e8 <_free_r+0x6c>
 80059d0:	6820      	ldr	r0, [r4, #0]
 80059d2:	4401      	add	r1, r0
 80059d4:	1850      	adds	r0, r2, r1
 80059d6:	4283      	cmp	r3, r0
 80059d8:	6011      	str	r1, [r2, #0]
 80059da:	d1e0      	bne.n	800599e <_free_r+0x22>
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	6053      	str	r3, [r2, #4]
 80059e2:	4408      	add	r0, r1
 80059e4:	6010      	str	r0, [r2, #0]
 80059e6:	e7da      	b.n	800599e <_free_r+0x22>
 80059e8:	d902      	bls.n	80059f0 <_free_r+0x74>
 80059ea:	230c      	movs	r3, #12
 80059ec:	602b      	str	r3, [r5, #0]
 80059ee:	e7d6      	b.n	800599e <_free_r+0x22>
 80059f0:	6820      	ldr	r0, [r4, #0]
 80059f2:	1821      	adds	r1, r4, r0
 80059f4:	428b      	cmp	r3, r1
 80059f6:	bf04      	itt	eq
 80059f8:	6819      	ldreq	r1, [r3, #0]
 80059fa:	685b      	ldreq	r3, [r3, #4]
 80059fc:	6063      	str	r3, [r4, #4]
 80059fe:	bf04      	itt	eq
 8005a00:	1809      	addeq	r1, r1, r0
 8005a02:	6021      	streq	r1, [r4, #0]
 8005a04:	6054      	str	r4, [r2, #4]
 8005a06:	e7ca      	b.n	800599e <_free_r+0x22>
 8005a08:	bd38      	pop	{r3, r4, r5, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000444 	.word	0x20000444

08005a10 <_malloc_usable_size_r>:
 8005a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a14:	1f18      	subs	r0, r3, #4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	bfbc      	itt	lt
 8005a1a:	580b      	ldrlt	r3, [r1, r0]
 8005a1c:	18c0      	addlt	r0, r0, r3
 8005a1e:	4770      	bx	lr

08005a20 <_init>:
 8005a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a22:	bf00      	nop
 8005a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a26:	bc08      	pop	{r3}
 8005a28:	469e      	mov	lr, r3
 8005a2a:	4770      	bx	lr

08005a2c <_fini>:
 8005a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2e:	bf00      	nop
 8005a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a32:	bc08      	pop	{r3}
 8005a34:	469e      	mov	lr, r3
 8005a36:	4770      	bx	lr
