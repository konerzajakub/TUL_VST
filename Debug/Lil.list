
Lil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006760  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08006920  08006920  00007920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f10  08006f10  000080b4  2**0
                  CONTENTS
  4 .ARM          00000008  08006f10  08006f10  00007f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f18  08006f18  000080b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f18  08006f18  00007f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f1c  08006f1c  00007f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08006f20  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  200000b4  08006fd4  000080b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08006fd4  0000846c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1e7  00000000  00000000  000080e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f71  00000000  00000000  000162cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00018240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000864  00000000  00000000  00018d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000299dd  00000000  00000000  0001957c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5e7  00000000  00000000  00042f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff5b3  00000000  00000000  00050540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014faf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031d0  00000000  00000000  0014fb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00152d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006908 	.word	0x08006908

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000b8 	.word	0x200000b8
 80001fc:	08006908 	.word	0x08006908

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <HAL_UART_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Callback function for UART transmission complete
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  if (huart->Instance == LPUART1) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a05      	ldr	r2, [pc, #20]	@ (8000620 <HAL_UART_TxCpltCallback+0x24>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d102      	bne.n	8000614 <HAL_UART_TxCpltCallback+0x18>
    transmissionComplete = true;
 800060e:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <HAL_UART_TxCpltCallback+0x28>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
  }
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	40008000 	.word	0x40008000
 8000624:	20000220 	.word	0x20000220

08000628 <HAL_UART_RxCpltCallback>:

// Callback function for UART reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == LPUART1) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a1c      	ldr	r2, [pc, #112]	@ (80006a8 <HAL_UART_RxCpltCallback+0x80>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d131      	bne.n	800069e <HAL_UART_RxCpltCallback+0x76>
    // Echo received character
    HAL_UART_Transmit_IT(&hlpuart1, &uartRxChar, 1);
 800063a:	2201      	movs	r2, #1
 800063c:	491b      	ldr	r1, [pc, #108]	@ (80006ac <HAL_UART_RxCpltCallback+0x84>)
 800063e:	481c      	ldr	r0, [pc, #112]	@ (80006b0 <HAL_UART_RxCpltCallback+0x88>)
 8000640:	f003 fa48 	bl	8003ad4 <HAL_UART_Transmit_IT>

    // Process received character
    if (uartRxChar == '\r' || uartRxChar == '\n') {
 8000644:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <HAL_UART_RxCpltCallback+0x84>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b0d      	cmp	r3, #13
 800064a:	d003      	beq.n	8000654 <HAL_UART_RxCpltCallback+0x2c>
 800064c:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <HAL_UART_RxCpltCallback+0x84>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b0a      	cmp	r3, #10
 8000652:	d110      	bne.n	8000676 <HAL_UART_RxCpltCallback+0x4e>
      if (commandLength > 0) {
 8000654:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <HAL_UART_RxCpltCallback+0x8c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d01b      	beq.n	8000694 <HAL_UART_RxCpltCallback+0x6c>
        commandBuffer[commandLength] = '\0';
 800065c:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <HAL_UART_RxCpltCallback+0x8c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	461a      	mov	r2, r3
 8000662:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <HAL_UART_RxCpltCallback+0x90>)
 8000664:	2100      	movs	r1, #0
 8000666:	5499      	strb	r1, [r3, r2]
        commandReady = true;
 8000668:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <HAL_UART_RxCpltCallback+0x94>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
        commandLength = 0;
 800066e:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <HAL_UART_RxCpltCallback+0x8c>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
      if (commandLength > 0) {
 8000674:	e00e      	b.n	8000694 <HAL_UART_RxCpltCallback+0x6c>
      }
    } else if (commandLength < MAX_COMMAND_LENGTH) {
 8000676:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <HAL_UART_RxCpltCallback+0x8c>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b13      	cmp	r3, #19
 800067c:	d80a      	bhi.n	8000694 <HAL_UART_RxCpltCallback+0x6c>
      commandBuffer[commandLength++] = uartRxChar;
 800067e:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <HAL_UART_RxCpltCallback+0x8c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	1c5a      	adds	r2, r3, #1
 8000684:	b2d1      	uxtb	r1, r2
 8000686:	4a0b      	ldr	r2, [pc, #44]	@ (80006b4 <HAL_UART_RxCpltCallback+0x8c>)
 8000688:	7011      	strb	r1, [r2, #0]
 800068a:	461a      	mov	r2, r3
 800068c:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <HAL_UART_RxCpltCallback+0x84>)
 800068e:	7819      	ldrb	r1, [r3, #0]
 8000690:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <HAL_UART_RxCpltCallback+0x90>)
 8000692:	5499      	strb	r1, [r3, r2]
    }

    // Start listening for next character
    HAL_UART_Receive_IT(&hlpuart1, &uartRxChar, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	4905      	ldr	r1, [pc, #20]	@ (80006ac <HAL_UART_RxCpltCallback+0x84>)
 8000698:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <HAL_UART_RxCpltCallback+0x88>)
 800069a:	f003 fac3 	bl	8003c24 <HAL_UART_Receive_IT>
  }
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40008000 	.word	0x40008000
 80006ac:	200002ec 	.word	0x200002ec
 80006b0:	200000d0 	.word	0x200000d0
 80006b4:	20000305 	.word	0x20000305
 80006b8:	200002f0 	.word	0x200002f0
 80006bc:	20000306 	.word	0x20000306

080006c0 <updateLed>:
  HAL_Delay(500);
}

// Aktualizace stavu LED
void updateLed(Led* led, uint32_t currentTime)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
  if (led->mode == LED_MODE_OFF) {
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	799b      	ldrb	r3, [r3, #6]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d10f      	bne.n	80006f2 <updateLed+0x32>
    // LED je trvale vypnutá
    if (led->state) {
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	7c1b      	ldrb	r3, [r3, #16]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d07b      	beq.n	80007d2 <updateLed+0x112>
      HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	889b      	ldrh	r3, [r3, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	4619      	mov	r1, r3
 80006e6:	f001 fc33 	bl	8001f50 <HAL_GPIO_WritePin>
      led->state = false;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	741a      	strb	r2, [r3, #16]
      led->state = !led->state;
      HAL_GPIO_WritePin(led->port, led->pin, led->state ? GPIO_PIN_SET : GPIO_PIN_RESET);
      led->lastToggleTime = currentTime;
    }
  }
}
 80006f0:	e06f      	b.n	80007d2 <updateLed+0x112>
  else if (led->mode == LED_MODE_ON) {
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	799b      	ldrb	r3, [r3, #6]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d112      	bne.n	8000720 <updateLed+0x60>
    if (!led->state) {
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	7c1b      	ldrb	r3, [r3, #16]
 80006fe:	f083 0301 	eor.w	r3, r3, #1
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b00      	cmp	r3, #0
 8000706:	d064      	beq.n	80007d2 <updateLed+0x112>
      HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6818      	ldr	r0, [r3, #0]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	889b      	ldrh	r3, [r3, #4]
 8000710:	2201      	movs	r2, #1
 8000712:	4619      	mov	r1, r3
 8000714:	f001 fc1c 	bl	8001f50 <HAL_GPIO_WritePin>
      led->state = true;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2201      	movs	r2, #1
 800071c:	741a      	strb	r2, [r3, #16]
}
 800071e:	e058      	b.n	80007d2 <updateLed+0x112>
  else if (led->mode == LED_MODE_BLINK) {
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	799b      	ldrb	r3, [r3, #6]
 8000724:	2b02      	cmp	r3, #2
 8000726:	d124      	bne.n	8000772 <updateLed+0xb2>
    if (currentTime - led->lastToggleTime >= led->blinkPeriod / 2) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	1ad2      	subs	r2, r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	085b      	lsrs	r3, r3, #1
 8000736:	429a      	cmp	r2, r3
 8000738:	d34b      	bcc.n	80007d2 <updateLed+0x112>
      led->state = !led->state;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	7c1b      	ldrb	r3, [r3, #16]
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf14      	ite	ne
 8000742:	2301      	movne	r3, #1
 8000744:	2300      	moveq	r3, #0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f083 0301 	eor.w	r3, r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	b2da      	uxtb	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	741a      	strb	r2, [r3, #16]
      HAL_GPIO_WritePin(led->port, led->pin, led->state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6818      	ldr	r0, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	8899      	ldrh	r1, [r3, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	7c1b      	ldrb	r3, [r3, #16]
 8000764:	461a      	mov	r2, r3
 8000766:	f001 fbf3 	bl	8001f50 <HAL_GPIO_WritePin>
      led->lastToggleTime = currentTime;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	683a      	ldr	r2, [r7, #0]
 800076e:	60da      	str	r2, [r3, #12]
}
 8000770:	e02f      	b.n	80007d2 <updateLed+0x112>
  else if (led->mode == LED_MODE_BLINK_ASYM) {
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	799b      	ldrb	r3, [r3, #6]
 8000776:	2b03      	cmp	r3, #3
 8000778:	d12b      	bne.n	80007d2 <updateLed+0x112>
    uint32_t interval = led->state ? led->onTime : led->offTime;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	7c1b      	ldrb	r3, [r3, #16]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d002      	beq.n	8000788 <updateLed+0xc8>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	e001      	b.n	800078c <updateLed+0xcc>
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	60fb      	str	r3, [r7, #12]
    if (currentTime - led->lastToggleTime >= interval) {
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	68db      	ldr	r3, [r3, #12]
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	429a      	cmp	r2, r3
 800079a:	d81a      	bhi.n	80007d2 <updateLed+0x112>
      led->state = !led->state;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7c1b      	ldrb	r3, [r3, #16]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	bf14      	ite	ne
 80007a4:	2301      	movne	r3, #1
 80007a6:	2300      	moveq	r3, #0
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	f083 0301 	eor.w	r3, r3, #1
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	741a      	strb	r2, [r3, #16]
      HAL_GPIO_WritePin(led->port, led->pin, led->state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6818      	ldr	r0, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	8899      	ldrh	r1, [r3, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7c1b      	ldrb	r3, [r3, #16]
 80007c6:	461a      	mov	r2, r3
 80007c8:	f001 fbc2 	bl	8001f50 <HAL_GPIO_WritePin>
      led->lastToggleTime = currentTime;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	60da      	str	r2, [r3, #12]
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <handleButton>:

// Zpracování tlačítka
void handleButton(uint32_t currentTime)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  // Čtení stavu tlačítka
  bool currentButtonState = (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET);
 80007e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e8:	4862      	ldr	r0, [pc, #392]	@ (8000974 <handleButton+0x198>)
 80007ea:	f001 fb99 	bl	8001f20 <HAL_GPIO_ReadPin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	bf0c      	ite	eq
 80007f4:	2301      	moveq	r3, #1
 80007f6:	2300      	movne	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]

  // Filtr zákmitů tlačítka
  if (currentButtonState != lastButtonState) {
 80007fa:	4b5f      	ldr	r3, [pc, #380]	@ (8000978 <handleButton+0x19c>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	7bfa      	ldrb	r2, [r7, #15]
 8000800:	429a      	cmp	r2, r3
 8000802:	d002      	beq.n	800080a <handleButton+0x2e>
    lastButtonDebounceTime = currentTime;
 8000804:	4a5d      	ldr	r2, [pc, #372]	@ (800097c <handleButton+0x1a0>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6013      	str	r3, [r2, #0]
  }

  // Pokud je stav tlačítka stabilní po dobu filtru
  if (currentTime - lastButtonDebounceTime > BTN_FILTER) {
 800080a:	4b5c      	ldr	r3, [pc, #368]	@ (800097c <handleButton+0x1a0>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	2b32      	cmp	r3, #50	@ 0x32
 8000814:	f240 80a6 	bls.w	8000964 <handleButton+0x188>
    // Pokud se stav změnil od posledního stabilního stavu
    if (currentButtonState != buttonPressed) {
 8000818:	4b59      	ldr	r3, [pc, #356]	@ (8000980 <handleButton+0x1a4>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	7bfa      	ldrb	r2, [r7, #15]
 800081e:	429a      	cmp	r2, r3
 8000820:	f000 80a0 	beq.w	8000964 <handleButton+0x188>
      buttonPressed = currentButtonState;
 8000824:	4a56      	ldr	r2, [pc, #344]	@ (8000980 <handleButton+0x1a4>)
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	7013      	strb	r3, [r2, #0]

      // Stisk tlačítka
      if (buttonPressed) {
 800082a:	4b55      	ldr	r3, [pc, #340]	@ (8000980 <handleButton+0x1a4>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d038      	beq.n	80008a4 <handleButton+0xc8>
        buttonPressTime = currentTime;
 8000832:	4a54      	ldr	r2, [pc, #336]	@ (8000984 <handleButton+0x1a8>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6013      	str	r3, [r2, #0]

        // Ve stavu 2 přepnout stav červené LED po stisku
        if (currentState == STATE_BUTTON_TOGGLE) {
 8000838:	4b53      	ldr	r3, [pc, #332]	@ (8000988 <handleButton+0x1ac>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d126      	bne.n	800088e <handleButton+0xb2>
          redLed.state = !redLed.state;
 8000840:	4b52      	ldr	r3, [pc, #328]	@ (800098c <handleButton+0x1b0>)
 8000842:	7c1b      	ldrb	r3, [r3, #16]
 8000844:	2b00      	cmp	r3, #0
 8000846:	bf14      	ite	ne
 8000848:	2301      	movne	r3, #1
 800084a:	2300      	moveq	r3, #0
 800084c:	b2db      	uxtb	r3, r3
 800084e:	f083 0301 	eor.w	r3, r3, #1
 8000852:	b2db      	uxtb	r3, r3
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b4c      	ldr	r3, [pc, #304]	@ (800098c <handleButton+0x1b0>)
 800085c:	741a      	strb	r2, [r3, #16]
          HAL_GPIO_WritePin(redLed.port, redLed.pin, redLed.state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800085e:	4b4b      	ldr	r3, [pc, #300]	@ (800098c <handleButton+0x1b0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a4a      	ldr	r2, [pc, #296]	@ (800098c <handleButton+0x1b0>)
 8000864:	8891      	ldrh	r1, [r2, #4]
 8000866:	4a49      	ldr	r2, [pc, #292]	@ (800098c <handleButton+0x1b0>)
 8000868:	7c12      	ldrb	r2, [r2, #16]
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fb70 	bl	8001f50 <HAL_GPIO_WritePin>

          // Informace o změně stavu červené LED
          sprintf(outputBuffer, "\r\nRed LED %s\r\n", redLed.state ? "ON" : "OFF");
 8000870:	4b46      	ldr	r3, [pc, #280]	@ (800098c <handleButton+0x1b0>)
 8000872:	7c1b      	ldrb	r3, [r3, #16]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <handleButton+0xa0>
 8000878:	4b45      	ldr	r3, [pc, #276]	@ (8000990 <handleButton+0x1b4>)
 800087a:	e000      	b.n	800087e <handleButton+0xa2>
 800087c:	4b45      	ldr	r3, [pc, #276]	@ (8000994 <handleButton+0x1b8>)
 800087e:	461a      	mov	r2, r3
 8000880:	4945      	ldr	r1, [pc, #276]	@ (8000998 <handleButton+0x1bc>)
 8000882:	4846      	ldr	r0, [pc, #280]	@ (800099c <handleButton+0x1c0>)
 8000884:	f005 fb02 	bl	8005e8c <siprintf>
          sendUartMessage(outputBuffer);
 8000888:	4844      	ldr	r0, [pc, #272]	@ (800099c <handleButton+0x1c0>)
 800088a:	f000 f899 	bl	80009c0 <sendUartMessage>
        }

        // Přechod do pomocného stavu pro detekci dlouhého stisku
        if (currentState == STATE_BUTTON_TOGGLE) {
 800088e:	4b3e      	ldr	r3, [pc, #248]	@ (8000988 <handleButton+0x1ac>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d166      	bne.n	8000964 <handleButton+0x188>
          currentState = STATE_TRANSITIONAL;
 8000896:	4b3c      	ldr	r3, [pc, #240]	@ (8000988 <handleButton+0x1ac>)
 8000898:	2202      	movs	r2, #2
 800089a:	701a      	strb	r2, [r3, #0]

          // Informace o přechodu do přechodného stavu
          sendUartMessage("\r\nVstup do prechodoveho stavu\r\n");
 800089c:	4840      	ldr	r0, [pc, #256]	@ (80009a0 <handleButton+0x1c4>)
 800089e:	f000 f88f 	bl	80009c0 <sendUartMessage>
 80008a2:	e05f      	b.n	8000964 <handleButton+0x188>
        }
      }
      // Uvolnění tlačítka
      else {
        buttonReleaseTime = currentTime;
 80008a4:	4a3f      	ldr	r2, [pc, #252]	@ (80009a4 <handleButton+0x1c8>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6013      	str	r3, [r2, #0]
        uint32_t pressDuration = buttonReleaseTime - buttonPressTime;
 80008aa:	4b3e      	ldr	r3, [pc, #248]	@ (80009a4 <handleButton+0x1c8>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	4b35      	ldr	r3, [pc, #212]	@ (8000984 <handleButton+0x1a8>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	60bb      	str	r3, [r7, #8]

        // Dlouhý stisk - přechod do stavu 4
        if (currentState == STATE_TRANSITIONAL && pressDuration >= LONG_PRESS_DURATION) {
 80008b6:	4b34      	ldr	r3, [pc, #208]	@ (8000988 <handleButton+0x1ac>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d11e      	bne.n	80008fc <handleButton+0x120>
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008c4:	d31a      	bcc.n	80008fc <handleButton+0x120>
          currentState = STATE_CUSTOM_PERIOD;
 80008c6:	4b30      	ldr	r3, [pc, #192]	@ (8000988 <handleButton+0x1ac>)
 80008c8:	2203      	movs	r2, #3
 80008ca:	701a      	strb	r2, [r3, #0]
          customBlinkPeriod = pressDuration;
 80008cc:	4a36      	ldr	r2, [pc, #216]	@ (80009a8 <handleButton+0x1cc>)
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	6013      	str	r3, [r2, #0]
          redLed.mode = LED_MODE_BLINK;
 80008d2:	4b2e      	ldr	r3, [pc, #184]	@ (800098c <handleButton+0x1b0>)
 80008d4:	2202      	movs	r2, #2
 80008d6:	719a      	strb	r2, [r3, #6]
          redLed.blinkPeriod = customBlinkPeriod;
 80008d8:	4b33      	ldr	r3, [pc, #204]	@ (80009a8 <handleButton+0x1cc>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a2b      	ldr	r2, [pc, #172]	@ (800098c <handleButton+0x1b0>)
 80008de:	6093      	str	r3, [r2, #8]
          blueLed.mode = LED_MODE_BLINK_ASYM;
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <handleButton+0x1d0>)
 80008e2:	2203      	movs	r2, #3
 80008e4:	719a      	strb	r2, [r3, #6]

          // Informace o přechodu do stavu 4
          sprintf(outputBuffer, "\r\n Stav vlastni delky periody. Delka periody: %lu ms\r\n", customBlinkPeriod);
 80008e6:	4b30      	ldr	r3, [pc, #192]	@ (80009a8 <handleButton+0x1cc>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	4930      	ldr	r1, [pc, #192]	@ (80009b0 <handleButton+0x1d4>)
 80008ee:	482b      	ldr	r0, [pc, #172]	@ (800099c <handleButton+0x1c0>)
 80008f0:	f005 facc 	bl	8005e8c <siprintf>
          sendUartMessage(outputBuffer);
 80008f4:	4829      	ldr	r0, [pc, #164]	@ (800099c <handleButton+0x1c0>)
 80008f6:	f000 f863 	bl	80009c0 <sendUartMessage>
 80008fa:	e033      	b.n	8000964 <handleButton+0x188>
        }
        // Krátký stisk - návrat do stavu 2
        else if (currentState == STATE_TRANSITIONAL) {
 80008fc:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <handleButton+0x1ac>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b02      	cmp	r3, #2
 8000902:	d106      	bne.n	8000912 <handleButton+0x136>
          currentState = STATE_BUTTON_TOGGLE;
 8000904:	4b20      	ldr	r3, [pc, #128]	@ (8000988 <handleButton+0x1ac>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]

          // Informace o návratu do stavu 2
          sendUartMessage("\r\nVraceno do stavu klikani tlacitka\r\n");
 800090a:	482a      	ldr	r0, [pc, #168]	@ (80009b4 <handleButton+0x1d8>)
 800090c:	f000 f858 	bl	80009c0 <sendUartMessage>
 8000910:	e028      	b.n	8000964 <handleButton+0x188>
        }
        // Ve stavu 4 - nastavení nové periody blikání červené LED
        else if (currentState == STATE_CUSTOM_PERIOD) {
 8000912:	4b1d      	ldr	r3, [pc, #116]	@ (8000988 <handleButton+0x1ac>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b03      	cmp	r3, #3
 8000918:	d111      	bne.n	800093e <handleButton+0x162>
          customBlinkPeriod = pressDuration;
 800091a:	4a23      	ldr	r2, [pc, #140]	@ (80009a8 <handleButton+0x1cc>)
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	6013      	str	r3, [r2, #0]
          redLed.blinkPeriod = customBlinkPeriod;
 8000920:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <handleButton+0x1cc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a19      	ldr	r2, [pc, #100]	@ (800098c <handleButton+0x1b0>)
 8000926:	6093      	str	r3, [r2, #8]

          // Informace o nové periodě blikání
          sprintf(outputBuffer, "\r\nNova perioda blikani: %lu ms\r\n", customBlinkPeriod);
 8000928:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <handleButton+0x1cc>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	4922      	ldr	r1, [pc, #136]	@ (80009b8 <handleButton+0x1dc>)
 8000930:	481a      	ldr	r0, [pc, #104]	@ (800099c <handleButton+0x1c0>)
 8000932:	f005 faab 	bl	8005e8c <siprintf>
          sendUartMessage(outputBuffer);
 8000936:	4819      	ldr	r0, [pc, #100]	@ (800099c <handleButton+0x1c0>)
 8000938:	f000 f842 	bl	80009c0 <sendUartMessage>
 800093c:	e012      	b.n	8000964 <handleButton+0x188>
        }
        // Ve stavu 1 - přechod do stavu 2
        else if (currentState == STATE_INITIAL) {
 800093e:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <handleButton+0x1ac>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d10e      	bne.n	8000964 <handleButton+0x188>
          currentState = STATE_BUTTON_TOGGLE;
 8000946:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <handleButton+0x1ac>)
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
          redLed.mode = LED_MODE_OFF;
 800094c:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <handleButton+0x1b0>)
 800094e:	2200      	movs	r2, #0
 8000950:	719a      	strb	r2, [r3, #6]
          blueLed.mode = LED_MODE_BLINK;
 8000952:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <handleButton+0x1d0>)
 8000954:	2202      	movs	r2, #2
 8000956:	719a      	strb	r2, [r3, #6]
          blueLed.blinkPeriod = 200; // 100ms perioda (50ms on, 50ms off)
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <handleButton+0x1d0>)
 800095a:	22c8      	movs	r2, #200	@ 0xc8
 800095c:	609a      	str	r2, [r3, #8]

          // Informace o přechodu do stavu 2
          sendUartMessage("\r\nVstup do stavu klikani tlacitka\r\n");
 800095e:	4817      	ldr	r0, [pc, #92]	@ (80009bc <handleButton+0x1e0>)
 8000960:	f000 f82e 	bl	80009c0 <sendUartMessage>
      }
    }
  }

  // Uložení posledního stavu tlačítka
  lastButtonState = currentButtonState;
 8000964:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <handleButton+0x19c>)
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	7013      	strb	r3, [r2, #0]
}
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	48000800 	.word	0x48000800
 8000978:	20000318 	.word	0x20000318
 800097c:	20000314 	.word	0x20000314
 8000980:	20000310 	.word	0x20000310
 8000984:	20000308 	.word	0x20000308
 8000988:	20000307 	.word	0x20000307
 800098c:	20000004 	.word	0x20000004
 8000990:	080069e0 	.word	0x080069e0
 8000994:	080069e4 	.word	0x080069e4
 8000998:	080069e8 	.word	0x080069e8
 800099c:	20000224 	.word	0x20000224
 80009a0:	080069f8 	.word	0x080069f8
 80009a4:	2000030c 	.word	0x2000030c
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000020 	.word	0x20000020
 80009b0:	08006a18 	.word	0x08006a18
 80009b4:	08006a50 	.word	0x08006a50
 80009b8:	08006a78 	.word	0x08006a78
 80009bc:	08006a9c 	.word	0x08006a9c

080009c0 <sendUartMessage>:

// Odeslání zprávy přes UART
void sendUartMessage(const char* message)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)message, strlen(message), 1000);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fc23 	bl	8000214 <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	4803      	ldr	r0, [pc, #12]	@ (80009e8 <sendUartMessage+0x28>)
 80009da:	f002 ffe5 	bl	80039a8 <HAL_UART_Transmit>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200000d0 	.word	0x200000d0

080009ec <startUartRxInterrupt>:

// Nastavení UART přerušení pro příjem
void startUartRxInterrupt(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&hlpuart1, &uartRxChar, 1);
 80009f0:	2201      	movs	r2, #1
 80009f2:	4903      	ldr	r1, [pc, #12]	@ (8000a00 <startUartRxInterrupt+0x14>)
 80009f4:	4803      	ldr	r0, [pc, #12]	@ (8000a04 <startUartRxInterrupt+0x18>)
 80009f6:	f003 f915 	bl	8003c24 <HAL_UART_Receive_IT>
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200002ec 	.word	0x200002ec
 8000a04:	200000d0 	.word	0x200000d0

08000a08 <processCommand>:

// Zpracování přijatého příkazu
void processCommand(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0
  // Konvertovat příkaz na velká písmena pro snadnější porovnání
  char upperCommand[MAX_COMMAND_LENGTH + 1];
  strcpy(upperCommand, commandBuffer);
 8000a0e:	463b      	mov	r3, r7
 8000a10:	4982      	ldr	r1, [pc, #520]	@ (8000c1c <processCommand+0x214>)
 8000a12:	4618      	mov	r0, r3
 8000a14:	f005 fb26 	bl	8006064 <strcpy>
  for (int i = 0; upperCommand[i]; i++) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
 8000a1c:	e019      	b.n	8000a52 <processCommand+0x4a>
    if (upperCommand[i] >= 'a' && upperCommand[i] <= 'z') {
 8000a1e:	463a      	mov	r2, r7
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b60      	cmp	r3, #96	@ 0x60
 8000a28:	d910      	bls.n	8000a4c <processCommand+0x44>
 8000a2a:	463a      	mov	r2, r7
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	4413      	add	r3, r2
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b7a      	cmp	r3, #122	@ 0x7a
 8000a34:	d80a      	bhi.n	8000a4c <processCommand+0x44>
      upperCommand[i] = upperCommand[i] - 'a' + 'A';
 8000a36:	463a      	mov	r2, r7
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	3b20      	subs	r3, #32
 8000a40:	b2d9      	uxtb	r1, r3
 8000a42:	463a      	mov	r2, r7
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	4413      	add	r3, r2
 8000a48:	460a      	mov	r2, r1
 8000a4a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; upperCommand[i]; i++) {
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	61fb      	str	r3, [r7, #28]
 8000a52:	463a      	mov	r2, r7
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	4413      	add	r3, r2
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1df      	bne.n	8000a1e <processCommand+0x16>
    }
  }

  // Příkaz pro rozsvícení červené LED
  if (strcmp(upperCommand, "RON") == 0) {
 8000a5e:	463b      	mov	r3, r7
 8000a60:	496f      	ldr	r1, [pc, #444]	@ (8000c20 <processCommand+0x218>)
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fbcc 	bl	8000200 <strcmp>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10b      	bne.n	8000a86 <processCommand+0x7e>
    redLed.mode = LED_MODE_ON;
 8000a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8000c24 <processCommand+0x21c>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	719a      	strb	r2, [r3, #6]
    sprintf(outputBuffer, "\r\nCommand: %s - Cervena LED ON\r\n", commandBuffer);
 8000a74:	4a69      	ldr	r2, [pc, #420]	@ (8000c1c <processCommand+0x214>)
 8000a76:	496c      	ldr	r1, [pc, #432]	@ (8000c28 <processCommand+0x220>)
 8000a78:	486c      	ldr	r0, [pc, #432]	@ (8000c2c <processCommand+0x224>)
 8000a7a:	f005 fa07 	bl	8005e8c <siprintf>
    sendUartMessage(outputBuffer);
 8000a7e:	486b      	ldr	r0, [pc, #428]	@ (8000c2c <processCommand+0x224>)
 8000a80:	f7ff ff9e 	bl	80009c0 <sendUartMessage>
  // Neznámý příkaz
  else {
    sprintf(outputBuffer, "\r\nError: Neznamy prikaz: '%s'\r\n", commandBuffer);
    sendUartMessage(outputBuffer);
  }
}
 8000a84:	e0c6      	b.n	8000c14 <processCommand+0x20c>
  else if (strcmp(upperCommand, "BON") == 0) {
 8000a86:	463b      	mov	r3, r7
 8000a88:	4969      	ldr	r1, [pc, #420]	@ (8000c30 <processCommand+0x228>)
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fbb8 	bl	8000200 <strcmp>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d10b      	bne.n	8000aae <processCommand+0xa6>
    blueLed.mode = LED_MODE_ON;
 8000a96:	4b67      	ldr	r3, [pc, #412]	@ (8000c34 <processCommand+0x22c>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	719a      	strb	r2, [r3, #6]
    sprintf(outputBuffer, "\r\nCommand: %s - Modra LED ON\r\n", commandBuffer);
 8000a9c:	4a5f      	ldr	r2, [pc, #380]	@ (8000c1c <processCommand+0x214>)
 8000a9e:	4966      	ldr	r1, [pc, #408]	@ (8000c38 <processCommand+0x230>)
 8000aa0:	4862      	ldr	r0, [pc, #392]	@ (8000c2c <processCommand+0x224>)
 8000aa2:	f005 f9f3 	bl	8005e8c <siprintf>
    sendUartMessage(outputBuffer);
 8000aa6:	4861      	ldr	r0, [pc, #388]	@ (8000c2c <processCommand+0x224>)
 8000aa8:	f7ff ff8a 	bl	80009c0 <sendUartMessage>
}
 8000aac:	e0b2      	b.n	8000c14 <processCommand+0x20c>
  else if (strcmp(upperCommand, "GON") == 0) {
 8000aae:	463b      	mov	r3, r7
 8000ab0:	4962      	ldr	r1, [pc, #392]	@ (8000c3c <processCommand+0x234>)
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fba4 	bl	8000200 <strcmp>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d10b      	bne.n	8000ad6 <processCommand+0xce>
    greenLed.mode = LED_MODE_ON;
 8000abe:	4b60      	ldr	r3, [pc, #384]	@ (8000c40 <processCommand+0x238>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	719a      	strb	r2, [r3, #6]
    sprintf(outputBuffer, "\r\nCommand: %s - Zelena LED ON\r\n", commandBuffer);
 8000ac4:	4a55      	ldr	r2, [pc, #340]	@ (8000c1c <processCommand+0x214>)
 8000ac6:	495f      	ldr	r1, [pc, #380]	@ (8000c44 <processCommand+0x23c>)
 8000ac8:	4858      	ldr	r0, [pc, #352]	@ (8000c2c <processCommand+0x224>)
 8000aca:	f005 f9df 	bl	8005e8c <siprintf>
    sendUartMessage(outputBuffer);
 8000ace:	4857      	ldr	r0, [pc, #348]	@ (8000c2c <processCommand+0x224>)
 8000ad0:	f7ff ff76 	bl	80009c0 <sendUartMessage>
}
 8000ad4:	e09e      	b.n	8000c14 <processCommand+0x20c>
  else if (strcmp(upperCommand, "ROFF") == 0) {
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	495b      	ldr	r1, [pc, #364]	@ (8000c48 <processCommand+0x240>)
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fb90 	bl	8000200 <strcmp>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d10b      	bne.n	8000afe <processCommand+0xf6>
    redLed.mode = LED_MODE_OFF;
 8000ae6:	4b4f      	ldr	r3, [pc, #316]	@ (8000c24 <processCommand+0x21c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	719a      	strb	r2, [r3, #6]
    sprintf(outputBuffer, "\r\nCommand: %s - Cervena LED OFF\r\n", commandBuffer);
 8000aec:	4a4b      	ldr	r2, [pc, #300]	@ (8000c1c <processCommand+0x214>)
 8000aee:	4957      	ldr	r1, [pc, #348]	@ (8000c4c <processCommand+0x244>)
 8000af0:	484e      	ldr	r0, [pc, #312]	@ (8000c2c <processCommand+0x224>)
 8000af2:	f005 f9cb 	bl	8005e8c <siprintf>
    sendUartMessage(outputBuffer);
 8000af6:	484d      	ldr	r0, [pc, #308]	@ (8000c2c <processCommand+0x224>)
 8000af8:	f7ff ff62 	bl	80009c0 <sendUartMessage>
}
 8000afc:	e08a      	b.n	8000c14 <processCommand+0x20c>
  else if (strcmp(upperCommand, "BOFF") == 0) {
 8000afe:	463b      	mov	r3, r7
 8000b00:	4953      	ldr	r1, [pc, #332]	@ (8000c50 <processCommand+0x248>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fb7c 	bl	8000200 <strcmp>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d10b      	bne.n	8000b26 <processCommand+0x11e>
    blueLed.mode = LED_MODE_OFF;
 8000b0e:	4b49      	ldr	r3, [pc, #292]	@ (8000c34 <processCommand+0x22c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	719a      	strb	r2, [r3, #6]
    sprintf(outputBuffer, "\r\nCommand: %s - Modra LED OFF\r\n", commandBuffer);
 8000b14:	4a41      	ldr	r2, [pc, #260]	@ (8000c1c <processCommand+0x214>)
 8000b16:	494f      	ldr	r1, [pc, #316]	@ (8000c54 <processCommand+0x24c>)
 8000b18:	4844      	ldr	r0, [pc, #272]	@ (8000c2c <processCommand+0x224>)
 8000b1a:	f005 f9b7 	bl	8005e8c <siprintf>
    sendUartMessage(outputBuffer);
 8000b1e:	4843      	ldr	r0, [pc, #268]	@ (8000c2c <processCommand+0x224>)
 8000b20:	f7ff ff4e 	bl	80009c0 <sendUartMessage>
}
 8000b24:	e076      	b.n	8000c14 <processCommand+0x20c>
  else if (strcmp(upperCommand, "GOFF") == 0) {
 8000b26:	463b      	mov	r3, r7
 8000b28:	494b      	ldr	r1, [pc, #300]	@ (8000c58 <processCommand+0x250>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fb68 	bl	8000200 <strcmp>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10b      	bne.n	8000b4e <processCommand+0x146>
    greenLed.mode = LED_MODE_OFF;
 8000b36:	4b42      	ldr	r3, [pc, #264]	@ (8000c40 <processCommand+0x238>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	719a      	strb	r2, [r3, #6]
    sprintf(outputBuffer, "\r\nCommand: %s - Zelena LED OFF\r\n", commandBuffer);
 8000b3c:	4a37      	ldr	r2, [pc, #220]	@ (8000c1c <processCommand+0x214>)
 8000b3e:	4947      	ldr	r1, [pc, #284]	@ (8000c5c <processCommand+0x254>)
 8000b40:	483a      	ldr	r0, [pc, #232]	@ (8000c2c <processCommand+0x224>)
 8000b42:	f005 f9a3 	bl	8005e8c <siprintf>
    sendUartMessage(outputBuffer);
 8000b46:	4839      	ldr	r0, [pc, #228]	@ (8000c2c <processCommand+0x224>)
 8000b48:	f7ff ff3a 	bl	80009c0 <sendUartMessage>
}
 8000b4c:	e062      	b.n	8000c14 <processCommand+0x20c>
  else if (strcmp(upperCommand, "RESET") == 0) {
 8000b4e:	463b      	mov	r3, r7
 8000b50:	4943      	ldr	r1, [pc, #268]	@ (8000c60 <processCommand+0x258>)
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fb54 	bl	8000200 <strcmp>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d11b      	bne.n	8000b96 <processCommand+0x18e>
    currentState = STATE_INITIAL;
 8000b5e:	4b41      	ldr	r3, [pc, #260]	@ (8000c64 <processCommand+0x25c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
    redLed.mode = LED_MODE_BLINK;
 8000b64:	4b2f      	ldr	r3, [pc, #188]	@ (8000c24 <processCommand+0x21c>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	719a      	strb	r2, [r3, #6]
    redLed.blinkPeriod = 250;
 8000b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c24 <processCommand+0x21c>)
 8000b6c:	22fa      	movs	r2, #250	@ 0xfa
 8000b6e:	609a      	str	r2, [r3, #8]
    blueLed.mode = LED_MODE_BLINK;
 8000b70:	4b30      	ldr	r3, [pc, #192]	@ (8000c34 <processCommand+0x22c>)
 8000b72:	2202      	movs	r2, #2
 8000b74:	719a      	strb	r2, [r3, #6]
    blueLed.blinkPeriod = 500;
 8000b76:	4b2f      	ldr	r3, [pc, #188]	@ (8000c34 <processCommand+0x22c>)
 8000b78:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000b7c:	609a      	str	r2, [r3, #8]
    greenLed.mode = LED_MODE_OFF;
 8000b7e:	4b30      	ldr	r3, [pc, #192]	@ (8000c40 <processCommand+0x238>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	719a      	strb	r2, [r3, #6]
    sprintf(outputBuffer, "\r\nPrikaz: %s - reset to inicialniho stavu\r\n", commandBuffer);
 8000b84:	4a25      	ldr	r2, [pc, #148]	@ (8000c1c <processCommand+0x214>)
 8000b86:	4938      	ldr	r1, [pc, #224]	@ (8000c68 <processCommand+0x260>)
 8000b88:	4828      	ldr	r0, [pc, #160]	@ (8000c2c <processCommand+0x224>)
 8000b8a:	f005 f97f 	bl	8005e8c <siprintf>
    sendUartMessage(outputBuffer);
 8000b8e:	4827      	ldr	r0, [pc, #156]	@ (8000c2c <processCommand+0x224>)
 8000b90:	f7ff ff16 	bl	80009c0 <sendUartMessage>
}
 8000b94:	e03e      	b.n	8000c14 <processCommand+0x20c>
  else if (strncmp(upperCommand, "BLIK ", 5) == 0) {
 8000b96:	463b      	mov	r3, r7
 8000b98:	2205      	movs	r2, #5
 8000b9a:	4934      	ldr	r1, [pc, #208]	@ (8000c6c <processCommand+0x264>)
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f005 fa23 	bl	8005fe8 <strncmp>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d12d      	bne.n	8000c04 <processCommand+0x1fc>
    int period = atoi(&upperCommand[5]);
 8000ba8:	463b      	mov	r3, r7
 8000baa:	3305      	adds	r3, #5
 8000bac:	4618      	mov	r0, r3
 8000bae:	f005 f969 	bl	8005e84 <atoi>
 8000bb2:	61b8      	str	r0, [r7, #24]
    if (period > 0) {
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	dd1b      	ble.n	8000bf2 <processCommand+0x1ea>
      redLed.mode = LED_MODE_BLINK;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <processCommand+0x21c>)
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	719a      	strb	r2, [r3, #6]
      redLed.blinkPeriod = period;
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	4a18      	ldr	r2, [pc, #96]	@ (8000c24 <processCommand+0x21c>)
 8000bc4:	6093      	str	r3, [r2, #8]
      blueLed.mode = LED_MODE_BLINK;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <processCommand+0x22c>)
 8000bc8:	2202      	movs	r2, #2
 8000bca:	719a      	strb	r2, [r3, #6]
      blueLed.blinkPeriod = period;
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	4a19      	ldr	r2, [pc, #100]	@ (8000c34 <processCommand+0x22c>)
 8000bd0:	6093      	str	r3, [r2, #8]
      greenLed.mode = LED_MODE_BLINK;
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <processCommand+0x238>)
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	719a      	strb	r2, [r3, #6]
      greenLed.blinkPeriod = period;
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	4a19      	ldr	r2, [pc, #100]	@ (8000c40 <processCommand+0x238>)
 8000bdc:	6093      	str	r3, [r2, #8]
      sprintf(outputBuffer, "\r\nCommand: %s - Vsechny LED blikaji s periodou: %d ms\r\n", commandBuffer, period);
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c1c <processCommand+0x214>)
 8000be2:	4923      	ldr	r1, [pc, #140]	@ (8000c70 <processCommand+0x268>)
 8000be4:	4811      	ldr	r0, [pc, #68]	@ (8000c2c <processCommand+0x224>)
 8000be6:	f005 f951 	bl	8005e8c <siprintf>
      sendUartMessage(outputBuffer);
 8000bea:	4810      	ldr	r0, [pc, #64]	@ (8000c2c <processCommand+0x224>)
 8000bec:	f7ff fee8 	bl	80009c0 <sendUartMessage>
}
 8000bf0:	e010      	b.n	8000c14 <processCommand+0x20c>
      sprintf(outputBuffer, "\r\nError: Spatna perioda v prikazu '%s'\r\n", commandBuffer);
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <processCommand+0x214>)
 8000bf4:	491f      	ldr	r1, [pc, #124]	@ (8000c74 <processCommand+0x26c>)
 8000bf6:	480d      	ldr	r0, [pc, #52]	@ (8000c2c <processCommand+0x224>)
 8000bf8:	f005 f948 	bl	8005e8c <siprintf>
      sendUartMessage(outputBuffer);
 8000bfc:	480b      	ldr	r0, [pc, #44]	@ (8000c2c <processCommand+0x224>)
 8000bfe:	f7ff fedf 	bl	80009c0 <sendUartMessage>
}
 8000c02:	e007      	b.n	8000c14 <processCommand+0x20c>
    sprintf(outputBuffer, "\r\nError: Neznamy prikaz: '%s'\r\n", commandBuffer);
 8000c04:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <processCommand+0x214>)
 8000c06:	491c      	ldr	r1, [pc, #112]	@ (8000c78 <processCommand+0x270>)
 8000c08:	4808      	ldr	r0, [pc, #32]	@ (8000c2c <processCommand+0x224>)
 8000c0a:	f005 f93f 	bl	8005e8c <siprintf>
    sendUartMessage(outputBuffer);
 8000c0e:	4807      	ldr	r0, [pc, #28]	@ (8000c2c <processCommand+0x224>)
 8000c10:	f7ff fed6 	bl	80009c0 <sendUartMessage>
}
 8000c14:	bf00      	nop
 8000c16:	3720      	adds	r7, #32
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200002f0 	.word	0x200002f0
 8000c20:	08006ac0 	.word	0x08006ac0
 8000c24:	20000004 	.word	0x20000004
 8000c28:	08006ac4 	.word	0x08006ac4
 8000c2c:	20000224 	.word	0x20000224
 8000c30:	08006ae8 	.word	0x08006ae8
 8000c34:	20000020 	.word	0x20000020
 8000c38:	08006aec 	.word	0x08006aec
 8000c3c:	08006b0c 	.word	0x08006b0c
 8000c40:	2000003c 	.word	0x2000003c
 8000c44:	08006b10 	.word	0x08006b10
 8000c48:	08006b30 	.word	0x08006b30
 8000c4c:	08006b38 	.word	0x08006b38
 8000c50:	08006b5c 	.word	0x08006b5c
 8000c54:	08006b64 	.word	0x08006b64
 8000c58:	08006b84 	.word	0x08006b84
 8000c5c:	08006b8c 	.word	0x08006b8c
 8000c60:	08006bb0 	.word	0x08006bb0
 8000c64:	20000307 	.word	0x20000307
 8000c68:	08006bb8 	.word	0x08006bb8
 8000c6c:	08006be4 	.word	0x08006be4
 8000c70:	08006bec 	.word	0x08006bec
 8000c74:	08006c24 	.word	0x08006c24
 8000c78:	08006c50 	.word	0x08006c50

08000c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c82:	f000 fbc0 	bl	8001406 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c86:	f000 f8ef 	bl	8000e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8a:	f000 f9b1 	bl	8000ff0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c8e:	f000 f97d 	bl	8000f8c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000c92:	f000 f92f 	bl	8000ef4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Nastavení pinů pro zelenou LED (PC7)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b62      	ldr	r3, [pc, #392]	@ (8000e30 <main+0x1b4>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000caa:	4a61      	ldr	r2, [pc, #388]	@ (8000e30 <main+0x1b4>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb2:	4b5f      	ldr	r3, [pc, #380]	@ (8000e30 <main+0x1b4>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cbe:	2380      	movs	r3, #128	@ 0x80
 8000cc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4857      	ldr	r0, [pc, #348]	@ (8000e34 <main+0x1b8>)
 8000cd6:	f000 ff91 	bl	8001bfc <HAL_GPIO_Init>

  // Nastartování příjmu UART přes přerušení
  startUartRxInterrupt();
 8000cda:	f7ff fe87 	bl	80009ec <startUartRxInterrupt>

  // Zaslání start zprávy
  sendUartMessage("\r\n--- LED ovladaci system ---\r\n");
 8000cde:	4856      	ldr	r0, [pc, #344]	@ (8000e38 <main+0x1bc>)
 8000ce0:	f7ff fe6e 	bl	80009c0 <sendUartMessage>
  sendUartMessage("Dostupne prikazy:\r\n");
 8000ce4:	4855      	ldr	r0, [pc, #340]	@ (8000e3c <main+0x1c0>)
 8000ce6:	f7ff fe6b 	bl	80009c0 <sendUartMessage>
  sendUartMessage("RON, BON, GON - Zapnuti  Cervene / Modre / Zelene LED\r\n");
 8000cea:	4855      	ldr	r0, [pc, #340]	@ (8000e40 <main+0x1c4>)
 8000cec:	f7ff fe68 	bl	80009c0 <sendUartMessage>
  sendUartMessage("ROFF, BOFF, GOFF - Vypnuti  Cervene / Modre / Zelene LED\r\n");
 8000cf0:	4854      	ldr	r0, [pc, #336]	@ (8000e44 <main+0x1c8>)
 8000cf2:	f7ff fe65 	bl	80009c0 <sendUartMessage>
  sendUartMessage("RESET - Reset na pocatecni stav\r\n");
 8000cf6:	4854      	ldr	r0, [pc, #336]	@ (8000e48 <main+0x1cc>)
 8000cf8:	f7ff fe62 	bl	80009c0 <sendUartMessage>
  sendUartMessage("BLIK n - Vsechny LED blikaji s periodou \"n\" \r\n");
 8000cfc:	4853      	ldr	r0, [pc, #332]	@ (8000e4c <main+0x1d0>)
 8000cfe:	f7ff fe5f 	bl	80009c0 <sendUartMessage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint32_t currentTime = HAL_GetTick();
 8000d02:	f000 fbe9 	bl	80014d8 <HAL_GetTick>
 8000d06:	61f8      	str	r0, [r7, #28]

    // Zpracování příkazů
    if (commandReady) {
 8000d08:	4b51      	ldr	r3, [pc, #324]	@ (8000e50 <main+0x1d4>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d004      	beq.n	8000d1c <main+0xa0>
      processCommand();
 8000d12:	f7ff fe79 	bl	8000a08 <processCommand>
      commandReady = false;
 8000d16:	4b4e      	ldr	r3, [pc, #312]	@ (8000e50 <main+0x1d4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
    }

    // Zpracování tlačítka
    handleButton(currentTime);
 8000d1c:	69f8      	ldr	r0, [r7, #28]
 8000d1e:	f7ff fd5d 	bl	80007dc <handleButton>

    // Aktualizace stavu LED diod

    // Červená LED - chování podle aktuálního stavu
    if (currentState == STATE_INITIAL) {
 8000d22:	4b4c      	ldr	r3, [pc, #304]	@ (8000e54 <main+0x1d8>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10e      	bne.n	8000d48 <main+0xcc>
      // Ve stavu 1 bliká s periodou 250ms
      if (redLed.mode != LED_MODE_ON && redLed.mode != LED_MODE_OFF) {
 8000d2a:	4b4b      	ldr	r3, [pc, #300]	@ (8000e58 <main+0x1dc>)
 8000d2c:	799b      	ldrb	r3, [r3, #6]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d02d      	beq.n	8000d8e <main+0x112>
 8000d32:	4b49      	ldr	r3, [pc, #292]	@ (8000e58 <main+0x1dc>)
 8000d34:	799b      	ldrb	r3, [r3, #6]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d029      	beq.n	8000d8e <main+0x112>
        redLed.mode = LED_MODE_BLINK;
 8000d3a:	4b47      	ldr	r3, [pc, #284]	@ (8000e58 <main+0x1dc>)
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	719a      	strb	r2, [r3, #6]
        redLed.blinkPeriod = 250;
 8000d40:	4b45      	ldr	r3, [pc, #276]	@ (8000e58 <main+0x1dc>)
 8000d42:	22fa      	movs	r2, #250	@ 0xfa
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	e022      	b.n	8000d8e <main+0x112>
      }
    } else if (currentState == STATE_BUTTON_TOGGLE) {
 8000d48:	4b42      	ldr	r3, [pc, #264]	@ (8000e54 <main+0x1d8>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d10b      	bne.n	8000d68 <main+0xec>
      // Ve stavu 2 je ovládána tlačítkem
      if (redLed.mode != LED_MODE_ON && redLed.mode != LED_MODE_OFF) {
 8000d50:	4b41      	ldr	r3, [pc, #260]	@ (8000e58 <main+0x1dc>)
 8000d52:	799b      	ldrb	r3, [r3, #6]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d01a      	beq.n	8000d8e <main+0x112>
 8000d58:	4b3f      	ldr	r3, [pc, #252]	@ (8000e58 <main+0x1dc>)
 8000d5a:	799b      	ldrb	r3, [r3, #6]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d016      	beq.n	8000d8e <main+0x112>
        redLed.mode = LED_MODE_OFF; // Základní stav, přepínán tlačítkem
 8000d60:	4b3d      	ldr	r3, [pc, #244]	@ (8000e58 <main+0x1dc>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	719a      	strb	r2, [r3, #6]
 8000d66:	e012      	b.n	8000d8e <main+0x112>
      }
    } else if (currentState == STATE_CUSTOM_PERIOD) {
 8000d68:	4b3a      	ldr	r3, [pc, #232]	@ (8000e54 <main+0x1d8>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	d10e      	bne.n	8000d8e <main+0x112>
      // Ve stavu 4 bliká s periodou podle délky stisku
      if (redLed.mode != LED_MODE_ON && redLed.mode != LED_MODE_OFF) {
 8000d70:	4b39      	ldr	r3, [pc, #228]	@ (8000e58 <main+0x1dc>)
 8000d72:	799b      	ldrb	r3, [r3, #6]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d00a      	beq.n	8000d8e <main+0x112>
 8000d78:	4b37      	ldr	r3, [pc, #220]	@ (8000e58 <main+0x1dc>)
 8000d7a:	799b      	ldrb	r3, [r3, #6]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d006      	beq.n	8000d8e <main+0x112>
        redLed.mode = LED_MODE_BLINK;
 8000d80:	4b35      	ldr	r3, [pc, #212]	@ (8000e58 <main+0x1dc>)
 8000d82:	2202      	movs	r2, #2
 8000d84:	719a      	strb	r2, [r3, #6]
        redLed.blinkPeriod = customBlinkPeriod;
 8000d86:	4b35      	ldr	r3, [pc, #212]	@ (8000e5c <main+0x1e0>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a33      	ldr	r2, [pc, #204]	@ (8000e58 <main+0x1dc>)
 8000d8c:	6093      	str	r3, [r2, #8]
      }
    }

    // Modrá LED - chování podle aktuálního stavu
    if (currentState == STATE_INITIAL) {
 8000d8e:	4b31      	ldr	r3, [pc, #196]	@ (8000e54 <main+0x1d8>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10f      	bne.n	8000db6 <main+0x13a>
      // Ve stavu 1 bliká s periodou 500ms
      if (blueLed.mode != LED_MODE_ON && blueLed.mode != LED_MODE_OFF) {
 8000d96:	4b32      	ldr	r3, [pc, #200]	@ (8000e60 <main+0x1e4>)
 8000d98:	799b      	ldrb	r3, [r3, #6]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d03a      	beq.n	8000e14 <main+0x198>
 8000d9e:	4b30      	ldr	r3, [pc, #192]	@ (8000e60 <main+0x1e4>)
 8000da0:	799b      	ldrb	r3, [r3, #6]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d036      	beq.n	8000e14 <main+0x198>
        blueLed.mode = LED_MODE_BLINK;
 8000da6:	4b2e      	ldr	r3, [pc, #184]	@ (8000e60 <main+0x1e4>)
 8000da8:	2202      	movs	r2, #2
 8000daa:	719a      	strb	r2, [r3, #6]
        blueLed.blinkPeriod = 500;
 8000dac:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <main+0x1e4>)
 8000dae:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	e02e      	b.n	8000e14 <main+0x198>
      }
    } else if (currentState == STATE_BUTTON_TOGGLE || currentState == STATE_TRANSITIONAL) {
 8000db6:	4b27      	ldr	r3, [pc, #156]	@ (8000e54 <main+0x1d8>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d003      	beq.n	8000dc6 <main+0x14a>
 8000dbe:	4b25      	ldr	r3, [pc, #148]	@ (8000e54 <main+0x1d8>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d10e      	bne.n	8000de4 <main+0x168>
      // Ve stavu 2 a přechodném stavu bliká s periodou 100ms
      if (blueLed.mode != LED_MODE_ON && blueLed.mode != LED_MODE_OFF) {
 8000dc6:	4b26      	ldr	r3, [pc, #152]	@ (8000e60 <main+0x1e4>)
 8000dc8:	799b      	ldrb	r3, [r3, #6]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d021      	beq.n	8000e12 <main+0x196>
 8000dce:	4b24      	ldr	r3, [pc, #144]	@ (8000e60 <main+0x1e4>)
 8000dd0:	799b      	ldrb	r3, [r3, #6]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d01d      	beq.n	8000e12 <main+0x196>
        blueLed.mode = LED_MODE_BLINK;
 8000dd6:	4b22      	ldr	r3, [pc, #136]	@ (8000e60 <main+0x1e4>)
 8000dd8:	2202      	movs	r2, #2
 8000dda:	719a      	strb	r2, [r3, #6]
        blueLed.blinkPeriod = 200; // 100ms perioda (50ms on, 50ms off)
 8000ddc:	4b20      	ldr	r3, [pc, #128]	@ (8000e60 <main+0x1e4>)
 8000dde:	22c8      	movs	r2, #200	@ 0xc8
 8000de0:	609a      	str	r2, [r3, #8]
      if (blueLed.mode != LED_MODE_ON && blueLed.mode != LED_MODE_OFF) {
 8000de2:	e016      	b.n	8000e12 <main+0x196>
      }
    } else if (currentState == STATE_CUSTOM_PERIOD) {
 8000de4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <main+0x1d8>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d113      	bne.n	8000e14 <main+0x198>
      // Ve stavu 4 bliká asynchronně 100ms svítí/400ms nesvítí
      if (blueLed.mode != LED_MODE_ON && blueLed.mode != LED_MODE_OFF) {
 8000dec:	4b1c      	ldr	r3, [pc, #112]	@ (8000e60 <main+0x1e4>)
 8000dee:	799b      	ldrb	r3, [r3, #6]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d00f      	beq.n	8000e14 <main+0x198>
 8000df4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <main+0x1e4>)
 8000df6:	799b      	ldrb	r3, [r3, #6]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d00b      	beq.n	8000e14 <main+0x198>
        blueLed.mode = LED_MODE_BLINK_ASYM;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <main+0x1e4>)
 8000dfe:	2203      	movs	r2, #3
 8000e00:	719a      	strb	r2, [r3, #6]
        blueLed.onTime = 100;
 8000e02:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <main+0x1e4>)
 8000e04:	2264      	movs	r2, #100	@ 0x64
 8000e06:	615a      	str	r2, [r3, #20]
        blueLed.offTime = 400;
 8000e08:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <main+0x1e4>)
 8000e0a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000e0e:	619a      	str	r2, [r3, #24]
 8000e10:	e000      	b.n	8000e14 <main+0x198>
      if (blueLed.mode != LED_MODE_ON && blueLed.mode != LED_MODE_OFF) {
 8000e12:	bf00      	nop
      }
    }

    // Aktualizace stavu jednotlivých LED
    updateLed(&redLed, currentTime);
 8000e14:	69f9      	ldr	r1, [r7, #28]
 8000e16:	4810      	ldr	r0, [pc, #64]	@ (8000e58 <main+0x1dc>)
 8000e18:	f7ff fc52 	bl	80006c0 <updateLed>
    updateLed(&blueLed, currentTime);
 8000e1c:	69f9      	ldr	r1, [r7, #28]
 8000e1e:	4810      	ldr	r0, [pc, #64]	@ (8000e60 <main+0x1e4>)
 8000e20:	f7ff fc4e 	bl	80006c0 <updateLed>
    updateLed(&greenLed, currentTime);
 8000e24:	69f9      	ldr	r1, [r7, #28]
 8000e26:	480f      	ldr	r0, [pc, #60]	@ (8000e64 <main+0x1e8>)
 8000e28:	f7ff fc4a 	bl	80006c0 <updateLed>
  {
 8000e2c:	e769      	b.n	8000d02 <main+0x86>
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000
 8000e34:	48000800 	.word	0x48000800
 8000e38:	08006c70 	.word	0x08006c70
 8000e3c:	08006c90 	.word	0x08006c90
 8000e40:	08006ca4 	.word	0x08006ca4
 8000e44:	08006cdc 	.word	0x08006cdc
 8000e48:	08006d18 	.word	0x08006d18
 8000e4c:	08006d3c 	.word	0x08006d3c
 8000e50:	20000306 	.word	0x20000306
 8000e54:	20000307 	.word	0x20000307
 8000e58:	20000004 	.word	0x20000004
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	20000020 	.word	0x20000020
 8000e64:	2000003c 	.word	0x2000003c

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b096      	sub	sp, #88	@ 0x58
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	2244      	movs	r2, #68	@ 0x44
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f005 f8ae 	bl	8005fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e8a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e8e:	f001 f897 	bl	8001fc0 <HAL_PWREx_ControlVoltageScaling>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e98:	f000 f908 	bl	80010ac <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ea8:	2360      	movs	r3, #96	@ 0x60
 8000eaa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 f937 	bl	8002128 <HAL_RCC_OscConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000ec0:	f000 f8f4 	bl	80010ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f001 fd3d 	bl	800295c <HAL_RCC_ClockConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ee8:	f000 f8e0 	bl	80010ac <Error_Handler>
  }
}
 8000eec:	bf00      	nop
 8000eee:	3758      	adds	r7, #88	@ 0x58
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ef8:	4b22      	ldr	r3, [pc, #136]	@ (8000f84 <MX_LPUART1_UART_Init+0x90>)
 8000efa:	4a23      	ldr	r2, [pc, #140]	@ (8000f88 <MX_LPUART1_UART_Init+0x94>)
 8000efc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000efe:	4b21      	ldr	r3, [pc, #132]	@ (8000f84 <MX_LPUART1_UART_Init+0x90>)
 8000f00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f04:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b1f      	ldr	r3, [pc, #124]	@ (8000f84 <MX_LPUART1_UART_Init+0x90>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f84 <MX_LPUART1_UART_Init+0x90>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <MX_LPUART1_UART_Init+0x90>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	@ (8000f84 <MX_LPUART1_UART_Init+0x90>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <MX_LPUART1_UART_Init+0x90>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f24:	4b17      	ldr	r3, [pc, #92]	@ (8000f84 <MX_LPUART1_UART_Init+0x90>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <MX_LPUART1_UART_Init+0x90>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f30:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <MX_LPUART1_UART_Init+0x90>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000f36:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <MX_LPUART1_UART_Init+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f3c:	4811      	ldr	r0, [pc, #68]	@ (8000f84 <MX_LPUART1_UART_Init+0x90>)
 8000f3e:	f002 fce3 	bl	8003908 <HAL_UART_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f48:	f000 f8b0 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	480d      	ldr	r0, [pc, #52]	@ (8000f84 <MX_LPUART1_UART_Init+0x90>)
 8000f50:	f004 fecd 	bl	8005cee <HAL_UARTEx_SetTxFifoThreshold>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f5a:	f000 f8a7 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4808      	ldr	r0, [pc, #32]	@ (8000f84 <MX_LPUART1_UART_Init+0x90>)
 8000f62:	f004 ff02 	bl	8005d6a <HAL_UARTEx_SetRxFifoThreshold>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f6c:	f000 f89e 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f70:	4804      	ldr	r0, [pc, #16]	@ (8000f84 <MX_LPUART1_UART_Init+0x90>)
 8000f72:	f004 fe83 	bl	8005c7c <HAL_UARTEx_DisableFifoMode>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f7c:	f000 f896 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200000d0 	.word	0x200000d0
 8000f88:	40008000 	.word	0x40008000

08000f8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f92:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <MX_DMA_Init+0x60>)
 8000f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f96:	4a15      	ldr	r2, [pc, #84]	@ (8000fec <MX_DMA_Init+0x60>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f9e:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <MX_DMA_Init+0x60>)
 8000fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000faa:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <MX_DMA_Init+0x60>)
 8000fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fae:	4a0f      	ldr	r2, [pc, #60]	@ (8000fec <MX_DMA_Init+0x60>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <MX_DMA_Init+0x60>)
 8000fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	200b      	movs	r0, #11
 8000fc8:	f000 fb6d 	bl	80016a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fcc:	200b      	movs	r0, #11
 8000fce:	f000 fb86 	bl	80016de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	200c      	movs	r0, #12
 8000fd8:	f000 fb65 	bl	80016a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000fdc:	200c      	movs	r0, #12
 8000fde:	f000 fb7e 	bl	80016de <HAL_NVIC_EnableIRQ>

}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000

08000ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	4b26      	ldr	r3, [pc, #152]	@ (80010a0 <MX_GPIO_Init+0xb0>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	4a25      	ldr	r2, [pc, #148]	@ (80010a0 <MX_GPIO_Init+0xb0>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001012:	4b23      	ldr	r3, [pc, #140]	@ (80010a0 <MX_GPIO_Init+0xb0>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	4b20      	ldr	r3, [pc, #128]	@ (80010a0 <MX_GPIO_Init+0xb0>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	4a1f      	ldr	r2, [pc, #124]	@ (80010a0 <MX_GPIO_Init+0xb0>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102a:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <MX_GPIO_Init+0xb0>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001036:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <MX_GPIO_Init+0xb0>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	4a19      	ldr	r2, [pc, #100]	@ (80010a0 <MX_GPIO_Init+0xb0>)
 800103c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001042:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <MX_GPIO_Init+0xb0>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800104e:	f001 f85b 	bl	8002108 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001058:	4812      	ldr	r0, [pc, #72]	@ (80010a4 <MX_GPIO_Init+0xb4>)
 800105a:	f000 ff79 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800105e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001062:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001064:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001068:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	4619      	mov	r1, r3
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <MX_GPIO_Init+0xb8>)
 8001076:	f000 fdc1 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800107a:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800107e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4619      	mov	r1, r3
 8001092:	4804      	ldr	r0, [pc, #16]	@ (80010a4 <MX_GPIO_Init+0xb4>)
 8001094:	f000 fdb2 	bl	8001bfc <HAL_GPIO_Init>

}
 8001098:	bf00      	nop
 800109a:	3720      	adds	r7, #32
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021000 	.word	0x40021000
 80010a4:	48000400 	.word	0x48000400
 80010a8:	48000800 	.word	0x48000800

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <Error_Handler+0x8>

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <HAL_MspInit+0x44>)
 80010c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c2:	4a0e      	ldr	r2, [pc, #56]	@ (80010fc <HAL_MspInit+0x44>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ca:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <HAL_MspInit+0x44>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <HAL_MspInit+0x44>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010da:	4a08      	ldr	r2, [pc, #32]	@ (80010fc <HAL_MspInit+0x44>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_MspInit+0x44>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000

08001100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0ae      	sub	sp, #184	@ 0xb8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	2294      	movs	r2, #148	@ 0x94
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f004 ff59 	bl	8005fd8 <memset>
  if(huart->Instance==LPUART1)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a50      	ldr	r2, [pc, #320]	@ (800126c <HAL_UART_MspInit+0x16c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	f040 8098 	bne.w	8001262 <HAL_UART_MspInit+0x162>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001132:	2320      	movs	r3, #32
 8001134:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001136:	2300      	movs	r3, #0
 8001138:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	4618      	mov	r0, r3
 8001140:	f001 feca 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800114a:	f7ff ffaf 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800114e:	4b48      	ldr	r3, [pc, #288]	@ (8001270 <HAL_UART_MspInit+0x170>)
 8001150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001152:	4a47      	ldr	r2, [pc, #284]	@ (8001270 <HAL_UART_MspInit+0x170>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800115a:	4b45      	ldr	r3, [pc, #276]	@ (8001270 <HAL_UART_MspInit+0x170>)
 800115c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001166:	4b42      	ldr	r3, [pc, #264]	@ (8001270 <HAL_UART_MspInit+0x170>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	4a41      	ldr	r2, [pc, #260]	@ (8001270 <HAL_UART_MspInit+0x170>)
 800116c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001172:	4b3f      	ldr	r3, [pc, #252]	@ (8001270 <HAL_UART_MspInit+0x170>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 800117e:	f000 ffc3 	bl	8002108 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001182:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001186:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800119c:	2308      	movs	r3, #8
 800119e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011a2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4832      	ldr	r0, [pc, #200]	@ (8001274 <HAL_UART_MspInit+0x174>)
 80011aa:	f000 fd27 	bl	8001bfc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80011ae:	4b32      	ldr	r3, [pc, #200]	@ (8001278 <HAL_UART_MspInit+0x178>)
 80011b0:	4a32      	ldr	r2, [pc, #200]	@ (800127c <HAL_UART_MspInit+0x17c>)
 80011b2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80011b4:	4b30      	ldr	r3, [pc, #192]	@ (8001278 <HAL_UART_MspInit+0x178>)
 80011b6:	2222      	movs	r2, #34	@ 0x22
 80011b8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001278 <HAL_UART_MspInit+0x178>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001278 <HAL_UART_MspInit+0x178>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001278 <HAL_UART_MspInit+0x178>)
 80011c8:	2280      	movs	r2, #128	@ 0x80
 80011ca:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001278 <HAL_UART_MspInit+0x178>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011d2:	4b29      	ldr	r3, [pc, #164]	@ (8001278 <HAL_UART_MspInit+0x178>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80011d8:	4b27      	ldr	r3, [pc, #156]	@ (8001278 <HAL_UART_MspInit+0x178>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011de:	4b26      	ldr	r3, [pc, #152]	@ (8001278 <HAL_UART_MspInit+0x178>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80011e4:	4824      	ldr	r0, [pc, #144]	@ (8001278 <HAL_UART_MspInit+0x178>)
 80011e6:	f000 fa95 	bl	8001714 <HAL_DMA_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 80011f0:	f7ff ff5c 	bl	80010ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a20      	ldr	r2, [pc, #128]	@ (8001278 <HAL_UART_MspInit+0x178>)
 80011f8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80011fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001278 <HAL_UART_MspInit+0x178>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8001200:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <HAL_UART_MspInit+0x180>)
 8001202:	4a20      	ldr	r2, [pc, #128]	@ (8001284 <HAL_UART_MspInit+0x184>)
 8001204:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001206:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <HAL_UART_MspInit+0x180>)
 8001208:	2223      	movs	r2, #35	@ 0x23
 800120a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800120c:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <HAL_UART_MspInit+0x180>)
 800120e:	2210      	movs	r2, #16
 8001210:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001212:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <HAL_UART_MspInit+0x180>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001218:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <HAL_UART_MspInit+0x180>)
 800121a:	2280      	movs	r2, #128	@ 0x80
 800121c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800121e:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <HAL_UART_MspInit+0x180>)
 8001220:	2200      	movs	r2, #0
 8001222:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001224:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <HAL_UART_MspInit+0x180>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <HAL_UART_MspInit+0x180>)
 800122c:	2200      	movs	r2, #0
 800122e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <HAL_UART_MspInit+0x180>)
 8001232:	2200      	movs	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001236:	4812      	ldr	r0, [pc, #72]	@ (8001280 <HAL_UART_MspInit+0x180>)
 8001238:	f000 fa6c 	bl	8001714 <HAL_DMA_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_UART_MspInit+0x146>
    {
      Error_Handler();
 8001242:	f7ff ff33 	bl	80010ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a0d      	ldr	r2, [pc, #52]	@ (8001280 <HAL_UART_MspInit+0x180>)
 800124a:	679a      	str	r2, [r3, #120]	@ 0x78
 800124c:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <HAL_UART_MspInit+0x180>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	2046      	movs	r0, #70	@ 0x46
 8001258:	f000 fa25 	bl	80016a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800125c:	2046      	movs	r0, #70	@ 0x46
 800125e:	f000 fa3e 	bl	80016de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001262:	bf00      	nop
 8001264:	37b8      	adds	r7, #184	@ 0xb8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40008000 	.word	0x40008000
 8001270:	40021000 	.word	0x40021000
 8001274:	48001800 	.word	0x48001800
 8001278:	20000160 	.word	0x20000160
 800127c:	40020008 	.word	0x40020008
 8001280:	200001c0 	.word	0x200001c0
 8001284:	4002001c 	.word	0x4002001c

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <NMI_Handler+0x4>

08001290 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <HardFault_Handler+0x4>

08001298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <MemManage_Handler+0x4>

080012a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <UsageFault_Handler+0x4>

080012b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012de:	f000 f8e7 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80012ec:	4802      	ldr	r0, [pc, #8]	@ (80012f8 <DMA1_Channel1_IRQHandler+0x10>)
 80012ee:	f000 fb74 	bl	80019da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000160 	.word	0x20000160

080012fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001300:	4802      	ldr	r0, [pc, #8]	@ (800130c <DMA1_Channel2_IRQHandler+0x10>)
 8001302:	f000 fb6a 	bl	80019da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200001c0 	.word	0x200001c0

08001310 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <LPUART1_IRQHandler+0x10>)
 8001316:	f002 fcdb 	bl	8003cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200000d0 	.word	0x200000d0

08001324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800132c:	4a14      	ldr	r2, [pc, #80]	@ (8001380 <_sbrk+0x5c>)
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <_sbrk+0x60>)
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001338:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <_sbrk+0x64>)
 8001342:	4a12      	ldr	r2, [pc, #72]	@ (800138c <_sbrk+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	429a      	cmp	r2, r3
 8001352:	d207      	bcs.n	8001364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001354:	f004 fe5a 	bl	800600c <__errno>
 8001358:	4603      	mov	r3, r0
 800135a:	220c      	movs	r2, #12
 800135c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001362:	e009      	b.n	8001378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136a:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a05      	ldr	r2, [pc, #20]	@ (8001388 <_sbrk+0x64>)
 8001374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200a0000 	.word	0x200a0000
 8001384:	00000400 	.word	0x00000400
 8001388:	2000031c 	.word	0x2000031c
 800138c:	20000470 	.word	0x20000470

08001390 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <SystemInit+0x20>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800139a:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <SystemInit+0x20>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013b8:	f7ff ffea 	bl	8001390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013bc:	480c      	ldr	r0, [pc, #48]	@ (80013f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80013be:	490d      	ldr	r1, [pc, #52]	@ (80013f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c0:	4a0d      	ldr	r2, [pc, #52]	@ (80013f8 <LoopForever+0xe>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c4:	e002      	b.n	80013cc <LoopCopyDataInit>

080013c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ca:	3304      	adds	r3, #4

080013cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d0:	d3f9      	bcc.n	80013c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d2:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001400 <LoopForever+0x16>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d8:	e001      	b.n	80013de <LoopFillZerobss>

080013da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013dc:	3204      	adds	r2, #4

080013de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e0:	d3fb      	bcc.n	80013da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e2:	f004 fe19 	bl	8006018 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013e6:	f7ff fc49 	bl	8000c7c <main>

080013ea <LoopForever>:

LoopForever:
    b LoopForever
 80013ea:	e7fe      	b.n	80013ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013ec:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f4:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80013f8:	08006f20 	.word	0x08006f20
  ldr r2, =_sbss
 80013fc:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001400:	2000046c 	.word	0x2000046c

08001404 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC1_IRQHandler>

08001406 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001410:	2003      	movs	r0, #3
 8001412:	f000 f93d 	bl	8001690 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001416:	200f      	movs	r0, #15
 8001418:	f000 f80e 	bl	8001438 <HAL_InitTick>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	71fb      	strb	r3, [r7, #7]
 8001426:	e001      	b.n	800142c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001428:	f7ff fe46 	bl	80010b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800142c:	79fb      	ldrb	r3, [r7, #7]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001444:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <HAL_InitTick+0x6c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d023      	beq.n	8001494 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800144c:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <HAL_InitTick+0x70>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <HAL_InitTick+0x6c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800145a:	fbb3 f3f1 	udiv	r3, r3, r1
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f949 	bl	80016fa <HAL_SYSTICK_Config>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10f      	bne.n	800148e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d809      	bhi.n	8001488 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001474:	2200      	movs	r2, #0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800147c:	f000 f913 	bl	80016a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001480:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <HAL_InitTick+0x74>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e007      	b.n	8001498 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	e004      	b.n	8001498 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	e001      	b.n	8001498 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001498:	7bfb      	ldrb	r3, [r7, #15]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000060 	.word	0x20000060
 80014a8:	20000058 	.word	0x20000058
 80014ac:	2000005c 	.word	0x2000005c

080014b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_IncTick+0x20>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_IncTick+0x24>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	@ (80014d4 <HAL_IncTick+0x24>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000060 	.word	0x20000060
 80014d4:	20000320 	.word	0x20000320

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	@ (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000320 	.word	0x20000320

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001518:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800151c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	@ (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db0b      	blt.n	800157e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4907      	ldr	r1, [pc, #28]	@ (800158c <__NVIC_EnableIRQ+0x38>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	@ (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	@ (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	@ 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	@ 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800165c:	d301      	bcc.n	8001662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	4a0a      	ldr	r2, [pc, #40]	@ (800168c <SysTick_Config+0x40>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166a:	210f      	movs	r1, #15
 800166c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001670:	f7ff ff8e 	bl	8001590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <SysTick_Config+0x40>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	@ (800168c <SysTick_Config+0x40>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff29 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff3e 	bl	8001538 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff8e 	bl	80015e4 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5d 	bl	8001590 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff31 	bl	8001554 <__NVIC_EnableIRQ>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ffa2 	bl	800164c <SysTick_Config>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e08d      	b.n	8001842 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	4b47      	ldr	r3, [pc, #284]	@ (800184c <HAL_DMA_Init+0x138>)
 800172e:	429a      	cmp	r2, r3
 8001730:	d80f      	bhi.n	8001752 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	4b45      	ldr	r3, [pc, #276]	@ (8001850 <HAL_DMA_Init+0x13c>)
 800173a:	4413      	add	r3, r2
 800173c:	4a45      	ldr	r2, [pc, #276]	@ (8001854 <HAL_DMA_Init+0x140>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	009a      	lsls	r2, r3, #2
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a42      	ldr	r2, [pc, #264]	@ (8001858 <HAL_DMA_Init+0x144>)
 800174e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001750:	e00e      	b.n	8001770 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	4b40      	ldr	r3, [pc, #256]	@ (800185c <HAL_DMA_Init+0x148>)
 800175a:	4413      	add	r3, r2
 800175c:	4a3d      	ldr	r2, [pc, #244]	@ (8001854 <HAL_DMA_Init+0x140>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	091b      	lsrs	r3, r3, #4
 8001764:	009a      	lsls	r2, r3, #2
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a3c      	ldr	r2, [pc, #240]	@ (8001860 <HAL_DMA_Init+0x14c>)
 800176e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2202      	movs	r2, #2
 8001774:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800178a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001794:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f9b8 	bl	8001b38 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017d0:	d102      	bne.n	80017d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017ec:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d010      	beq.n	8001818 <HAL_DMA_Init+0x104>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d80c      	bhi.n	8001818 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f9d8 	bl	8001bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	e008      	b.n	800182a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40020407 	.word	0x40020407
 8001850:	bffdfff8 	.word	0xbffdfff8
 8001854:	cccccccd 	.word	0xcccccccd
 8001858:	40020000 	.word	0x40020000
 800185c:	bffdfbf8 	.word	0xbffdfbf8
 8001860:	40020400 	.word	0x40020400

08001864 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d008      	beq.n	800188e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2204      	movs	r2, #4
 8001880:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e040      	b.n	8001910 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 020e 	bic.w	r2, r2, #14
 800189c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018ac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0201 	bic.w	r2, r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c2:	f003 021c 	and.w	r2, r3, #28
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	2101      	movs	r1, #1
 80018cc:	fa01 f202 	lsl.w	r2, r1, r2
 80018d0:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018da:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00c      	beq.n	80018fe <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80018fc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800190e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d005      	beq.n	8001940 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2204      	movs	r2, #4
 8001938:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	73fb      	strb	r3, [r7, #15]
 800193e:	e047      	b.n	80019d0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 020e 	bic.w	r2, r2, #14
 800194e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800196a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800196e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001974:	f003 021c 	and.w	r2, r3, #28
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	2101      	movs	r1, #1
 800197e:	fa01 f202 	lsl.w	r2, r1, r2
 8001982:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800198c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00c      	beq.n	80019b0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80019ae:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	4798      	blx	r3
    }
  }
  return status;
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f6:	f003 031c 	and.w	r3, r3, #28
 80019fa:	2204      	movs	r2, #4
 80019fc:	409a      	lsls	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d026      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x7a>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d021      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0320 	and.w	r3, r3, #32
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d107      	bne.n	8001a2e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0204 	bic.w	r2, r2, #4
 8001a2c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	f003 021c 	and.w	r2, r3, #28
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a40:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d071      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001a52:	e06c      	b.n	8001b2e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a58:	f003 031c 	and.w	r3, r3, #28
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d02e      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0xec>
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d029      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10b      	bne.n	8001a98 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 020a 	bic.w	r2, r2, #10
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9c:	f003 021c 	and.w	r2, r3, #28
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	2102      	movs	r1, #2
 8001aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aaa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if(hdma->XferCpltCallback != NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d038      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ac4:	e033      	b.n	8001b2e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aca:	f003 031c 	and.w	r3, r3, #28
 8001ace:	2208      	movs	r2, #8
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d02a      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x156>
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d025      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 020e 	bic.w	r2, r2, #14
 8001af2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af8:	f003 021c 	and.w	r2, r3, #28
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b00:	2101      	movs	r1, #1
 8001b02:	fa01 f202 	lsl.w	r2, r1, r2
 8001b06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b2e:	bf00      	nop
 8001b30:	bf00      	nop
}
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b17      	ldr	r3, [pc, #92]	@ (8001ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d80a      	bhi.n	8001b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001b58:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b60:	e007      	b.n	8001b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	009a      	lsls	r2, r3, #2
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b6c:	4413      	add	r3, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	3b08      	subs	r3, #8
 8001b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001bac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001b88:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	2201      	movs	r2, #1
 8001b92:	409a      	lsls	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	40020407 	.word	0x40020407
 8001ba8:	4002081c 	.word	0x4002081c
 8001bac:	cccccccd 	.word	0xcccccccd
 8001bb0:	40020880 	.word	0x40020880

08001bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a08      	ldr	r2, [pc, #32]	@ (8001bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001bd6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2201      	movs	r2, #1
 8001be2:	409a      	lsls	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	1000823f 	.word	0x1000823f
 8001bf8:	40020940 	.word	0x40020940

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0a:	e166      	b.n	8001eda <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8158 	beq.w	8001ed4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d005      	beq.n	8001c3c <HAL_GPIO_Init+0x40>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d130      	bne.n	8001c9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	2203      	movs	r2, #3
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c72:	2201      	movs	r2, #1
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 0201 	and.w	r2, r3, #1
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d017      	beq.n	8001cda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d123      	bne.n	8001d2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	08da      	lsrs	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3208      	adds	r2, #8
 8001cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	691a      	ldr	r2, [r3, #16]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	08da      	lsrs	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3208      	adds	r2, #8
 8001d28:	6939      	ldr	r1, [r7, #16]
 8001d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	2203      	movs	r2, #3
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0203 	and.w	r2, r3, #3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80b2 	beq.w	8001ed4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d70:	4b61      	ldr	r3, [pc, #388]	@ (8001ef8 <HAL_GPIO_Init+0x2fc>)
 8001d72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d74:	4a60      	ldr	r2, [pc, #384]	@ (8001ef8 <HAL_GPIO_Init+0x2fc>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d7c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ef8 <HAL_GPIO_Init+0x2fc>)
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d88:	4a5c      	ldr	r2, [pc, #368]	@ (8001efc <HAL_GPIO_Init+0x300>)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001db2:	d02b      	beq.n	8001e0c <HAL_GPIO_Init+0x210>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a52      	ldr	r2, [pc, #328]	@ (8001f00 <HAL_GPIO_Init+0x304>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d025      	beq.n	8001e08 <HAL_GPIO_Init+0x20c>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a51      	ldr	r2, [pc, #324]	@ (8001f04 <HAL_GPIO_Init+0x308>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d01f      	beq.n	8001e04 <HAL_GPIO_Init+0x208>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a50      	ldr	r2, [pc, #320]	@ (8001f08 <HAL_GPIO_Init+0x30c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d019      	beq.n	8001e00 <HAL_GPIO_Init+0x204>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a4f      	ldr	r2, [pc, #316]	@ (8001f0c <HAL_GPIO_Init+0x310>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d013      	beq.n	8001dfc <HAL_GPIO_Init+0x200>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a4e      	ldr	r2, [pc, #312]	@ (8001f10 <HAL_GPIO_Init+0x314>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d00d      	beq.n	8001df8 <HAL_GPIO_Init+0x1fc>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a4d      	ldr	r2, [pc, #308]	@ (8001f14 <HAL_GPIO_Init+0x318>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d007      	beq.n	8001df4 <HAL_GPIO_Init+0x1f8>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a4c      	ldr	r2, [pc, #304]	@ (8001f18 <HAL_GPIO_Init+0x31c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d101      	bne.n	8001df0 <HAL_GPIO_Init+0x1f4>
 8001dec:	2307      	movs	r3, #7
 8001dee:	e00e      	b.n	8001e0e <HAL_GPIO_Init+0x212>
 8001df0:	2308      	movs	r3, #8
 8001df2:	e00c      	b.n	8001e0e <HAL_GPIO_Init+0x212>
 8001df4:	2306      	movs	r3, #6
 8001df6:	e00a      	b.n	8001e0e <HAL_GPIO_Init+0x212>
 8001df8:	2305      	movs	r3, #5
 8001dfa:	e008      	b.n	8001e0e <HAL_GPIO_Init+0x212>
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	e006      	b.n	8001e0e <HAL_GPIO_Init+0x212>
 8001e00:	2303      	movs	r3, #3
 8001e02:	e004      	b.n	8001e0e <HAL_GPIO_Init+0x212>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e002      	b.n	8001e0e <HAL_GPIO_Init+0x212>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <HAL_GPIO_Init+0x212>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	f002 0203 	and.w	r2, r2, #3
 8001e14:	0092      	lsls	r2, r2, #2
 8001e16:	4093      	lsls	r3, r2
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e1e:	4937      	ldr	r1, [pc, #220]	@ (8001efc <HAL_GPIO_Init+0x300>)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	3302      	adds	r3, #2
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e2c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f1c <HAL_GPIO_Init+0x320>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e50:	4a32      	ldr	r2, [pc, #200]	@ (8001f1c <HAL_GPIO_Init+0x320>)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e56:	4b31      	ldr	r3, [pc, #196]	@ (8001f1c <HAL_GPIO_Init+0x320>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e7a:	4a28      	ldr	r2, [pc, #160]	@ (8001f1c <HAL_GPIO_Init+0x320>)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e80:	4b26      	ldr	r3, [pc, #152]	@ (8001f1c <HAL_GPIO_Init+0x320>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f1c <HAL_GPIO_Init+0x320>)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8001f1c <HAL_GPIO_Init+0x320>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ece:	4a13      	ldr	r2, [pc, #76]	@ (8001f1c <HAL_GPIO_Init+0x320>)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f47f ae91 	bne.w	8001c0c <HAL_GPIO_Init+0x10>
  }
}
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40010000 	.word	0x40010000
 8001f00:	48000400 	.word	0x48000400
 8001f04:	48000800 	.word	0x48000800
 8001f08:	48000c00 	.word	0x48000c00
 8001f0c:	48001000 	.word	0x48001000
 8001f10:	48001400 	.word	0x48001400
 8001f14:	48001800 	.word	0x48001800
 8001f18:	48001c00 	.word	0x48001c00
 8001f1c:	40010400 	.word	0x40010400

08001f20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	887b      	ldrh	r3, [r7, #2]
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
 8001f3c:	e001      	b.n	8001f42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f60:	787b      	ldrb	r3, [r7, #1]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f6c:	e002      	b.n	8001f74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f6e:	887a      	ldrh	r2, [r7, #2]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f84:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f90:	d102      	bne.n	8001f98 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001f92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f96:	e00b      	b.n	8001fb0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001f98:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fa6:	d102      	bne.n	8001fae <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001fa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fac:	e000      	b.n	8001fb0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001fae:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40007000 	.word	0x40007000

08001fc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d141      	bne.n	8002052 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fce:	4b4b      	ldr	r3, [pc, #300]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fda:	d131      	bne.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fdc:	4b47      	ldr	r3, [pc, #284]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fe2:	4a46      	ldr	r2, [pc, #280]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fe8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fec:	4b43      	ldr	r3, [pc, #268]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ff4:	4a41      	ldr	r2, [pc, #260]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ffa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ffc:	4b40      	ldr	r3, [pc, #256]	@ (8002100 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2232      	movs	r2, #50	@ 0x32
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	4a3f      	ldr	r2, [pc, #252]	@ (8002104 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	0c9b      	lsrs	r3, r3, #18
 800200e:	3301      	adds	r3, #1
 8002010:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002012:	e002      	b.n	800201a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	3b01      	subs	r3, #1
 8002018:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800201a:	4b38      	ldr	r3, [pc, #224]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002026:	d102      	bne.n	800202e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f2      	bne.n	8002014 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800202e:	4b33      	ldr	r3, [pc, #204]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800203a:	d158      	bne.n	80020ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e057      	b.n	80020f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002040:	4b2e      	ldr	r3, [pc, #184]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002046:	4a2d      	ldr	r2, [pc, #180]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800204c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002050:	e04d      	b.n	80020ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002058:	d141      	bne.n	80020de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800205a:	4b28      	ldr	r3, [pc, #160]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002066:	d131      	bne.n	80020cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002068:	4b24      	ldr	r3, [pc, #144]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800206e:	4a23      	ldr	r2, [pc, #140]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002074:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002078:	4b20      	ldr	r3, [pc, #128]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002080:	4a1e      	ldr	r2, [pc, #120]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002082:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002086:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002088:	4b1d      	ldr	r3, [pc, #116]	@ (8002100 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2232      	movs	r2, #50	@ 0x32
 800208e:	fb02 f303 	mul.w	r3, r2, r3
 8002092:	4a1c      	ldr	r2, [pc, #112]	@ (8002104 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002094:	fba2 2303 	umull	r2, r3, r2, r3
 8002098:	0c9b      	lsrs	r3, r3, #18
 800209a:	3301      	adds	r3, #1
 800209c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800209e:	e002      	b.n	80020a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020a6:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020b2:	d102      	bne.n	80020ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f2      	bne.n	80020a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020c6:	d112      	bne.n	80020ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e011      	b.n	80020f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020cc:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020d2:	4a0a      	ldr	r2, [pc, #40]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020dc:	e007      	b.n	80020ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020de:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020e6:	4a05      	ldr	r2, [pc, #20]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ec:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40007000 	.word	0x40007000
 8002100:	20000058 	.word	0x20000058
 8002104:	431bde83 	.word	0x431bde83

08002108 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800210c:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <HAL_PWREx_EnableVddIO2+0x1c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a04      	ldr	r2, [pc, #16]	@ (8002124 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002112:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002116:	6053      	str	r3, [r2, #4]
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40007000 	.word	0x40007000

08002128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	f000 bc08 	b.w	800294c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213c:	4b96      	ldr	r3, [pc, #600]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002146:	4b94      	ldr	r3, [pc, #592]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80e4 	beq.w	8002326 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d007      	beq.n	8002174 <HAL_RCC_OscConfig+0x4c>
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2b0c      	cmp	r3, #12
 8002168:	f040 808b 	bne.w	8002282 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2b01      	cmp	r3, #1
 8002170:	f040 8087 	bne.w	8002282 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002174:	4b88      	ldr	r3, [pc, #544]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_OscConfig+0x64>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e3df      	b.n	800294c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1a      	ldr	r2, [r3, #32]
 8002190:	4b81      	ldr	r3, [pc, #516]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b00      	cmp	r3, #0
 800219a:	d004      	beq.n	80021a6 <HAL_RCC_OscConfig+0x7e>
 800219c:	4b7e      	ldr	r3, [pc, #504]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021a4:	e005      	b.n	80021b2 <HAL_RCC_OscConfig+0x8a>
 80021a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 80021a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d223      	bcs.n	80021fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fdcc 	bl	8002d58 <RCC_SetFlashLatencyFromMSIRange>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e3c0      	b.n	800294c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ca:	4b73      	ldr	r3, [pc, #460]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a72      	ldr	r2, [pc, #456]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 80021d0:	f043 0308 	orr.w	r3, r3, #8
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b70      	ldr	r3, [pc, #448]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	496d      	ldr	r1, [pc, #436]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	4968      	ldr	r1, [pc, #416]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
 80021fc:	e025      	b.n	800224a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021fe:	4b66      	ldr	r3, [pc, #408]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a65      	ldr	r2, [pc, #404]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 8002204:	f043 0308 	orr.w	r3, r3, #8
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b63      	ldr	r3, [pc, #396]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4960      	ldr	r1, [pc, #384]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 8002218:	4313      	orrs	r3, r2
 800221a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800221c:	4b5e      	ldr	r3, [pc, #376]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	495b      	ldr	r1, [pc, #364]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fd8c 	bl	8002d58 <RCC_SetFlashLatencyFromMSIRange>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e380      	b.n	800294c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800224a:	f000 fcc1 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 800224e:	4602      	mov	r2, r0
 8002250:	4b51      	ldr	r3, [pc, #324]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	4950      	ldr	r1, [pc, #320]	@ (800239c <HAL_RCC_OscConfig+0x274>)
 800225c:	5ccb      	ldrb	r3, [r1, r3]
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	fa22 f303 	lsr.w	r3, r2, r3
 8002266:	4a4e      	ldr	r2, [pc, #312]	@ (80023a0 <HAL_RCC_OscConfig+0x278>)
 8002268:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800226a:	4b4e      	ldr	r3, [pc, #312]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff f8e2 	bl	8001438 <HAL_InitTick>
 8002274:	4603      	mov	r3, r0
 8002276:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d052      	beq.n	8002324 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	e364      	b.n	800294c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d032      	beq.n	80022f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800228a:	4b43      	ldr	r3, [pc, #268]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a42      	ldr	r2, [pc, #264]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002296:	f7ff f91f 	bl	80014d8 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800229e:	f7ff f91b 	bl	80014d8 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e34d      	b.n	800294c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022b0:	4b39      	ldr	r3, [pc, #228]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022bc:	4b36      	ldr	r3, [pc, #216]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a35      	ldr	r2, [pc, #212]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 80022c2:	f043 0308 	orr.w	r3, r3, #8
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b33      	ldr	r3, [pc, #204]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4930      	ldr	r1, [pc, #192]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022da:	4b2f      	ldr	r3, [pc, #188]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	492b      	ldr	r1, [pc, #172]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	604b      	str	r3, [r1, #4]
 80022ee:	e01a      	b.n	8002326 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022f0:	4b29      	ldr	r3, [pc, #164]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a28      	ldr	r2, [pc, #160]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022fc:	f7ff f8ec 	bl	80014d8 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002304:	f7ff f8e8 	bl	80014d8 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e31a      	b.n	800294c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002316:	4b20      	ldr	r3, [pc, #128]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x1dc>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d073      	beq.n	800241a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	2b08      	cmp	r3, #8
 8002336:	d005      	beq.n	8002344 <HAL_RCC_OscConfig+0x21c>
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2b0c      	cmp	r3, #12
 800233c:	d10e      	bne.n	800235c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d10b      	bne.n	800235c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002344:	4b14      	ldr	r3, [pc, #80]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d063      	beq.n	8002418 <HAL_RCC_OscConfig+0x2f0>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d15f      	bne.n	8002418 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e2f7      	b.n	800294c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002364:	d106      	bne.n	8002374 <HAL_RCC_OscConfig+0x24c>
 8002366:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a0b      	ldr	r2, [pc, #44]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 800236c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e025      	b.n	80023c0 <HAL_RCC_OscConfig+0x298>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800237c:	d114      	bne.n	80023a8 <HAL_RCC_OscConfig+0x280>
 800237e:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a05      	ldr	r2, [pc, #20]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 8002384:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	4b03      	ldr	r3, [pc, #12]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a02      	ldr	r2, [pc, #8]	@ (8002398 <HAL_RCC_OscConfig+0x270>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e013      	b.n	80023c0 <HAL_RCC_OscConfig+0x298>
 8002398:	40021000 	.word	0x40021000
 800239c:	08006d6c 	.word	0x08006d6c
 80023a0:	20000058 	.word	0x20000058
 80023a4:	2000005c 	.word	0x2000005c
 80023a8:	4ba0      	ldr	r3, [pc, #640]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a9f      	ldr	r2, [pc, #636]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 80023ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	4b9d      	ldr	r3, [pc, #628]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a9c      	ldr	r2, [pc, #624]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 80023ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d013      	beq.n	80023f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7ff f886 	bl	80014d8 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d0:	f7ff f882 	bl	80014d8 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	@ 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e2b4      	b.n	800294c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e2:	4b92      	ldr	r3, [pc, #584]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x2a8>
 80023ee:	e014      	b.n	800241a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7ff f872 	bl	80014d8 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f8:	f7ff f86e 	bl	80014d8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	@ 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e2a0      	b.n	800294c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800240a:	4b88      	ldr	r3, [pc, #544]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x2d0>
 8002416:	e000      	b.n	800241a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d060      	beq.n	80024e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	2b04      	cmp	r3, #4
 800242a:	d005      	beq.n	8002438 <HAL_RCC_OscConfig+0x310>
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	2b0c      	cmp	r3, #12
 8002430:	d119      	bne.n	8002466 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d116      	bne.n	8002466 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002438:	4b7c      	ldr	r3, [pc, #496]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_OscConfig+0x328>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e27d      	b.n	800294c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002450:	4b76      	ldr	r3, [pc, #472]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	061b      	lsls	r3, r3, #24
 800245e:	4973      	ldr	r1, [pc, #460]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002464:	e040      	b.n	80024e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d023      	beq.n	80024b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800246e:	4b6f      	ldr	r3, [pc, #444]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a6e      	ldr	r2, [pc, #440]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 8002474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247a:	f7ff f82d 	bl	80014d8 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002482:	f7ff f829 	bl	80014d8 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e25b      	b.n	800294c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002494:	4b65      	ldr	r3, [pc, #404]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a0:	4b62      	ldr	r3, [pc, #392]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	061b      	lsls	r3, r3, #24
 80024ae:	495f      	ldr	r1, [pc, #380]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
 80024b4:	e018      	b.n	80024e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b6:	4b5d      	ldr	r3, [pc, #372]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a5c      	ldr	r2, [pc, #368]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 80024bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c2:	f7ff f809 	bl	80014d8 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ca:	f7ff f805 	bl	80014d8 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e237      	b.n	800294c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024dc:	4b53      	ldr	r3, [pc, #332]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f0      	bne.n	80024ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d03c      	beq.n	800256e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d01c      	beq.n	8002536 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fc:	4b4b      	ldr	r3, [pc, #300]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 80024fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002502:	4a4a      	ldr	r2, [pc, #296]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250c:	f7fe ffe4 	bl	80014d8 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002514:	f7fe ffe0 	bl	80014d8 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e212      	b.n	800294c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002526:	4b41      	ldr	r3, [pc, #260]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 8002528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0ef      	beq.n	8002514 <HAL_RCC_OscConfig+0x3ec>
 8002534:	e01b      	b.n	800256e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002536:	4b3d      	ldr	r3, [pc, #244]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 8002538:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800253c:	4a3b      	ldr	r2, [pc, #236]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002546:	f7fe ffc7 	bl	80014d8 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800254e:	f7fe ffc3 	bl	80014d8 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e1f5      	b.n	800294c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002560:	4b32      	ldr	r3, [pc, #200]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 8002562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1ef      	bne.n	800254e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 80a6 	beq.w	80026c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257c:	2300      	movs	r3, #0
 800257e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002580:	4b2a      	ldr	r3, [pc, #168]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10d      	bne.n	80025a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258c:	4b27      	ldr	r3, [pc, #156]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 800258e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002590:	4a26      	ldr	r2, [pc, #152]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 8002592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002596:	6593      	str	r3, [r2, #88]	@ 0x58
 8002598:	4b24      	ldr	r3, [pc, #144]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a4:	2301      	movs	r3, #1
 80025a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a8:	4b21      	ldr	r3, [pc, #132]	@ (8002630 <HAL_RCC_OscConfig+0x508>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d118      	bne.n	80025e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002630 <HAL_RCC_OscConfig+0x508>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002630 <HAL_RCC_OscConfig+0x508>)
 80025ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c0:	f7fe ff8a 	bl	80014d8 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c8:	f7fe ff86 	bl	80014d8 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e1b8      	b.n	800294c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025da:	4b15      	ldr	r3, [pc, #84]	@ (8002630 <HAL_RCC_OscConfig+0x508>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d108      	bne.n	8002600 <HAL_RCC_OscConfig+0x4d8>
 80025ee:	4b0f      	ldr	r3, [pc, #60]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 80025f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f4:	4a0d      	ldr	r2, [pc, #52]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025fe:	e029      	b.n	8002654 <HAL_RCC_OscConfig+0x52c>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b05      	cmp	r3, #5
 8002606:	d115      	bne.n	8002634 <HAL_RCC_OscConfig+0x50c>
 8002608:	4b08      	ldr	r3, [pc, #32]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260e:	4a07      	ldr	r2, [pc, #28]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 8002610:	f043 0304 	orr.w	r3, r3, #4
 8002614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002618:	4b04      	ldr	r3, [pc, #16]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261e:	4a03      	ldr	r2, [pc, #12]	@ (800262c <HAL_RCC_OscConfig+0x504>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002628:	e014      	b.n	8002654 <HAL_RCC_OscConfig+0x52c>
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	40007000 	.word	0x40007000
 8002634:	4b9d      	ldr	r3, [pc, #628]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263a:	4a9c      	ldr	r2, [pc, #624]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002644:	4b99      	ldr	r3, [pc, #612]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264a:	4a98      	ldr	r2, [pc, #608]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 800264c:	f023 0304 	bic.w	r3, r3, #4
 8002650:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d016      	beq.n	800268a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265c:	f7fe ff3c 	bl	80014d8 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002662:	e00a      	b.n	800267a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002664:	f7fe ff38 	bl	80014d8 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e168      	b.n	800294c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800267a:	4b8c      	ldr	r3, [pc, #560]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 800267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0ed      	beq.n	8002664 <HAL_RCC_OscConfig+0x53c>
 8002688:	e015      	b.n	80026b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268a:	f7fe ff25 	bl	80014d8 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002690:	e00a      	b.n	80026a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002692:	f7fe ff21 	bl	80014d8 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e151      	b.n	800294c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026a8:	4b80      	ldr	r3, [pc, #512]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1ed      	bne.n	8002692 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026b6:	7ffb      	ldrb	r3, [r7, #31]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d105      	bne.n	80026c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026bc:	4b7b      	ldr	r3, [pc, #492]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 80026be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c0:	4a7a      	ldr	r2, [pc, #488]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 80026c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d03c      	beq.n	800274e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01c      	beq.n	8002716 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026dc:	4b73      	ldr	r3, [pc, #460]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 80026de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026e2:	4a72      	ldr	r2, [pc, #456]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7fe fef4 	bl	80014d8 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026f4:	f7fe fef0 	bl	80014d8 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e122      	b.n	800294c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002706:	4b69      	ldr	r3, [pc, #420]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 8002708:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0ef      	beq.n	80026f4 <HAL_RCC_OscConfig+0x5cc>
 8002714:	e01b      	b.n	800274e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002716:	4b65      	ldr	r3, [pc, #404]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 8002718:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800271c:	4a63      	ldr	r2, [pc, #396]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002726:	f7fe fed7 	bl	80014d8 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800272e:	f7fe fed3 	bl	80014d8 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e105      	b.n	800294c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002740:	4b5a      	ldr	r3, [pc, #360]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 8002742:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1ef      	bne.n	800272e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80f9 	beq.w	800294a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275c:	2b02      	cmp	r3, #2
 800275e:	f040 80cf 	bne.w	8002900 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002762:	4b52      	ldr	r3, [pc, #328]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f003 0203 	and.w	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002772:	429a      	cmp	r2, r3
 8002774:	d12c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002780:	3b01      	subs	r3, #1
 8002782:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d123      	bne.n	80027d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002792:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d11b      	bne.n	80027d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d113      	bne.n	80027d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b2:	085b      	lsrs	r3, r3, #1
 80027b4:	3b01      	subs	r3, #1
 80027b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d109      	bne.n	80027d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	085b      	lsrs	r3, r3, #1
 80027c8:	3b01      	subs	r3, #1
 80027ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d071      	beq.n	80028b4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	d068      	beq.n	80028a8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027d6:	4b35      	ldr	r3, [pc, #212]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027e2:	4b32      	ldr	r3, [pc, #200]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0ac      	b.n	800294c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027f2:	4b2e      	ldr	r3, [pc, #184]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a2d      	ldr	r2, [pc, #180]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 80027f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027fe:	f7fe fe6b 	bl	80014d8 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002806:	f7fe fe67 	bl	80014d8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e099      	b.n	800294c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002818:	4b24      	ldr	r3, [pc, #144]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f0      	bne.n	8002806 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002824:	4b21      	ldr	r3, [pc, #132]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	4b21      	ldr	r3, [pc, #132]	@ (80028b0 <HAL_RCC_OscConfig+0x788>)
 800282a:	4013      	ands	r3, r2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002834:	3a01      	subs	r2, #1
 8002836:	0112      	lsls	r2, r2, #4
 8002838:	4311      	orrs	r1, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800283e:	0212      	lsls	r2, r2, #8
 8002840:	4311      	orrs	r1, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002846:	0852      	lsrs	r2, r2, #1
 8002848:	3a01      	subs	r2, #1
 800284a:	0552      	lsls	r2, r2, #21
 800284c:	4311      	orrs	r1, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002852:	0852      	lsrs	r2, r2, #1
 8002854:	3a01      	subs	r2, #1
 8002856:	0652      	lsls	r2, r2, #25
 8002858:	4311      	orrs	r1, r2
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800285e:	06d2      	lsls	r2, r2, #27
 8002860:	430a      	orrs	r2, r1
 8002862:	4912      	ldr	r1, [pc, #72]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 8002864:	4313      	orrs	r3, r2
 8002866:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002868:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0f      	ldr	r2, [pc, #60]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 800286e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002872:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002874:	4b0d      	ldr	r3, [pc, #52]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4a0c      	ldr	r2, [pc, #48]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 800287a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800287e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002880:	f7fe fe2a 	bl	80014d8 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002888:	f7fe fe26 	bl	80014d8 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e058      	b.n	800294c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289a:	4b04      	ldr	r3, [pc, #16]	@ (80028ac <HAL_RCC_OscConfig+0x784>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028a6:	e050      	b.n	800294a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e04f      	b.n	800294c <HAL_RCC_OscConfig+0x824>
 80028ac:	40021000 	.word	0x40021000
 80028b0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b4:	4b27      	ldr	r3, [pc, #156]	@ (8002954 <HAL_RCC_OscConfig+0x82c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d144      	bne.n	800294a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028c0:	4b24      	ldr	r3, [pc, #144]	@ (8002954 <HAL_RCC_OscConfig+0x82c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a23      	ldr	r2, [pc, #140]	@ (8002954 <HAL_RCC_OscConfig+0x82c>)
 80028c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028cc:	4b21      	ldr	r3, [pc, #132]	@ (8002954 <HAL_RCC_OscConfig+0x82c>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4a20      	ldr	r2, [pc, #128]	@ (8002954 <HAL_RCC_OscConfig+0x82c>)
 80028d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028d8:	f7fe fdfe 	bl	80014d8 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7fe fdfa 	bl	80014d8 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e02c      	b.n	800294c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f2:	4b18      	ldr	r3, [pc, #96]	@ (8002954 <HAL_RCC_OscConfig+0x82c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x7b8>
 80028fe:	e024      	b.n	800294a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d01f      	beq.n	8002946 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b13      	ldr	r3, [pc, #76]	@ (8002954 <HAL_RCC_OscConfig+0x82c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a12      	ldr	r2, [pc, #72]	@ (8002954 <HAL_RCC_OscConfig+0x82c>)
 800290c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002912:	f7fe fde1 	bl	80014d8 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291a:	f7fe fddd 	bl	80014d8 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e00f      	b.n	800294c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292c:	4b09      	ldr	r3, [pc, #36]	@ (8002954 <HAL_RCC_OscConfig+0x82c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f0      	bne.n	800291a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002938:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <HAL_RCC_OscConfig+0x82c>)
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	4905      	ldr	r1, [pc, #20]	@ (8002954 <HAL_RCC_OscConfig+0x82c>)
 800293e:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <HAL_RCC_OscConfig+0x830>)
 8002940:	4013      	ands	r3, r2
 8002942:	60cb      	str	r3, [r1, #12]
 8002944:	e001      	b.n	800294a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3720      	adds	r7, #32
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	feeefffc 	.word	0xfeeefffc

0800295c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e11d      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002974:	4b90      	ldr	r3, [pc, #576]	@ (8002bb8 <HAL_RCC_ClockConfig+0x25c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d910      	bls.n	80029a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b8d      	ldr	r3, [pc, #564]	@ (8002bb8 <HAL_RCC_ClockConfig+0x25c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 020f 	bic.w	r2, r3, #15
 800298a:	498b      	ldr	r1, [pc, #556]	@ (8002bb8 <HAL_RCC_ClockConfig+0x25c>)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002992:	4b89      	ldr	r3, [pc, #548]	@ (8002bb8 <HAL_RCC_ClockConfig+0x25c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e105      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d010      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	4b81      	ldr	r3, [pc, #516]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029bc:	429a      	cmp	r2, r3
 80029be:	d908      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c0:	4b7e      	ldr	r3, [pc, #504]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	497b      	ldr	r1, [pc, #492]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d079      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d11e      	bne.n	8002a24 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e6:	4b75      	ldr	r3, [pc, #468]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0dc      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80029f6:	f000 fa09 	bl	8002e0c <RCC_GetSysClockFreqFromPLLSource>
 80029fa:	4603      	mov	r3, r0
 80029fc:	4a70      	ldr	r2, [pc, #448]	@ (8002bc0 <HAL_RCC_ClockConfig+0x264>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d946      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a02:	4b6e      	ldr	r3, [pc, #440]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d140      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a0e:	4b6b      	ldr	r3, [pc, #428]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a16:	4a69      	ldr	r2, [pc, #420]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a1e:	2380      	movs	r3, #128	@ 0x80
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	e035      	b.n	8002a90 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d107      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a2c:	4b63      	ldr	r3, [pc, #396]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d115      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0b9      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a44:	4b5d      	ldr	r3, [pc, #372]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d109      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0ad      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a54:	4b59      	ldr	r3, [pc, #356]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0a5      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002a64:	f000 f8b4 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4a55      	ldr	r2, [pc, #340]	@ (8002bc0 <HAL_RCC_ClockConfig+0x264>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d90f      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a70:	4b52      	ldr	r3, [pc, #328]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d109      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a7c:	4b4f      	ldr	r3, [pc, #316]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a84:	4a4d      	ldr	r2, [pc, #308]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a8a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a8c:	2380      	movs	r3, #128	@ 0x80
 8002a8e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a90:	4b4a      	ldr	r3, [pc, #296]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f023 0203 	bic.w	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4947      	ldr	r1, [pc, #284]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa2:	f7fe fd19 	bl	80014d8 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa8:	e00a      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aaa:	f7fe fd15 	bl	80014d8 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e077      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac0:	4b3e      	ldr	r3, [pc, #248]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 020c 	and.w	r2, r3, #12
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d1eb      	bne.n	8002aaa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b80      	cmp	r3, #128	@ 0x80
 8002ad6:	d105      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002ad8:	4b38      	ldr	r3, [pc, #224]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a37      	ldr	r2, [pc, #220]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002ade:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ae2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d010      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	4b31      	ldr	r3, [pc, #196]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d208      	bcs.n	8002b12 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b00:	4b2e      	ldr	r3, [pc, #184]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	492b      	ldr	r1, [pc, #172]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b12:	4b29      	ldr	r3, [pc, #164]	@ (8002bb8 <HAL_RCC_ClockConfig+0x25c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d210      	bcs.n	8002b42 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b20:	4b25      	ldr	r3, [pc, #148]	@ (8002bb8 <HAL_RCC_ClockConfig+0x25c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 020f 	bic.w	r2, r3, #15
 8002b28:	4923      	ldr	r1, [pc, #140]	@ (8002bb8 <HAL_RCC_ClockConfig+0x25c>)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b30:	4b21      	ldr	r3, [pc, #132]	@ (8002bb8 <HAL_RCC_ClockConfig+0x25c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e036      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4918      	ldr	r1, [pc, #96]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d009      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b6c:	4b13      	ldr	r3, [pc, #76]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4910      	ldr	r1, [pc, #64]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b80:	f000 f826 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b0d      	ldr	r3, [pc, #52]	@ (8002bbc <HAL_RCC_ClockConfig+0x260>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	490c      	ldr	r1, [pc, #48]	@ (8002bc4 <HAL_RCC_ClockConfig+0x268>)
 8002b92:	5ccb      	ldrb	r3, [r1, r3]
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc8 <HAL_RCC_ClockConfig+0x26c>)
 8002b9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bcc <HAL_RCC_ClockConfig+0x270>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe fc47 	bl	8001438 <HAL_InitTick>
 8002baa:	4603      	mov	r3, r0
 8002bac:	73fb      	strb	r3, [r7, #15]

  return status;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40022000 	.word	0x40022000
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	04c4b400 	.word	0x04c4b400
 8002bc4:	08006d6c 	.word	0x08006d6c
 8002bc8:	20000058 	.word	0x20000058
 8002bcc:	2000005c 	.word	0x2000005c

08002bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b089      	sub	sp, #36	@ 0x24
 8002bd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bde:	4b3e      	ldr	r3, [pc, #248]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002be8:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x34>
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	2b0c      	cmp	r3, #12
 8002bfc:	d121      	bne.n	8002c42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d11e      	bne.n	8002c42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c04:	4b34      	ldr	r3, [pc, #208]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d107      	bne.n	8002c20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c10:	4b31      	ldr	r3, [pc, #196]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c16:	0a1b      	lsrs	r3, r3, #8
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	e005      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c20:	4b2d      	ldr	r3, [pc, #180]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10d      	bne.n	8002c58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d102      	bne.n	8002c4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c48:	4b25      	ldr	r3, [pc, #148]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c4a:	61bb      	str	r3, [r7, #24]
 8002c4c:	e004      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c54:	4b23      	ldr	r3, [pc, #140]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	2b0c      	cmp	r3, #12
 8002c5c:	d134      	bne.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d003      	beq.n	8002c76 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d003      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0xac>
 8002c74:	e005      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c76:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c78:	617b      	str	r3, [r7, #20]
      break;
 8002c7a:	e005      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c7c:	4b19      	ldr	r3, [pc, #100]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c7e:	617b      	str	r3, [r7, #20]
      break;
 8002c80:	e002      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	617b      	str	r3, [r7, #20]
      break;
 8002c86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c88:	4b13      	ldr	r3, [pc, #76]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	3301      	adds	r3, #1
 8002c94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c96:	4b10      	ldr	r3, [pc, #64]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	fb03 f202 	mul.w	r2, r3, r2
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cae:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	0e5b      	lsrs	r3, r3, #25
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cc8:	69bb      	ldr	r3, [r7, #24]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3724      	adds	r7, #36	@ 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	08006d84 	.word	0x08006d84
 8002ce0:	00f42400 	.word	0x00f42400
 8002ce4:	007a1200 	.word	0x007a1200

08002ce8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cec:	4b03      	ldr	r3, [pc, #12]	@ (8002cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cee:	681b      	ldr	r3, [r3, #0]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000058 	.word	0x20000058

08002d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d04:	f7ff fff0 	bl	8002ce8 <HAL_RCC_GetHCLKFreq>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	4904      	ldr	r1, [pc, #16]	@ (8002d28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d16:	5ccb      	ldrb	r3, [r1, r3]
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000
 8002d28:	08006d7c 	.word	0x08006d7c

08002d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d30:	f7ff ffda 	bl	8002ce8 <HAL_RCC_GetHCLKFreq>
 8002d34:	4602      	mov	r2, r0
 8002d36:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	0adb      	lsrs	r3, r3, #11
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	4904      	ldr	r1, [pc, #16]	@ (8002d54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d42:	5ccb      	ldrb	r3, [r1, r3]
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40021000 	.word	0x40021000
 8002d54:	08006d7c 	.word	0x08006d7c

08002d58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d60:	2300      	movs	r3, #0
 8002d62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d64:	4b27      	ldr	r3, [pc, #156]	@ (8002e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d70:	f7ff f906 	bl	8001f80 <HAL_PWREx_GetVoltageRange>
 8002d74:	6178      	str	r0, [r7, #20]
 8002d76:	e014      	b.n	8002da2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d78:	4b22      	ldr	r3, [pc, #136]	@ (8002e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7c:	4a21      	ldr	r2, [pc, #132]	@ (8002e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d84:	4b1f      	ldr	r3, [pc, #124]	@ (8002e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d90:	f7ff f8f6 	bl	8001f80 <HAL_PWREx_GetVoltageRange>
 8002d94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d96:	4b1b      	ldr	r3, [pc, #108]	@ (8002e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002da0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002da8:	d10b      	bne.n	8002dc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b80      	cmp	r3, #128	@ 0x80
 8002dae:	d913      	bls.n	8002dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2ba0      	cmp	r3, #160	@ 0xa0
 8002db4:	d902      	bls.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002db6:	2302      	movs	r3, #2
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	e00d      	b.n	8002dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	e00a      	b.n	8002dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8002dc6:	d902      	bls.n	8002dce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002dc8:	2302      	movs	r3, #2
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	e004      	b.n	8002dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b70      	cmp	r3, #112	@ 0x70
 8002dd2:	d101      	bne.n	8002dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f023 020f 	bic.w	r2, r3, #15
 8002de0:	4909      	ldr	r1, [pc, #36]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002de8:	4b07      	ldr	r3, [pc, #28]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d001      	beq.n	8002dfa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40022000 	.word	0x40022000

08002e0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e12:	4b2d      	ldr	r3, [pc, #180]	@ (8002ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d00b      	beq.n	8002e3a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d825      	bhi.n	8002e74 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d008      	beq.n	8002e40 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d11f      	bne.n	8002e74 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002e34:	4b25      	ldr	r3, [pc, #148]	@ (8002ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e36:	613b      	str	r3, [r7, #16]
    break;
 8002e38:	e01f      	b.n	8002e7a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002e3a:	4b25      	ldr	r3, [pc, #148]	@ (8002ed0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002e3c:	613b      	str	r3, [r7, #16]
    break;
 8002e3e:	e01c      	b.n	8002e7a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e40:	4b21      	ldr	r3, [pc, #132]	@ (8002ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d107      	bne.n	8002e5c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	e005      	b.n	8002e68 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002e68:	4a1a      	ldr	r2, [pc, #104]	@ (8002ed4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e70:	613b      	str	r3, [r7, #16]
    break;
 8002e72:	e002      	b.n	8002e7a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	613b      	str	r3, [r7, #16]
    break;
 8002e78:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e7a:	4b13      	ldr	r3, [pc, #76]	@ (8002ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	3301      	adds	r3, #1
 8002e86:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e88:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	0a1b      	lsrs	r3, r3, #8
 8002e8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	fb03 f202 	mul.w	r2, r3, r2
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ea0:	4b09      	ldr	r3, [pc, #36]	@ (8002ec8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	0e5b      	lsrs	r3, r3, #25
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002eba:	683b      	ldr	r3, [r7, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	00f42400 	.word	0x00f42400
 8002ed0:	007a1200 	.word	0x007a1200
 8002ed4:	08006d84 	.word	0x08006d84

08002ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d040      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ef8:	2b80      	cmp	r3, #128	@ 0x80
 8002efa:	d02a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002efc:	2b80      	cmp	r3, #128	@ 0x80
 8002efe:	d825      	bhi.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f00:	2b60      	cmp	r3, #96	@ 0x60
 8002f02:	d026      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f04:	2b60      	cmp	r3, #96	@ 0x60
 8002f06:	d821      	bhi.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f08:	2b40      	cmp	r3, #64	@ 0x40
 8002f0a:	d006      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002f0c:	2b40      	cmp	r3, #64	@ 0x40
 8002f0e:	d81d      	bhi.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d009      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d010      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002f18:	e018      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f1a:	4b89      	ldr	r3, [pc, #548]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	4a88      	ldr	r2, [pc, #544]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f24:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f26:	e015      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fb02 	bl	8003538 <RCCEx_PLLSAI1_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f38:	e00c      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3320      	adds	r3, #32
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 fbed 	bl	8003720 <RCCEx_PLLSAI2_Config>
 8002f46:	4603      	mov	r3, r0
 8002f48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f4a:	e003      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	74fb      	strb	r3, [r7, #19]
      break;
 8002f50:	e000      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f54:	7cfb      	ldrb	r3, [r7, #19]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10b      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f5a:	4b79      	ldr	r3, [pc, #484]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f60:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f68:	4975      	ldr	r1, [pc, #468]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002f70:	e001      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f72:	7cfb      	ldrb	r3, [r7, #19]
 8002f74:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d047      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f8a:	d030      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f90:	d82a      	bhi.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f96:	d02a      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f9c:	d824      	bhi.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fa8:	d81e      	bhi.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fb2:	d010      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002fb4:	e018      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fb6:	4b62      	ldr	r3, [pc, #392]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	4a61      	ldr	r2, [pc, #388]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fc0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fc2:	e015      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fab4 	bl	8003538 <RCCEx_PLLSAI1_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fd4:	e00c      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3320      	adds	r3, #32
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fb9f 	bl	8003720 <RCCEx_PLLSAI2_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fe6:	e003      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	74fb      	strb	r3, [r7, #19]
      break;
 8002fec:	e000      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10b      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ff6:	4b52      	ldr	r3, [pc, #328]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ff8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ffc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003004:	494e      	ldr	r1, [pc, #312]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800300c:	e001      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800300e:	7cfb      	ldrb	r3, [r7, #19]
 8003010:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 809f 	beq.w	800315e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003020:	2300      	movs	r3, #0
 8003022:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003024:	4b46      	ldr	r3, [pc, #280]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003034:	2300      	movs	r3, #0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00d      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800303a:	4b41      	ldr	r3, [pc, #260]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800303c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303e:	4a40      	ldr	r2, [pc, #256]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003044:	6593      	str	r3, [r2, #88]	@ 0x58
 8003046:	4b3e      	ldr	r3, [pc, #248]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003052:	2301      	movs	r3, #1
 8003054:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003056:	4b3b      	ldr	r3, [pc, #236]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a3a      	ldr	r2, [pc, #232]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800305c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003060:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003062:	f7fe fa39 	bl	80014d8 <HAL_GetTick>
 8003066:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003068:	e009      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800306a:	f7fe fa35 	bl	80014d8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d902      	bls.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	74fb      	strb	r3, [r7, #19]
        break;
 800307c:	e005      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800307e:	4b31      	ldr	r3, [pc, #196]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0ef      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d15b      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003090:	4b2b      	ldr	r3, [pc, #172]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003096:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800309a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d01f      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d019      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030ae:	4b24      	ldr	r3, [pc, #144]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030ba:	4b21      	ldr	r3, [pc, #132]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030da:	4a19      	ldr	r2, [pc, #100]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d016      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fe f9f4 	bl	80014d8 <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030f2:	e00b      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f4:	f7fe f9f0 	bl	80014d8 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d902      	bls.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	74fb      	strb	r3, [r7, #19]
            break;
 800310a:	e006      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800310c:	4b0c      	ldr	r3, [pc, #48]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0ec      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800311a:	7cfb      	ldrb	r3, [r7, #19]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10c      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003120:	4b07      	ldr	r3, [pc, #28]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003126:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003130:	4903      	ldr	r1, [pc, #12]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003138:	e008      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800313a:	7cfb      	ldrb	r3, [r7, #19]
 800313c:	74bb      	strb	r3, [r7, #18]
 800313e:	e005      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003140:	40021000 	.word	0x40021000
 8003144:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003148:	7cfb      	ldrb	r3, [r7, #19]
 800314a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800314c:	7c7b      	ldrb	r3, [r7, #17]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d105      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003152:	4ba0      	ldr	r3, [pc, #640]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003156:	4a9f      	ldr	r2, [pc, #636]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003158:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800315c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800316a:	4b9a      	ldr	r3, [pc, #616]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003170:	f023 0203 	bic.w	r2, r3, #3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003178:	4996      	ldr	r1, [pc, #600]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800318c:	4b91      	ldr	r3, [pc, #580]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003192:	f023 020c 	bic.w	r2, r3, #12
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	498e      	ldr	r1, [pc, #568]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031ae:	4b89      	ldr	r3, [pc, #548]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031bc:	4985      	ldr	r1, [pc, #532]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031d0:	4b80      	ldr	r3, [pc, #512]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031de:	497d      	ldr	r1, [pc, #500]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031f2:	4b78      	ldr	r3, [pc, #480]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003200:	4974      	ldr	r1, [pc, #464]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003214:	4b6f      	ldr	r3, [pc, #444]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003222:	496c      	ldr	r1, [pc, #432]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003236:	4b67      	ldr	r3, [pc, #412]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003244:	4963      	ldr	r1, [pc, #396]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003258:	4b5e      	ldr	r3, [pc, #376]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003266:	495b      	ldr	r1, [pc, #364]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800327a:	4b56      	ldr	r3, [pc, #344]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003280:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003288:	4952      	ldr	r1, [pc, #328]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800329c:	4b4d      	ldr	r3, [pc, #308]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032aa:	494a      	ldr	r1, [pc, #296]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032be:	4b45      	ldr	r3, [pc, #276]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032cc:	4941      	ldr	r1, [pc, #260]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032e0:	4b3c      	ldr	r3, [pc, #240]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032e6:	f023 0203 	bic.w	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ee:	4939      	ldr	r1, [pc, #228]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d028      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003302:	4b34      	ldr	r3, [pc, #208]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003308:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003310:	4930      	ldr	r1, [pc, #192]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800331c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003320:	d106      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003322:	4b2c      	ldr	r3, [pc, #176]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	4a2b      	ldr	r2, [pc, #172]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003328:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800332c:	60d3      	str	r3, [r2, #12]
 800332e:	e011      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003334:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003338:	d10c      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3304      	adds	r3, #4
 800333e:	2101      	movs	r1, #1
 8003340:	4618      	mov	r0, r3
 8003342:	f000 f8f9 	bl	8003538 <RCCEx_PLLSAI1_Config>
 8003346:	4603      	mov	r3, r0
 8003348:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800334a:	7cfb      	ldrb	r3, [r7, #19]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003350:	7cfb      	ldrb	r3, [r7, #19]
 8003352:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d04d      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003364:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003368:	d108      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800336a:	4b1a      	ldr	r3, [pc, #104]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800336c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003370:	4a18      	ldr	r2, [pc, #96]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003372:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003376:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800337a:	e012      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800337c:	4b15      	ldr	r3, [pc, #84]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800337e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003382:	4a14      	ldr	r2, [pc, #80]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003384:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003388:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800338c:	4b11      	ldr	r3, [pc, #68]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003392:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800339a:	490e      	ldr	r1, [pc, #56]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033aa:	d106      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ac:	4b09      	ldr	r3, [pc, #36]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4a08      	ldr	r2, [pc, #32]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033b6:	60d3      	str	r3, [r2, #12]
 80033b8:	e020      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033c2:	d109      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033c4:	4b03      	ldr	r3, [pc, #12]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4a02      	ldr	r2, [pc, #8]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ce:	60d3      	str	r3, [r2, #12]
 80033d0:	e014      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80033d2:	bf00      	nop
 80033d4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033e0:	d10c      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3304      	adds	r3, #4
 80033e6:	2101      	movs	r1, #1
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 f8a5 	bl	8003538 <RCCEx_PLLSAI1_Config>
 80033ee:	4603      	mov	r3, r0
 80033f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033f2:	7cfb      	ldrb	r3, [r7, #19]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d028      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003408:	4b4a      	ldr	r3, [pc, #296]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003416:	4947      	ldr	r1, [pc, #284]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003422:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003426:	d106      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003428:	4b42      	ldr	r3, [pc, #264]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4a41      	ldr	r2, [pc, #260]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800342e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003432:	60d3      	str	r3, [r2, #12]
 8003434:	e011      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800343a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800343e:	d10c      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3304      	adds	r3, #4
 8003444:	2101      	movs	r1, #1
 8003446:	4618      	mov	r0, r3
 8003448:	f000 f876 	bl	8003538 <RCCEx_PLLSAI1_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003456:	7cfb      	ldrb	r3, [r7, #19]
 8003458:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d01e      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003466:	4b33      	ldr	r3, [pc, #204]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003476:	492f      	ldr	r1, [pc, #188]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003484:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003488:	d10c      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3304      	adds	r3, #4
 800348e:	2102      	movs	r1, #2
 8003490:	4618      	mov	r0, r3
 8003492:	f000 f851 	bl	8003538 <RCCEx_PLLSAI1_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800349a:	7cfb      	ldrb	r3, [r7, #19]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80034a0:	7cfb      	ldrb	r3, [r7, #19]
 80034a2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00b      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034b0:	4b20      	ldr	r3, [pc, #128]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034b6:	f023 0204 	bic.w	r2, r3, #4
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034c0:	491c      	ldr	r1, [pc, #112]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00b      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80034d4:	4b17      	ldr	r3, [pc, #92]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034da:	f023 0218 	bic.w	r2, r3, #24
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e4:	4913      	ldr	r1, [pc, #76]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d017      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80034f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003508:	490a      	ldr	r1, [pc, #40]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003516:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800351a:	d105      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800351c:	4b05      	ldr	r3, [pc, #20]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4a04      	ldr	r2, [pc, #16]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003522:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003526:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003528:	7cbb      	ldrb	r3, [r7, #18]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40021000 	.word	0x40021000

08003538 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003546:	4b72      	ldr	r3, [pc, #456]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00e      	beq.n	8003570 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003552:	4b6f      	ldr	r3, [pc, #444]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0203 	and.w	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d103      	bne.n	800356a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
       ||
 8003566:	2b00      	cmp	r3, #0
 8003568:	d142      	bne.n	80035f0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
 800356e:	e03f      	b.n	80035f0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d018      	beq.n	80035aa <RCCEx_PLLSAI1_Config+0x72>
 8003578:	2b03      	cmp	r3, #3
 800357a:	d825      	bhi.n	80035c8 <RCCEx_PLLSAI1_Config+0x90>
 800357c:	2b01      	cmp	r3, #1
 800357e:	d002      	beq.n	8003586 <RCCEx_PLLSAI1_Config+0x4e>
 8003580:	2b02      	cmp	r3, #2
 8003582:	d009      	beq.n	8003598 <RCCEx_PLLSAI1_Config+0x60>
 8003584:	e020      	b.n	80035c8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003586:	4b62      	ldr	r3, [pc, #392]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d11d      	bne.n	80035ce <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003596:	e01a      	b.n	80035ce <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003598:	4b5d      	ldr	r3, [pc, #372]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d116      	bne.n	80035d2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a8:	e013      	b.n	80035d2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035aa:	4b59      	ldr	r3, [pc, #356]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10f      	bne.n	80035d6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035b6:	4b56      	ldr	r3, [pc, #344]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035c6:	e006      	b.n	80035d6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
      break;
 80035cc:	e004      	b.n	80035d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80035ce:	bf00      	nop
 80035d0:	e002      	b.n	80035d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80035d2:	bf00      	nop
 80035d4:	e000      	b.n	80035d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80035d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d108      	bne.n	80035f0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80035de:	4b4c      	ldr	r3, [pc, #304]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f023 0203 	bic.w	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4949      	ldr	r1, [pc, #292]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f040 8086 	bne.w	8003704 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035f8:	4b45      	ldr	r3, [pc, #276]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a44      	ldr	r2, [pc, #272]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003604:	f7fd ff68 	bl	80014d8 <HAL_GetTick>
 8003608:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800360a:	e009      	b.n	8003620 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800360c:	f7fd ff64 	bl	80014d8 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d902      	bls.n	8003620 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	73fb      	strb	r3, [r7, #15]
        break;
 800361e:	e005      	b.n	800362c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003620:	4b3b      	ldr	r3, [pc, #236]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1ef      	bne.n	800360c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d168      	bne.n	8003704 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d113      	bne.n	8003660 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003638:	4b35      	ldr	r3, [pc, #212]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	4b35      	ldr	r3, [pc, #212]	@ (8003714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800363e:	4013      	ands	r3, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6892      	ldr	r2, [r2, #8]
 8003644:	0211      	lsls	r1, r2, #8
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68d2      	ldr	r2, [r2, #12]
 800364a:	06d2      	lsls	r2, r2, #27
 800364c:	4311      	orrs	r1, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6852      	ldr	r2, [r2, #4]
 8003652:	3a01      	subs	r2, #1
 8003654:	0112      	lsls	r2, r2, #4
 8003656:	430a      	orrs	r2, r1
 8003658:	492d      	ldr	r1, [pc, #180]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800365a:	4313      	orrs	r3, r2
 800365c:	610b      	str	r3, [r1, #16]
 800365e:	e02d      	b.n	80036bc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d115      	bne.n	8003692 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003666:	4b2a      	ldr	r3, [pc, #168]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	4b2b      	ldr	r3, [pc, #172]	@ (8003718 <RCCEx_PLLSAI1_Config+0x1e0>)
 800366c:	4013      	ands	r3, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6892      	ldr	r2, [r2, #8]
 8003672:	0211      	lsls	r1, r2, #8
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6912      	ldr	r2, [r2, #16]
 8003678:	0852      	lsrs	r2, r2, #1
 800367a:	3a01      	subs	r2, #1
 800367c:	0552      	lsls	r2, r2, #21
 800367e:	4311      	orrs	r1, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6852      	ldr	r2, [r2, #4]
 8003684:	3a01      	subs	r2, #1
 8003686:	0112      	lsls	r2, r2, #4
 8003688:	430a      	orrs	r2, r1
 800368a:	4921      	ldr	r1, [pc, #132]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 800368c:	4313      	orrs	r3, r2
 800368e:	610b      	str	r3, [r1, #16]
 8003690:	e014      	b.n	80036bc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003692:	4b1f      	ldr	r3, [pc, #124]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003694:	691a      	ldr	r2, [r3, #16]
 8003696:	4b21      	ldr	r3, [pc, #132]	@ (800371c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003698:	4013      	ands	r3, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6892      	ldr	r2, [r2, #8]
 800369e:	0211      	lsls	r1, r2, #8
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6952      	ldr	r2, [r2, #20]
 80036a4:	0852      	lsrs	r2, r2, #1
 80036a6:	3a01      	subs	r2, #1
 80036a8:	0652      	lsls	r2, r2, #25
 80036aa:	4311      	orrs	r1, r2
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6852      	ldr	r2, [r2, #4]
 80036b0:	3a01      	subs	r2, #1
 80036b2:	0112      	lsls	r2, r2, #4
 80036b4:	430a      	orrs	r2, r1
 80036b6:	4916      	ldr	r1, [pc, #88]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036bc:	4b14      	ldr	r3, [pc, #80]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a13      	ldr	r2, [pc, #76]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c8:	f7fd ff06 	bl	80014d8 <HAL_GetTick>
 80036cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036ce:	e009      	b.n	80036e4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036d0:	f7fd ff02 	bl	80014d8 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d902      	bls.n	80036e4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	73fb      	strb	r3, [r7, #15]
          break;
 80036e2:	e005      	b.n	80036f0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0ef      	beq.n	80036d0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036f6:	4b06      	ldr	r3, [pc, #24]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	4904      	ldr	r1, [pc, #16]	@ (8003710 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003700:	4313      	orrs	r3, r2
 8003702:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003704:	7bfb      	ldrb	r3, [r7, #15]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000
 8003714:	07ff800f 	.word	0x07ff800f
 8003718:	ff9f800f 	.word	0xff9f800f
 800371c:	f9ff800f 	.word	0xf9ff800f

08003720 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800372e:	4b72      	ldr	r3, [pc, #456]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00e      	beq.n	8003758 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800373a:	4b6f      	ldr	r3, [pc, #444]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f003 0203 	and.w	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d103      	bne.n	8003752 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
       ||
 800374e:	2b00      	cmp	r3, #0
 8003750:	d142      	bne.n	80037d8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	73fb      	strb	r3, [r7, #15]
 8003756:	e03f      	b.n	80037d8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b03      	cmp	r3, #3
 800375e:	d018      	beq.n	8003792 <RCCEx_PLLSAI2_Config+0x72>
 8003760:	2b03      	cmp	r3, #3
 8003762:	d825      	bhi.n	80037b0 <RCCEx_PLLSAI2_Config+0x90>
 8003764:	2b01      	cmp	r3, #1
 8003766:	d002      	beq.n	800376e <RCCEx_PLLSAI2_Config+0x4e>
 8003768:	2b02      	cmp	r3, #2
 800376a:	d009      	beq.n	8003780 <RCCEx_PLLSAI2_Config+0x60>
 800376c:	e020      	b.n	80037b0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800376e:	4b62      	ldr	r3, [pc, #392]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d11d      	bne.n	80037b6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377e:	e01a      	b.n	80037b6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003780:	4b5d      	ldr	r3, [pc, #372]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003788:	2b00      	cmp	r3, #0
 800378a:	d116      	bne.n	80037ba <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003790:	e013      	b.n	80037ba <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003792:	4b59      	ldr	r3, [pc, #356]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10f      	bne.n	80037be <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800379e:	4b56      	ldr	r3, [pc, #344]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037ae:	e006      	b.n	80037be <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
      break;
 80037b4:	e004      	b.n	80037c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80037b6:	bf00      	nop
 80037b8:	e002      	b.n	80037c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80037ba:	bf00      	nop
 80037bc:	e000      	b.n	80037c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80037be:	bf00      	nop
    }

    if(status == HAL_OK)
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80037c6:	4b4c      	ldr	r3, [pc, #304]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f023 0203 	bic.w	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4949      	ldr	r1, [pc, #292]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f040 8086 	bne.w	80038ec <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037e0:	4b45      	ldr	r3, [pc, #276]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a44      	ldr	r2, [pc, #272]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ec:	f7fd fe74 	bl	80014d8 <HAL_GetTick>
 80037f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037f2:	e009      	b.n	8003808 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037f4:	f7fd fe70 	bl	80014d8 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d902      	bls.n	8003808 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	73fb      	strb	r3, [r7, #15]
        break;
 8003806:	e005      	b.n	8003814 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003808:	4b3b      	ldr	r3, [pc, #236]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1ef      	bne.n	80037f4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d168      	bne.n	80038ec <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d113      	bne.n	8003848 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003820:	4b35      	ldr	r3, [pc, #212]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003822:	695a      	ldr	r2, [r3, #20]
 8003824:	4b35      	ldr	r3, [pc, #212]	@ (80038fc <RCCEx_PLLSAI2_Config+0x1dc>)
 8003826:	4013      	ands	r3, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6892      	ldr	r2, [r2, #8]
 800382c:	0211      	lsls	r1, r2, #8
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68d2      	ldr	r2, [r2, #12]
 8003832:	06d2      	lsls	r2, r2, #27
 8003834:	4311      	orrs	r1, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6852      	ldr	r2, [r2, #4]
 800383a:	3a01      	subs	r2, #1
 800383c:	0112      	lsls	r2, r2, #4
 800383e:	430a      	orrs	r2, r1
 8003840:	492d      	ldr	r1, [pc, #180]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003842:	4313      	orrs	r3, r2
 8003844:	614b      	str	r3, [r1, #20]
 8003846:	e02d      	b.n	80038a4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d115      	bne.n	800387a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800384e:	4b2a      	ldr	r3, [pc, #168]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	4b2b      	ldr	r3, [pc, #172]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003854:	4013      	ands	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6892      	ldr	r2, [r2, #8]
 800385a:	0211      	lsls	r1, r2, #8
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6912      	ldr	r2, [r2, #16]
 8003860:	0852      	lsrs	r2, r2, #1
 8003862:	3a01      	subs	r2, #1
 8003864:	0552      	lsls	r2, r2, #21
 8003866:	4311      	orrs	r1, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6852      	ldr	r2, [r2, #4]
 800386c:	3a01      	subs	r2, #1
 800386e:	0112      	lsls	r2, r2, #4
 8003870:	430a      	orrs	r2, r1
 8003872:	4921      	ldr	r1, [pc, #132]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003874:	4313      	orrs	r3, r2
 8003876:	614b      	str	r3, [r1, #20]
 8003878:	e014      	b.n	80038a4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800387a:	4b1f      	ldr	r3, [pc, #124]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	4b21      	ldr	r3, [pc, #132]	@ (8003904 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003880:	4013      	ands	r3, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6892      	ldr	r2, [r2, #8]
 8003886:	0211      	lsls	r1, r2, #8
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6952      	ldr	r2, [r2, #20]
 800388c:	0852      	lsrs	r2, r2, #1
 800388e:	3a01      	subs	r2, #1
 8003890:	0652      	lsls	r2, r2, #25
 8003892:	4311      	orrs	r1, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6852      	ldr	r2, [r2, #4]
 8003898:	3a01      	subs	r2, #1
 800389a:	0112      	lsls	r2, r2, #4
 800389c:	430a      	orrs	r2, r1
 800389e:	4916      	ldr	r1, [pc, #88]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038a4:	4b14      	ldr	r3, [pc, #80]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a13      	ldr	r2, [pc, #76]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fd fe12 	bl	80014d8 <HAL_GetTick>
 80038b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038b6:	e009      	b.n	80038cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038b8:	f7fd fe0e 	bl	80014d8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d902      	bls.n	80038cc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	73fb      	strb	r3, [r7, #15]
          break;
 80038ca:	e005      	b.n	80038d8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038cc:	4b0a      	ldr	r3, [pc, #40]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0ef      	beq.n	80038b8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038de:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	4904      	ldr	r1, [pc, #16]	@ (80038f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
 80038fc:	07ff800f 	.word	0x07ff800f
 8003900:	ff9f800f 	.word	0xff9f800f
 8003904:	f9ff800f 	.word	0xf9ff800f

08003908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e042      	b.n	80039a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003920:	2b00      	cmp	r3, #0
 8003922:	d106      	bne.n	8003932 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7fd fbe7 	bl	8001100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2224      	movs	r2, #36	@ 0x24
 8003936:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fcee 	bl	800432c <UART_SetConfig>
 8003950:	4603      	mov	r3, r0
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e022      	b.n	80039a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 ffde 	bl	8004924 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f001 f865 	bl	8004a68 <UART_CheckIdleState>
 800399e:	4603      	mov	r3, r0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	@ 0x28
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	4613      	mov	r3, r2
 80039b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039be:	2b20      	cmp	r3, #32
 80039c0:	f040 8083 	bne.w	8003aca <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HAL_UART_Transmit+0x28>
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e07b      	b.n	8003acc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_UART_Transmit+0x3a>
 80039de:	2302      	movs	r3, #2
 80039e0:	e074      	b.n	8003acc <HAL_UART_Transmit+0x124>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2221      	movs	r2, #33	@ 0x21
 80039f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039fa:	f7fd fd6d 	bl	80014d8 <HAL_GetTick>
 80039fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	88fa      	ldrh	r2, [r7, #6]
 8003a04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	88fa      	ldrh	r2, [r7, #6]
 8003a0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a18:	d108      	bne.n	8003a2c <HAL_UART_Transmit+0x84>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d104      	bne.n	8003a2c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	e003      	b.n	8003a34 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8003a3c:	e02c      	b.n	8003a98 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2200      	movs	r2, #0
 8003a46:	2180      	movs	r1, #128	@ 0x80
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f001 f858 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e039      	b.n	8003acc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10b      	bne.n	8003a76 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	881a      	ldrh	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a6a:	b292      	uxth	r2, r2
 8003a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	3302      	adds	r3, #2
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	e007      	b.n	8003a86 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	781a      	ldrb	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	3301      	adds	r3, #1
 8003a84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1cc      	bne.n	8003a3e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2140      	movs	r1, #64	@ 0x40
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f001 f825 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e006      	b.n	8003acc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	e000      	b.n	8003acc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003aca:	2302      	movs	r3, #2
  }
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3720      	adds	r7, #32
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b091      	sub	sp, #68	@ 0x44
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	f040 808c 	bne.w	8003c06 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <HAL_UART_Transmit_IT+0x26>
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e084      	b.n	8003c08 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_UART_Transmit_IT+0x38>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e07d      	b.n	8003c08 <HAL_UART_Transmit_IT+0x134>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->pTxBuffPtr  = pData;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	88fa      	ldrh	r2, [r7, #6]
 8003b1e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	88fa      	ldrh	r2, [r7, #6]
 8003b26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	675a      	str	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2221      	movs	r2, #33	@ 0x21
 8003b3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

#if defined(USART_CR1_FIFOEN)
    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b48:	d12e      	bne.n	8003ba8 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b52:	d107      	bne.n	8003b64 <HAL_UART_Transmit_IT+0x90>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d103      	bne.n	8003b64 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c14 <HAL_UART_Transmit_IT+0x140>)
 8003b60:	675a      	str	r2, [r3, #116]	@ 0x74
 8003b62:	e002      	b.n	8003b6a <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4a2c      	ldr	r2, [pc, #176]	@ (8003c18 <HAL_UART_Transmit_IT+0x144>)
 8003b68:	675a      	str	r2, [r3, #116]	@ 0x74
      }

      __HAL_UNLOCK(huart);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3308      	adds	r3, #8
 8003b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7c:	e853 3f00 	ldrex	r3, [r3]
 8003b80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3308      	adds	r3, #8
 8003b90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b92:	637a      	str	r2, [r7, #52]	@ 0x34
 8003b94:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b9a:	e841 2300 	strex	r3, r2, [r1]
 8003b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e5      	bne.n	8003b72 <HAL_UART_Transmit_IT+0x9e>
 8003ba6:	e02c      	b.n	8003c02 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb0:	d107      	bne.n	8003bc2 <HAL_UART_Transmit_IT+0xee>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d103      	bne.n	8003bc2 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a17      	ldr	r2, [pc, #92]	@ (8003c1c <HAL_UART_Transmit_IT+0x148>)
 8003bbe:	675a      	str	r2, [r3, #116]	@ 0x74
 8003bc0:	e002      	b.n	8003bc8 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4a16      	ldr	r2, [pc, #88]	@ (8003c20 <HAL_UART_Transmit_IT+0x14c>)
 8003bc6:	675a      	str	r2, [r3, #116]	@ 0x74
      }

      __HAL_UNLOCK(huart);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bee:	623b      	str	r3, [r7, #32]
 8003bf0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf2:	69f9      	ldr	r1, [r7, #28]
 8003bf4:	6a3a      	ldr	r2, [r7, #32]
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e6      	bne.n	8003bd0 <HAL_UART_Transmit_IT+0xfc>

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e000      	b.n	8003c08 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8003c06:	2302      	movs	r3, #2
  }
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3744      	adds	r7, #68	@ 0x44
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	08005237 	.word	0x08005237
 8003c18:	08005157 	.word	0x08005157
 8003c1c:	08005095 	.word	0x08005095
 8003c20:	08004fdd 	.word	0x08004fdd

08003c24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08a      	sub	sp, #40	@ 0x28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d142      	bne.n	8003cc2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_UART_Receive_IT+0x24>
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e03b      	b.n	8003cc4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_UART_Receive_IT+0x36>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e034      	b.n	8003cc4 <HAL_UART_Receive_IT+0xa0>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a17      	ldr	r2, [pc, #92]	@ (8003ccc <HAL_UART_Receive_IT+0xa8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01f      	beq.n	8003cb2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d018      	beq.n	8003cb2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	623b      	str	r3, [r7, #32]
 8003ca0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	69f9      	ldr	r1, [r7, #28]
 8003ca4:	6a3a      	ldr	r2, [r7, #32]
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1e6      	bne.n	8003c80 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 ffe9 	bl	8004c90 <UART_Start_Receive_IT>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	e000      	b.n	8003cc4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003cc2:	2302      	movs	r3, #2
  }
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3728      	adds	r7, #40	@ 0x28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40008000 	.word	0x40008000

08003cd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b0ba      	sub	sp, #232	@ 0xe8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003cf6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003cfa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003cfe:	4013      	ands	r3, r2
 8003d00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003d04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d11b      	bne.n	8003d44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d015      	beq.n	8003d44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d105      	bne.n	8003d30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d009      	beq.n	8003d44 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 82d6 	beq.w	80042e6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	4798      	blx	r3
      }
      return;
 8003d42:	e2d0      	b.n	80042e6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003d44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 811f 	beq.w	8003f8c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003d4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003d52:	4b8b      	ldr	r3, [pc, #556]	@ (8003f80 <HAL_UART_IRQHandler+0x2b0>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003d5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003d5e:	4b89      	ldr	r3, [pc, #548]	@ (8003f84 <HAL_UART_IRQHandler+0x2b4>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 8112 	beq.w	8003f8c <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d011      	beq.n	8003d98 <HAL_UART_IRQHandler+0xc8>
 8003d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00b      	beq.n	8003d98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2201      	movs	r2, #1
 8003d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d8e:	f043 0201 	orr.w	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d011      	beq.n	8003dc8 <HAL_UART_IRQHandler+0xf8>
 8003da4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00b      	beq.n	8003dc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2202      	movs	r2, #2
 8003db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dbe:	f043 0204 	orr.w	r2, r3, #4
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d011      	beq.n	8003df8 <HAL_UART_IRQHandler+0x128>
 8003dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00b      	beq.n	8003df8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2204      	movs	r2, #4
 8003de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dee:	f043 0202 	orr.w	r2, r3, #2
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d017      	beq.n	8003e34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d105      	bne.n	8003e1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003e10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003e14:	4b5a      	ldr	r3, [pc, #360]	@ (8003f80 <HAL_UART_IRQHandler+0x2b0>)
 8003e16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00b      	beq.n	8003e34 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2208      	movs	r2, #8
 8003e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e2a:	f043 0208 	orr.w	r2, r3, #8
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d012      	beq.n	8003e66 <HAL_UART_IRQHandler+0x196>
 8003e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00c      	beq.n	8003e66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e5c:	f043 0220 	orr.w	r2, r3, #32
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 823c 	beq.w	80042ea <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d013      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d105      	bne.n	8003e96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eba:	2b40      	cmp	r3, #64	@ 0x40
 8003ebc:	d005      	beq.n	8003eca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ec2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d04f      	beq.n	8003f6a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f001 f80a 	bl	8004ee4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eda:	2b40      	cmp	r3, #64	@ 0x40
 8003edc:	d141      	bne.n	8003f62 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3308      	adds	r3, #8
 8003ee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ef8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3308      	adds	r3, #8
 8003f06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1d9      	bne.n	8003ede <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d013      	beq.n	8003f5a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f36:	4a14      	ldr	r2, [pc, #80]	@ (8003f88 <HAL_UART_IRQHandler+0x2b8>)
 8003f38:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fd fcec 	bl	800191c <HAL_DMA_Abort_IT>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d017      	beq.n	8003f7a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8003f54:	4610      	mov	r0, r2
 8003f56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f58:	e00f      	b.n	8003f7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f9d0 	bl	8004300 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	e00b      	b.n	8003f7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f9cc 	bl	8004300 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f68:	e007      	b.n	8003f7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f9c8 	bl	8004300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8003f78:	e1b7      	b.n	80042ea <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7a:	bf00      	nop
    return;
 8003f7c:	e1b5      	b.n	80042ea <HAL_UART_IRQHandler+0x61a>
 8003f7e:	bf00      	nop
 8003f80:	10000001 	.word	0x10000001
 8003f84:	04000120 	.word	0x04000120
 8003f88:	08004fb1 	.word	0x08004fb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	f040 814a 	bne.w	800422a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f9a:	f003 0310 	and.w	r3, r3, #16
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 8143 	beq.w	800422a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 813c 	beq.w	800422a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2210      	movs	r2, #16
 8003fb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc4:	2b40      	cmp	r3, #64	@ 0x40
 8003fc6:	f040 80b5 	bne.w	8004134 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fd6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 8187 	beq.w	80042ee <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fea:	429a      	cmp	r2, r3
 8003fec:	f080 817f 	bcs.w	80042ee <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ff6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	f040 8086 	bne.w	8004118 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004018:	e853 3f00 	ldrex	r3, [r3]
 800401c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004020:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004028:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004036:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800403a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004042:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800404e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1da      	bne.n	800400c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3308      	adds	r3, #8
 800405c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004066:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3308      	adds	r3, #8
 8004076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800407a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800407e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004082:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800408c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e1      	bne.n	8004056 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3308      	adds	r3, #8
 8004098:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3308      	adds	r3, #8
 80040b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e3      	bne.n	8004092 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040e8:	f023 0310 	bic.w	r3, r3, #16
 80040ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004100:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e4      	bne.n	80040d8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004112:	4618      	mov	r0, r3
 8004114:	f7fd fba6 	bl	8001864 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004124:	b29b      	uxth	r3, r3
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	b29b      	uxth	r3, r3
 800412a:	4619      	mov	r1, r3
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f8f1 	bl	8004314 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004132:	e0dc      	b.n	80042ee <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004140:	b29b      	uxth	r3, r3
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80ce 	beq.w	80042f2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004156:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 80c9 	beq.w	80042f2 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800416e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004174:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004182:	647b      	str	r3, [r7, #68]	@ 0x44
 8004184:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004186:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004188:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e4      	bne.n	8004160 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3308      	adds	r3, #8
 800419c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	623b      	str	r3, [r7, #32]
   return(result);
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3308      	adds	r3, #8
 80041ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041be:	633a      	str	r2, [r7, #48]	@ 0x30
 80041c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e1      	bne.n	8004196 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	e853 3f00 	ldrex	r3, [r3]
 80041f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0310 	bic.w	r3, r3, #16
 80041fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004208:	61fb      	str	r3, [r7, #28]
 800420a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	69b9      	ldr	r1, [r7, #24]
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	617b      	str	r3, [r7, #20]
   return(result);
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e4      	bne.n	80041e6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800421c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004220:	4619      	mov	r1, r3
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f876 	bl	8004314 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004228:	e063      	b.n	80042f2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800422e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00e      	beq.n	8004254 <HAL_UART_IRQHandler+0x584>
 8004236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800423a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d008      	beq.n	8004254 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800424a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f001 fcf7 	bl	8005c40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004252:	e051      	b.n	80042f8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800425c:	2b00      	cmp	r3, #0
 800425e:	d014      	beq.n	800428a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004268:	2b00      	cmp	r3, #0
 800426a:	d105      	bne.n	8004278 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800426c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004270:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d008      	beq.n	800428a <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800427c:	2b00      	cmp	r3, #0
 800427e:	d03a      	beq.n	80042f6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4798      	blx	r3
    }
    return;
 8004288:	e035      	b.n	80042f6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800428a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800428e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d009      	beq.n	80042aa <HAL_UART_IRQHandler+0x5da>
 8004296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800429a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f001 f83c 	bl	8005320 <UART_EndTransmit_IT>
    return;
 80042a8:	e026      	b.n	80042f8 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80042aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <HAL_UART_IRQHandler+0x5fa>
 80042b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f001 fcd0 	bl	8005c68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042c8:	e016      	b.n	80042f8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80042ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d010      	beq.n	80042f8 <HAL_UART_IRQHandler+0x628>
 80042d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	da0c      	bge.n	80042f8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f001 fcb8 	bl	8005c54 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042e4:	e008      	b.n	80042f8 <HAL_UART_IRQHandler+0x628>
      return;
 80042e6:	bf00      	nop
 80042e8:	e006      	b.n	80042f8 <HAL_UART_IRQHandler+0x628>
    return;
 80042ea:	bf00      	nop
 80042ec:	e004      	b.n	80042f8 <HAL_UART_IRQHandler+0x628>
      return;
 80042ee:	bf00      	nop
 80042f0:	e002      	b.n	80042f8 <HAL_UART_IRQHandler+0x628>
      return;
 80042f2:	bf00      	nop
 80042f4:	e000      	b.n	80042f8 <HAL_UART_IRQHandler+0x628>
    return;
 80042f6:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80042f8:	37e8      	adds	r7, #232	@ 0xe8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop

08004300 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800432c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004330:	b08c      	sub	sp, #48	@ 0x30
 8004332:	af00      	add	r7, sp, #0
 8004334:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	431a      	orrs	r2, r3
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	431a      	orrs	r2, r3
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	4313      	orrs	r3, r2
 8004352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4baa      	ldr	r3, [pc, #680]	@ (8004604 <UART_SetConfig+0x2d8>)
 800435c:	4013      	ands	r3, r2
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	6812      	ldr	r2, [r2, #0]
 8004362:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004364:	430b      	orrs	r3, r1
 8004366:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a9f      	ldr	r2, [pc, #636]	@ (8004608 <UART_SetConfig+0x2dc>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d004      	beq.n	8004398 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004394:	4313      	orrs	r3, r2
 8004396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80043a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043ac:	430b      	orrs	r3, r1
 80043ae:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b6:	f023 010f 	bic.w	r1, r3, #15
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a90      	ldr	r2, [pc, #576]	@ (800460c <UART_SetConfig+0x2e0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d125      	bne.n	800441c <UART_SetConfig+0xf0>
 80043d0:	4b8f      	ldr	r3, [pc, #572]	@ (8004610 <UART_SetConfig+0x2e4>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d81a      	bhi.n	8004414 <UART_SetConfig+0xe8>
 80043de:	a201      	add	r2, pc, #4	@ (adr r2, 80043e4 <UART_SetConfig+0xb8>)
 80043e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e4:	080043f5 	.word	0x080043f5
 80043e8:	08004405 	.word	0x08004405
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	0800440d 	.word	0x0800440d
 80043f4:	2301      	movs	r3, #1
 80043f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043fa:	e116      	b.n	800462a <UART_SetConfig+0x2fe>
 80043fc:	2302      	movs	r3, #2
 80043fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004402:	e112      	b.n	800462a <UART_SetConfig+0x2fe>
 8004404:	2304      	movs	r3, #4
 8004406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800440a:	e10e      	b.n	800462a <UART_SetConfig+0x2fe>
 800440c:	2308      	movs	r3, #8
 800440e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004412:	e10a      	b.n	800462a <UART_SetConfig+0x2fe>
 8004414:	2310      	movs	r3, #16
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441a:	e106      	b.n	800462a <UART_SetConfig+0x2fe>
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a7c      	ldr	r2, [pc, #496]	@ (8004614 <UART_SetConfig+0x2e8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d138      	bne.n	8004498 <UART_SetConfig+0x16c>
 8004426:	4b7a      	ldr	r3, [pc, #488]	@ (8004610 <UART_SetConfig+0x2e4>)
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800442c:	f003 030c 	and.w	r3, r3, #12
 8004430:	2b0c      	cmp	r3, #12
 8004432:	d82d      	bhi.n	8004490 <UART_SetConfig+0x164>
 8004434:	a201      	add	r2, pc, #4	@ (adr r2, 800443c <UART_SetConfig+0x110>)
 8004436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443a:	bf00      	nop
 800443c:	08004471 	.word	0x08004471
 8004440:	08004491 	.word	0x08004491
 8004444:	08004491 	.word	0x08004491
 8004448:	08004491 	.word	0x08004491
 800444c:	08004481 	.word	0x08004481
 8004450:	08004491 	.word	0x08004491
 8004454:	08004491 	.word	0x08004491
 8004458:	08004491 	.word	0x08004491
 800445c:	08004479 	.word	0x08004479
 8004460:	08004491 	.word	0x08004491
 8004464:	08004491 	.word	0x08004491
 8004468:	08004491 	.word	0x08004491
 800446c:	08004489 	.word	0x08004489
 8004470:	2300      	movs	r3, #0
 8004472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004476:	e0d8      	b.n	800462a <UART_SetConfig+0x2fe>
 8004478:	2302      	movs	r3, #2
 800447a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800447e:	e0d4      	b.n	800462a <UART_SetConfig+0x2fe>
 8004480:	2304      	movs	r3, #4
 8004482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004486:	e0d0      	b.n	800462a <UART_SetConfig+0x2fe>
 8004488:	2308      	movs	r3, #8
 800448a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800448e:	e0cc      	b.n	800462a <UART_SetConfig+0x2fe>
 8004490:	2310      	movs	r3, #16
 8004492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004496:	e0c8      	b.n	800462a <UART_SetConfig+0x2fe>
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a5e      	ldr	r2, [pc, #376]	@ (8004618 <UART_SetConfig+0x2ec>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d125      	bne.n	80044ee <UART_SetConfig+0x1c2>
 80044a2:	4b5b      	ldr	r3, [pc, #364]	@ (8004610 <UART_SetConfig+0x2e4>)
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80044ac:	2b30      	cmp	r3, #48	@ 0x30
 80044ae:	d016      	beq.n	80044de <UART_SetConfig+0x1b2>
 80044b0:	2b30      	cmp	r3, #48	@ 0x30
 80044b2:	d818      	bhi.n	80044e6 <UART_SetConfig+0x1ba>
 80044b4:	2b20      	cmp	r3, #32
 80044b6:	d00a      	beq.n	80044ce <UART_SetConfig+0x1a2>
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d814      	bhi.n	80044e6 <UART_SetConfig+0x1ba>
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <UART_SetConfig+0x19a>
 80044c0:	2b10      	cmp	r3, #16
 80044c2:	d008      	beq.n	80044d6 <UART_SetConfig+0x1aa>
 80044c4:	e00f      	b.n	80044e6 <UART_SetConfig+0x1ba>
 80044c6:	2300      	movs	r3, #0
 80044c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044cc:	e0ad      	b.n	800462a <UART_SetConfig+0x2fe>
 80044ce:	2302      	movs	r3, #2
 80044d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044d4:	e0a9      	b.n	800462a <UART_SetConfig+0x2fe>
 80044d6:	2304      	movs	r3, #4
 80044d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044dc:	e0a5      	b.n	800462a <UART_SetConfig+0x2fe>
 80044de:	2308      	movs	r3, #8
 80044e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044e4:	e0a1      	b.n	800462a <UART_SetConfig+0x2fe>
 80044e6:	2310      	movs	r3, #16
 80044e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ec:	e09d      	b.n	800462a <UART_SetConfig+0x2fe>
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a4a      	ldr	r2, [pc, #296]	@ (800461c <UART_SetConfig+0x2f0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d125      	bne.n	8004544 <UART_SetConfig+0x218>
 80044f8:	4b45      	ldr	r3, [pc, #276]	@ (8004610 <UART_SetConfig+0x2e4>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004502:	2bc0      	cmp	r3, #192	@ 0xc0
 8004504:	d016      	beq.n	8004534 <UART_SetConfig+0x208>
 8004506:	2bc0      	cmp	r3, #192	@ 0xc0
 8004508:	d818      	bhi.n	800453c <UART_SetConfig+0x210>
 800450a:	2b80      	cmp	r3, #128	@ 0x80
 800450c:	d00a      	beq.n	8004524 <UART_SetConfig+0x1f8>
 800450e:	2b80      	cmp	r3, #128	@ 0x80
 8004510:	d814      	bhi.n	800453c <UART_SetConfig+0x210>
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <UART_SetConfig+0x1f0>
 8004516:	2b40      	cmp	r3, #64	@ 0x40
 8004518:	d008      	beq.n	800452c <UART_SetConfig+0x200>
 800451a:	e00f      	b.n	800453c <UART_SetConfig+0x210>
 800451c:	2300      	movs	r3, #0
 800451e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004522:	e082      	b.n	800462a <UART_SetConfig+0x2fe>
 8004524:	2302      	movs	r3, #2
 8004526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800452a:	e07e      	b.n	800462a <UART_SetConfig+0x2fe>
 800452c:	2304      	movs	r3, #4
 800452e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004532:	e07a      	b.n	800462a <UART_SetConfig+0x2fe>
 8004534:	2308      	movs	r3, #8
 8004536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800453a:	e076      	b.n	800462a <UART_SetConfig+0x2fe>
 800453c:	2310      	movs	r3, #16
 800453e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004542:	e072      	b.n	800462a <UART_SetConfig+0x2fe>
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a35      	ldr	r2, [pc, #212]	@ (8004620 <UART_SetConfig+0x2f4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d12a      	bne.n	80045a4 <UART_SetConfig+0x278>
 800454e:	4b30      	ldr	r3, [pc, #192]	@ (8004610 <UART_SetConfig+0x2e4>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004554:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004558:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800455c:	d01a      	beq.n	8004594 <UART_SetConfig+0x268>
 800455e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004562:	d81b      	bhi.n	800459c <UART_SetConfig+0x270>
 8004564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004568:	d00c      	beq.n	8004584 <UART_SetConfig+0x258>
 800456a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800456e:	d815      	bhi.n	800459c <UART_SetConfig+0x270>
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <UART_SetConfig+0x250>
 8004574:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004578:	d008      	beq.n	800458c <UART_SetConfig+0x260>
 800457a:	e00f      	b.n	800459c <UART_SetConfig+0x270>
 800457c:	2300      	movs	r3, #0
 800457e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004582:	e052      	b.n	800462a <UART_SetConfig+0x2fe>
 8004584:	2302      	movs	r3, #2
 8004586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800458a:	e04e      	b.n	800462a <UART_SetConfig+0x2fe>
 800458c:	2304      	movs	r3, #4
 800458e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004592:	e04a      	b.n	800462a <UART_SetConfig+0x2fe>
 8004594:	2308      	movs	r3, #8
 8004596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800459a:	e046      	b.n	800462a <UART_SetConfig+0x2fe>
 800459c:	2310      	movs	r3, #16
 800459e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045a2:	e042      	b.n	800462a <UART_SetConfig+0x2fe>
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a17      	ldr	r2, [pc, #92]	@ (8004608 <UART_SetConfig+0x2dc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d13a      	bne.n	8004624 <UART_SetConfig+0x2f8>
 80045ae:	4b18      	ldr	r3, [pc, #96]	@ (8004610 <UART_SetConfig+0x2e4>)
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045bc:	d01a      	beq.n	80045f4 <UART_SetConfig+0x2c8>
 80045be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045c2:	d81b      	bhi.n	80045fc <UART_SetConfig+0x2d0>
 80045c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045c8:	d00c      	beq.n	80045e4 <UART_SetConfig+0x2b8>
 80045ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ce:	d815      	bhi.n	80045fc <UART_SetConfig+0x2d0>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <UART_SetConfig+0x2b0>
 80045d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045d8:	d008      	beq.n	80045ec <UART_SetConfig+0x2c0>
 80045da:	e00f      	b.n	80045fc <UART_SetConfig+0x2d0>
 80045dc:	2300      	movs	r3, #0
 80045de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045e2:	e022      	b.n	800462a <UART_SetConfig+0x2fe>
 80045e4:	2302      	movs	r3, #2
 80045e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ea:	e01e      	b.n	800462a <UART_SetConfig+0x2fe>
 80045ec:	2304      	movs	r3, #4
 80045ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045f2:	e01a      	b.n	800462a <UART_SetConfig+0x2fe>
 80045f4:	2308      	movs	r3, #8
 80045f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045fa:	e016      	b.n	800462a <UART_SetConfig+0x2fe>
 80045fc:	2310      	movs	r3, #16
 80045fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004602:	e012      	b.n	800462a <UART_SetConfig+0x2fe>
 8004604:	cfff69f3 	.word	0xcfff69f3
 8004608:	40008000 	.word	0x40008000
 800460c:	40013800 	.word	0x40013800
 8004610:	40021000 	.word	0x40021000
 8004614:	40004400 	.word	0x40004400
 8004618:	40004800 	.word	0x40004800
 800461c:	40004c00 	.word	0x40004c00
 8004620:	40005000 	.word	0x40005000
 8004624:	2310      	movs	r3, #16
 8004626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4aae      	ldr	r2, [pc, #696]	@ (80048e8 <UART_SetConfig+0x5bc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	f040 8097 	bne.w	8004764 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004636:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800463a:	2b08      	cmp	r3, #8
 800463c:	d823      	bhi.n	8004686 <UART_SetConfig+0x35a>
 800463e:	a201      	add	r2, pc, #4	@ (adr r2, 8004644 <UART_SetConfig+0x318>)
 8004640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004644:	08004669 	.word	0x08004669
 8004648:	08004687 	.word	0x08004687
 800464c:	08004671 	.word	0x08004671
 8004650:	08004687 	.word	0x08004687
 8004654:	08004677 	.word	0x08004677
 8004658:	08004687 	.word	0x08004687
 800465c:	08004687 	.word	0x08004687
 8004660:	08004687 	.word	0x08004687
 8004664:	0800467f 	.word	0x0800467f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004668:	f7fe fb4a 	bl	8002d00 <HAL_RCC_GetPCLK1Freq>
 800466c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800466e:	e010      	b.n	8004692 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004670:	4b9e      	ldr	r3, [pc, #632]	@ (80048ec <UART_SetConfig+0x5c0>)
 8004672:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004674:	e00d      	b.n	8004692 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004676:	f7fe faab 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 800467a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800467c:	e009      	b.n	8004692 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800467e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004682:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004684:	e005      	b.n	8004692 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004690:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 8130 	beq.w	80048fa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469e:	4a94      	ldr	r2, [pc, #592]	@ (80048f0 <UART_SetConfig+0x5c4>)
 80046a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046a4:	461a      	mov	r2, r3
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	4413      	add	r3, r2
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d305      	bcc.n	80046ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d903      	bls.n	80046d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80046d0:	e113      	b.n	80048fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	2200      	movs	r2, #0
 80046d6:	60bb      	str	r3, [r7, #8]
 80046d8:	60fa      	str	r2, [r7, #12]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046de:	4a84      	ldr	r2, [pc, #528]	@ (80048f0 <UART_SetConfig+0x5c4>)
 80046e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2200      	movs	r2, #0
 80046e8:	603b      	str	r3, [r7, #0]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046f4:	f7fb fdec 	bl	80002d0 <__aeabi_uldivmod>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4610      	mov	r0, r2
 80046fe:	4619      	mov	r1, r3
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	020b      	lsls	r3, r1, #8
 800470a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800470e:	0202      	lsls	r2, r0, #8
 8004710:	6979      	ldr	r1, [r7, #20]
 8004712:	6849      	ldr	r1, [r1, #4]
 8004714:	0849      	lsrs	r1, r1, #1
 8004716:	2000      	movs	r0, #0
 8004718:	460c      	mov	r4, r1
 800471a:	4605      	mov	r5, r0
 800471c:	eb12 0804 	adds.w	r8, r2, r4
 8004720:	eb43 0905 	adc.w	r9, r3, r5
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	469a      	mov	sl, r3
 800472c:	4693      	mov	fp, r2
 800472e:	4652      	mov	r2, sl
 8004730:	465b      	mov	r3, fp
 8004732:	4640      	mov	r0, r8
 8004734:	4649      	mov	r1, r9
 8004736:	f7fb fdcb 	bl	80002d0 <__aeabi_uldivmod>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4613      	mov	r3, r2
 8004740:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004748:	d308      	bcc.n	800475c <UART_SetConfig+0x430>
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004750:	d204      	bcs.n	800475c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6a3a      	ldr	r2, [r7, #32]
 8004758:	60da      	str	r2, [r3, #12]
 800475a:	e0ce      	b.n	80048fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004762:	e0ca      	b.n	80048fa <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800476c:	d166      	bne.n	800483c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800476e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004772:	2b08      	cmp	r3, #8
 8004774:	d827      	bhi.n	80047c6 <UART_SetConfig+0x49a>
 8004776:	a201      	add	r2, pc, #4	@ (adr r2, 800477c <UART_SetConfig+0x450>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	080047a1 	.word	0x080047a1
 8004780:	080047a9 	.word	0x080047a9
 8004784:	080047b1 	.word	0x080047b1
 8004788:	080047c7 	.word	0x080047c7
 800478c:	080047b7 	.word	0x080047b7
 8004790:	080047c7 	.word	0x080047c7
 8004794:	080047c7 	.word	0x080047c7
 8004798:	080047c7 	.word	0x080047c7
 800479c:	080047bf 	.word	0x080047bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a0:	f7fe faae 	bl	8002d00 <HAL_RCC_GetPCLK1Freq>
 80047a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047a6:	e014      	b.n	80047d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047a8:	f7fe fac0 	bl	8002d2c <HAL_RCC_GetPCLK2Freq>
 80047ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047ae:	e010      	b.n	80047d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b0:	4b4e      	ldr	r3, [pc, #312]	@ (80048ec <UART_SetConfig+0x5c0>)
 80047b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047b4:	e00d      	b.n	80047d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b6:	f7fe fa0b 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 80047ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047bc:	e009      	b.n	80047d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047c4:	e005      	b.n	80047d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80047d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 8090 	beq.w	80048fa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	4a44      	ldr	r2, [pc, #272]	@ (80048f0 <UART_SetConfig+0x5c4>)
 80047e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047e4:	461a      	mov	r2, r3
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80047ec:	005a      	lsls	r2, r3, #1
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	441a      	add	r2, r3
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	2b0f      	cmp	r3, #15
 8004804:	d916      	bls.n	8004834 <UART_SetConfig+0x508>
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800480c:	d212      	bcs.n	8004834 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	b29b      	uxth	r3, r3
 8004812:	f023 030f 	bic.w	r3, r3, #15
 8004816:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	085b      	lsrs	r3, r3, #1
 800481c:	b29b      	uxth	r3, r3
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	b29a      	uxth	r2, r3
 8004824:	8bfb      	ldrh	r3, [r7, #30]
 8004826:	4313      	orrs	r3, r2
 8004828:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	8bfa      	ldrh	r2, [r7, #30]
 8004830:	60da      	str	r2, [r3, #12]
 8004832:	e062      	b.n	80048fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800483a:	e05e      	b.n	80048fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800483c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004840:	2b08      	cmp	r3, #8
 8004842:	d828      	bhi.n	8004896 <UART_SetConfig+0x56a>
 8004844:	a201      	add	r2, pc, #4	@ (adr r2, 800484c <UART_SetConfig+0x520>)
 8004846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484a:	bf00      	nop
 800484c:	08004871 	.word	0x08004871
 8004850:	08004879 	.word	0x08004879
 8004854:	08004881 	.word	0x08004881
 8004858:	08004897 	.word	0x08004897
 800485c:	08004887 	.word	0x08004887
 8004860:	08004897 	.word	0x08004897
 8004864:	08004897 	.word	0x08004897
 8004868:	08004897 	.word	0x08004897
 800486c:	0800488f 	.word	0x0800488f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004870:	f7fe fa46 	bl	8002d00 <HAL_RCC_GetPCLK1Freq>
 8004874:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004876:	e014      	b.n	80048a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004878:	f7fe fa58 	bl	8002d2c <HAL_RCC_GetPCLK2Freq>
 800487c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800487e:	e010      	b.n	80048a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004880:	4b1a      	ldr	r3, [pc, #104]	@ (80048ec <UART_SetConfig+0x5c0>)
 8004882:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004884:	e00d      	b.n	80048a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004886:	f7fe f9a3 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 800488a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800488c:	e009      	b.n	80048a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800488e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004892:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004894:	e005      	b.n	80048a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80048a0:	bf00      	nop
    }

    if (pclk != 0U)
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d028      	beq.n	80048fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	4a10      	ldr	r2, [pc, #64]	@ (80048f0 <UART_SetConfig+0x5c4>)
 80048ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048b2:	461a      	mov	r2, r3
 80048b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	441a      	add	r2, r3
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ca:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	2b0f      	cmp	r3, #15
 80048d0:	d910      	bls.n	80048f4 <UART_SetConfig+0x5c8>
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d8:	d20c      	bcs.n	80048f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	b29a      	uxth	r2, r3
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60da      	str	r2, [r3, #12]
 80048e4:	e009      	b.n	80048fa <UART_SetConfig+0x5ce>
 80048e6:	bf00      	nop
 80048e8:	40008000 	.word	0x40008000
 80048ec:	00f42400 	.word	0x00f42400
 80048f0:	08006db4 	.word	0x08006db4
      }
      else
      {
        ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2201      	movs	r2, #1
 8004906:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2200      	movs	r2, #0
 800490e:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2200      	movs	r2, #0
 8004914:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8004916:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800491a:	4618      	mov	r0, r3
 800491c:	3730      	adds	r7, #48	@ 0x30
 800491e:	46bd      	mov	sp, r7
 8004920:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00a      	beq.n	80049d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01a      	beq.n	8004a3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a22:	d10a      	bne.n	8004a3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	605a      	str	r2, [r3, #4]
  }
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a78:	f7fc fd2e 	bl	80014d8 <HAL_GetTick>
 8004a7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d10e      	bne.n	8004aaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f82f 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e025      	b.n	8004af6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d10e      	bne.n	8004ad6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f819 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e00f      	b.n	8004af6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b09c      	sub	sp, #112	@ 0x70
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b0e:	e0a9      	b.n	8004c64 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b16:	f000 80a5 	beq.w	8004c64 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1a:	f7fc fcdd 	bl	80014d8 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d302      	bcc.n	8004b30 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d140      	bne.n	8004bb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004b3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b40:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004b44:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b50:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b52:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004b54:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004b56:	e841 2300 	strex	r3, r2, [r1]
 8004b5a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e6      	bne.n	8004b30 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3308      	adds	r3, #8
 8004b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b74:	f023 0301 	bic.w	r3, r3, #1
 8004b78:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3308      	adds	r3, #8
 8004b80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004b82:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004b84:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b86:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b8a:	e841 2300 	strex	r3, r2, [r1]
 8004b8e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1e5      	bne.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e069      	b.n	8004c86 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d051      	beq.n	8004c64 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bce:	d149      	bne.n	8004c64 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bd8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be2:	e853 3f00 	ldrex	r3, [r3]
 8004be6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bea:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004bee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bfa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e6      	bne.n	8004bda <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3308      	adds	r3, #8
 8004c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f023 0301 	bic.w	r3, r3, #1
 8004c22:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004c2c:	623a      	str	r2, [r7, #32]
 8004c2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	69f9      	ldr	r1, [r7, #28]
 8004c32:	6a3a      	ldr	r2, [r7, #32]
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e5      	bne.n	8004c0c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e010      	b.n	8004c86 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69da      	ldr	r2, [r3, #28]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	bf0c      	ite	eq
 8004c74:	2301      	moveq	r3, #1
 8004c76:	2300      	movne	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	f43f af46 	beq.w	8004b10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3770      	adds	r7, #112	@ 0x70
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b0a3      	sub	sp, #140	@ 0x8c
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	88fa      	ldrh	r2, [r7, #6]
 8004ca8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	88fa      	ldrh	r2, [r7, #6]
 8004cb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cc2:	d10e      	bne.n	8004ce2 <UART_Start_Receive_IT+0x52>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d105      	bne.n	8004cd8 <UART_Start_Receive_IT+0x48>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004cd2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cd6:	e02d      	b.n	8004d34 <UART_Start_Receive_IT+0xa4>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	22ff      	movs	r2, #255	@ 0xff
 8004cdc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004ce0:	e028      	b.n	8004d34 <UART_Start_Receive_IT+0xa4>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10d      	bne.n	8004d06 <UART_Start_Receive_IT+0x76>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <UART_Start_Receive_IT+0x6c>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	22ff      	movs	r2, #255	@ 0xff
 8004cf6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cfa:	e01b      	b.n	8004d34 <UART_Start_Receive_IT+0xa4>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	227f      	movs	r2, #127	@ 0x7f
 8004d00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d04:	e016      	b.n	8004d34 <UART_Start_Receive_IT+0xa4>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d0e:	d10d      	bne.n	8004d2c <UART_Start_Receive_IT+0x9c>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d104      	bne.n	8004d22 <UART_Start_Receive_IT+0x92>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	227f      	movs	r2, #127	@ 0x7f
 8004d1c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d20:	e008      	b.n	8004d34 <UART_Start_Receive_IT+0xa4>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	223f      	movs	r2, #63	@ 0x3f
 8004d26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d2a:	e003      	b.n	8004d34 <UART_Start_Receive_IT+0xa4>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2222      	movs	r2, #34	@ 0x22
 8004d40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3308      	adds	r3, #8
 8004d4a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004d54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3308      	adds	r3, #8
 8004d64:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004d68:	673a      	str	r2, [r7, #112]	@ 0x70
 8004d6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004d6e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004d70:	e841 2300 	strex	r3, r2, [r1]
 8004d74:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8004d76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e3      	bne.n	8004d44 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d84:	d153      	bne.n	8004e2e <UART_Start_Receive_IT+0x19e>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004d8c:	88fa      	ldrh	r2, [r7, #6]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d34d      	bcc.n	8004e2e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d9a:	d107      	bne.n	8004dac <UART_Start_Receive_IT+0x11c>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d103      	bne.n	8004dac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4a4b      	ldr	r2, [pc, #300]	@ (8004ed4 <UART_Start_Receive_IT+0x244>)
 8004da8:	671a      	str	r2, [r3, #112]	@ 0x70
 8004daa:	e002      	b.n	8004db2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4a4a      	ldr	r2, [pc, #296]	@ (8004ed8 <UART_Start_Receive_IT+0x248>)
 8004db0:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01a      	beq.n	8004df8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004de6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004dea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e4      	bne.n	8004dc2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3308      	adds	r3, #8
 8004e16:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004e18:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004e1a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e5      	bne.n	8004df8 <UART_Start_Receive_IT+0x168>
 8004e2c:	e04a      	b.n	8004ec4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e36:	d107      	bne.n	8004e48 <UART_Start_Receive_IT+0x1b8>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d103      	bne.n	8004e48 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4a26      	ldr	r2, [pc, #152]	@ (8004edc <UART_Start_Receive_IT+0x24c>)
 8004e44:	671a      	str	r2, [r3, #112]	@ 0x70
 8004e46:	e002      	b.n	8004e4e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4a25      	ldr	r2, [pc, #148]	@ (8004ee0 <UART_Start_Receive_IT+0x250>)
 8004e4c:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d019      	beq.n	8004e92 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e66:	e853 3f00 	ldrex	r3, [r3]
 8004e6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004e72:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e7e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e6      	bne.n	8004e5e <UART_Start_Receive_IT+0x1ce>
 8004e90:	e018      	b.n	8004ec4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	e853 3f00 	ldrex	r3, [r3]
 8004e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f043 0320 	orr.w	r3, r3, #32
 8004ea6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	461a      	mov	r2, r3
 8004eae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004eb0:	623b      	str	r3, [r7, #32]
 8004eb2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb4:	69f9      	ldr	r1, [r7, #28]
 8004eb6:	6a3a      	ldr	r2, [r7, #32]
 8004eb8:	e841 2300 	strex	r3, r2, [r1]
 8004ebc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1e6      	bne.n	8004e92 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	378c      	adds	r7, #140	@ 0x8c
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	0800593d 	.word	0x0800593d
 8004ed8:	08005641 	.word	0x08005641
 8004edc:	080054db 	.word	0x080054db
 8004ee0:	08005377 	.word	0x08005377

08004ee4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b095      	sub	sp, #84	@ 0x54
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e6      	bne.n	8004eec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3308      	adds	r3, #8
 8004f24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f34:	f023 0301 	bic.w	r3, r3, #1
 8004f38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e3      	bne.n	8004f1e <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d118      	bne.n	8004f90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f023 0310 	bic.w	r3, r3, #16
 8004f72:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6979      	ldr	r1, [r7, #20]
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	613b      	str	r3, [r7, #16]
   return(result);
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e6      	bne.n	8004f5e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8004fa4:	bf00      	nop
 8004fa6:	3754      	adds	r7, #84	@ 0x54
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f7ff f996 	bl	8004300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fd4:	bf00      	nop
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b08f      	sub	sp, #60	@ 0x3c
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fea:	2b21      	cmp	r3, #33	@ 0x21
 8004fec:	d14c      	bne.n	8005088 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d132      	bne.n	8005060 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	61fb      	str	r3, [r7, #28]
   return(result);
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800500e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	461a      	mov	r2, r3
 8005016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005018:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800501a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800501e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005020:	e841 2300 	strex	r3, r2, [r1]
 8005024:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e6      	bne.n	8004ffa <UART_TxISR_8BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	60bb      	str	r3, [r7, #8]
   return(result);
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005040:	633b      	str	r3, [r7, #48]	@ 0x30
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	461a      	mov	r2, r3
 8005048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504a:	61bb      	str	r3, [r7, #24]
 800504c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	6979      	ldr	r1, [r7, #20]
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	613b      	str	r3, [r7, #16]
   return(result);
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e6      	bne.n	800502c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800505e:	e013      	b.n	8005088 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005064:	781a      	ldrb	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800507c:	b29b      	uxth	r3, r3
 800507e:	3b01      	subs	r3, #1
 8005080:	b29a      	uxth	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8005088:	bf00      	nop
 800508a:	373c      	adds	r7, #60	@ 0x3c
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005094:	b480      	push	{r7}
 8005096:	b091      	sub	sp, #68	@ 0x44
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050a2:	2b21      	cmp	r3, #33	@ 0x21
 80050a4:	d151      	bne.n	800514a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d132      	bne.n	8005118 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	623b      	str	r3, [r7, #32]
   return(result);
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80050d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e6      	bne.n	80050b2 <UART_TxISR_16BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005102:	61fb      	str	r3, [r7, #28]
 8005104:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	69b9      	ldr	r1, [r7, #24]
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	617b      	str	r3, [r7, #20]
   return(result);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e6      	bne.n	80050e4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005116:	e018      	b.n	800514a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800511c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800511e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005120:	881a      	ldrh	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800512a:	b292      	uxth	r2, r2
 800512c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005132:	1c9a      	adds	r2, r3, #2
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800513e:	b29b      	uxth	r3, r3
 8005140:	3b01      	subs	r3, #1
 8005142:	b29a      	uxth	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800514a:	bf00      	nop
 800514c:	3744      	adds	r7, #68	@ 0x44
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005156:	b480      	push	{r7}
 8005158:	b091      	sub	sp, #68	@ 0x44
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005164:	2b21      	cmp	r3, #33	@ 0x21
 8005166:	d160      	bne.n	800522a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800516e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005170:	e057      	b.n	8005222 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005178:	b29b      	uxth	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d133      	bne.n	80051e6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3308      	adds	r3, #8
 8005184:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	623b      	str	r3, [r7, #32]
   return(result);
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005194:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3308      	adds	r3, #8
 800519c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800519e:	633a      	str	r2, [r7, #48]	@ 0x30
 80051a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e5      	bne.n	800517e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	60fb      	str	r3, [r7, #12]
   return(result);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d0:	61fb      	str	r3, [r7, #28]
 80051d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d4:	69b9      	ldr	r1, [r7, #24]
 80051d6:	69fa      	ldr	r2, [r7, #28]
 80051d8:	e841 2300 	strex	r3, r2, [r1]
 80051dc:	617b      	str	r3, [r7, #20]
   return(result);
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1e6      	bne.n	80051b2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80051e4:	e021      	b.n	800522a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d013      	beq.n	800521c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051f8:	781a      	ldrb	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800521c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800521e:	3b01      	subs	r3, #1
 8005220:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005222:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1a4      	bne.n	8005172 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005228:	e7ff      	b.n	800522a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800522a:	bf00      	nop
 800522c:	3744      	adds	r7, #68	@ 0x44
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005236:	b480      	push	{r7}
 8005238:	b091      	sub	sp, #68	@ 0x44
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005244:	2b21      	cmp	r3, #33	@ 0x21
 8005246:	d165      	bne.n	8005314 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800524e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005250:	e05c      	b.n	800530c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d133      	bne.n	80052c6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3308      	adds	r3, #8
 8005264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	61fb      	str	r3, [r7, #28]
   return(result);
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005274:	637b      	str	r3, [r7, #52]	@ 0x34
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3308      	adds	r3, #8
 800527c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800527e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005280:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800528c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e5      	bne.n	800525e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	60bb      	str	r3, [r7, #8]
   return(result);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	61bb      	str	r3, [r7, #24]
 80052b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	6979      	ldr	r1, [r7, #20]
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	613b      	str	r3, [r7, #16]
   return(result);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e6      	bne.n	8005292 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80052c4:	e026      	b.n	8005314 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d018      	beq.n	8005306 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052d8:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80052da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052dc:	881a      	ldrh	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052e6:	b292      	uxth	r2, r2
 80052e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ee:	1c9a      	adds	r2, r3, #2
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005306:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005308:	3b01      	subs	r3, #1
 800530a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800530c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800530e:	2b00      	cmp	r3, #0
 8005310:	d19f      	bne.n	8005252 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005312:	e7ff      	b.n	8005314 <UART_TxISR_16BIT_FIFOEN+0xde>
 8005314:	bf00      	nop
 8005316:	3744      	adds	r7, #68	@ 0x44
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	60bb      	str	r3, [r7, #8]
   return(result);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800533c:	61fb      	str	r3, [r7, #28]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	61bb      	str	r3, [r7, #24]
 8005348:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534a:	6979      	ldr	r1, [r7, #20]
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	613b      	str	r3, [r7, #16]
   return(result);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e6      	bne.n	8005328 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fb f947 	bl	80005fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800536e:	bf00      	nop
 8005370:	3720      	adds	r7, #32
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b096      	sub	sp, #88	@ 0x58
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005384:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538e:	2b22      	cmp	r3, #34	@ 0x22
 8005390:	f040 8095 	bne.w	80054be <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800539a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800539e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80053a2:	b2d9      	uxtb	r1, r3
 80053a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ae:	400a      	ands	r2, r1
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	3b01      	subs	r3, #1
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d17a      	bne.n	80054d2 <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e4:	e853 3f00 	ldrex	r3, [r3]
 80053e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80053fc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005400:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e6      	bne.n	80053dc <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3308      	adds	r3, #8
 8005414:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	623b      	str	r3, [r7, #32]
   return(result);
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	f023 0301 	bic.w	r3, r3, #1
 8005424:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3308      	adds	r3, #8
 800542c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800542e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005430:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800543c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e5      	bne.n	800540e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005454:	2b01      	cmp	r3, #1
 8005456:	d12e      	bne.n	80054b6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	60fb      	str	r3, [r7, #12]
   return(result);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0310 	bic.w	r3, r3, #16
 8005472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800547c:	61fb      	str	r3, [r7, #28]
 800547e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	69b9      	ldr	r1, [r7, #24]
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	617b      	str	r3, [r7, #20]
   return(result);
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e6      	bne.n	800545e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	f003 0310 	and.w	r3, r3, #16
 800549a:	2b10      	cmp	r3, #16
 800549c:	d103      	bne.n	80054a6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2210      	movs	r2, #16
 80054a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fe ff30 	bl	8004314 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054b4:	e00d      	b.n	80054d2 <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fb f8b6 	bl	8000628 <HAL_UART_RxCpltCallback>
}
 80054bc:	e009      	b.n	80054d2 <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	8b1b      	ldrh	r3, [r3, #24]
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0208 	orr.w	r2, r2, #8
 80054ce:	b292      	uxth	r2, r2
 80054d0:	831a      	strh	r2, [r3, #24]
}
 80054d2:	bf00      	nop
 80054d4:	3758      	adds	r7, #88	@ 0x58
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b096      	sub	sp, #88	@ 0x58
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80054e8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f2:	2b22      	cmp	r3, #34	@ 0x22
 80054f4:	f040 8095 	bne.w	8005622 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80054fe:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005506:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005508:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800550c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005510:	4013      	ands	r3, r2
 8005512:	b29a      	uxth	r2, r3
 8005514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005516:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800551c:	1c9a      	adds	r2, r3, #2
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005528:	b29b      	uxth	r3, r3
 800552a:	3b01      	subs	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d17a      	bne.n	8005636 <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800554e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005554:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800555e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005560:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005564:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800556c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e6      	bne.n	8005540 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	61fb      	str	r3, [r7, #28]
   return(result);
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	f023 0301 	bic.w	r3, r3, #1
 8005588:	64bb      	str	r3, [r7, #72]	@ 0x48
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3308      	adds	r3, #8
 8005590:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005592:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005594:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005598:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e5      	bne.n	8005572 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d12e      	bne.n	800561a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	e853 3f00 	ldrex	r3, [r3]
 80055ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f023 0310 	bic.w	r3, r3, #16
 80055d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	461a      	mov	r2, r3
 80055de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	6979      	ldr	r1, [r7, #20]
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	e841 2300 	strex	r3, r2, [r1]
 80055ec:	613b      	str	r3, [r7, #16]
   return(result);
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e6      	bne.n	80055c2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f003 0310 	and.w	r3, r3, #16
 80055fe:	2b10      	cmp	r3, #16
 8005600:	d103      	bne.n	800560a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2210      	movs	r2, #16
 8005608:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fe fe7e 	bl	8004314 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005618:	e00d      	b.n	8005636 <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fb f804 	bl	8000628 <HAL_UART_RxCpltCallback>
}
 8005620:	e009      	b.n	8005636 <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	8b1b      	ldrh	r3, [r3, #24]
 8005628:	b29a      	uxth	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0208 	orr.w	r2, r2, #8
 8005632:	b292      	uxth	r2, r2
 8005634:	831a      	strh	r2, [r3, #24]
}
 8005636:	bf00      	nop
 8005638:	3758      	adds	r7, #88	@ 0x58
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
	...

08005640 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b0a6      	sub	sp, #152	@ 0x98
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800564e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005676:	2b22      	cmp	r3, #34	@ 0x22
 8005678:	f040 814f 	bne.w	800591a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005682:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005686:	e0f6      	b.n	8005876 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800568e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005692:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8005696:	b2d9      	uxtb	r1, r3
 8005698:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800569c:	b2da      	uxtb	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056a2:	400a      	ands	r2, r1
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80056ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d053      	beq.n	8005782 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d011      	beq.n	800570a <UART_RxISR_8BIT_FIFOEN+0xca>
 80056e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00b      	beq.n	800570a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2201      	movs	r2, #1
 80056f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005700:	f043 0201 	orr.w	r2, r3, #1
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800570a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d011      	beq.n	800573a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005716:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00b      	beq.n	800573a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2202      	movs	r2, #2
 8005728:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005730:	f043 0204 	orr.w	r2, r3, #4
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800573a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800573e:	f003 0304 	and.w	r3, r3, #4
 8005742:	2b00      	cmp	r3, #0
 8005744:	d011      	beq.n	800576a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005746:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00b      	beq.n	800576a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2204      	movs	r2, #4
 8005758:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005760:	f043 0202 	orr.w	r2, r3, #2
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d006      	beq.n	8005782 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7fe fdc3 	bl	8004300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005788:	b29b      	uxth	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d173      	bne.n	8005876 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800579c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800579e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80057b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057b2:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80057b6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80057b8:	e841 2300 	strex	r3, r2, [r1]
 80057bc:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80057be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e4      	bne.n	800578e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3308      	adds	r3, #8
 80057ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80057d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057da:	f023 0301 	bic.w	r3, r3, #1
 80057de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3308      	adds	r3, #8
 80057e6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80057e8:	657a      	str	r2, [r7, #84]	@ 0x54
 80057ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80057ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057f0:	e841 2300 	strex	r3, r2, [r1]
 80057f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80057f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1e3      	bne.n	80057c4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800580e:	2b01      	cmp	r3, #1
 8005810:	d12e      	bne.n	8005870 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005820:	e853 3f00 	ldrex	r3, [r3]
 8005824:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005828:	f023 0310 	bic.w	r3, r3, #16
 800582c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005836:	643b      	str	r3, [r7, #64]	@ 0x40
 8005838:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800583c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e6      	bne.n	8005818 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	f003 0310 	and.w	r3, r3, #16
 8005854:	2b10      	cmp	r3, #16
 8005856:	d103      	bne.n	8005860 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2210      	movs	r2, #16
 800585e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7fe fd53 	bl	8004314 <HAL_UARTEx_RxEventCallback>
 800586e:	e002      	b.n	8005876 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7fa fed9 	bl	8000628 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005876:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800587a:	2b00      	cmp	r3, #0
 800587c:	d006      	beq.n	800588c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800587e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005882:	f003 0320 	and.w	r3, r3, #32
 8005886:	2b00      	cmp	r3, #0
 8005888:	f47f aefe 	bne.w	8005688 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005892:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005896:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800589a:	2b00      	cmp	r3, #0
 800589c:	d047      	beq.n	800592e <UART_RxISR_8BIT_FIFOEN+0x2ee>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80058a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d240      	bcs.n	800592e <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3308      	adds	r3, #8
 80058b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	e853 3f00 	ldrex	r3, [r3]
 80058ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3308      	adds	r3, #8
 80058ca:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80058cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058d4:	e841 2300 	strex	r3, r2, [r1]
 80058d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e5      	bne.n	80058ac <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a15      	ldr	r2, [pc, #84]	@ (8005938 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 80058e4:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	e853 3f00 	ldrex	r3, [r3]
 80058f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f043 0320 	orr.w	r3, r3, #32
 80058fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	461a      	mov	r2, r3
 8005902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005904:	61bb      	str	r3, [r7, #24]
 8005906:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005908:	6979      	ldr	r1, [r7, #20]
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	e841 2300 	strex	r3, r2, [r1]
 8005910:	613b      	str	r3, [r7, #16]
   return(result);
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1e6      	bne.n	80058e6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005918:	e009      	b.n	800592e <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	8b1b      	ldrh	r3, [r3, #24]
 8005920:	b29a      	uxth	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0208 	orr.w	r2, r2, #8
 800592a:	b292      	uxth	r2, r2
 800592c:	831a      	strh	r2, [r3, #24]
}
 800592e:	bf00      	nop
 8005930:	3798      	adds	r7, #152	@ 0x98
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	08005377 	.word	0x08005377

0800593c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b0a8      	sub	sp, #160	@ 0xa0
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800594a:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005972:	2b22      	cmp	r3, #34	@ 0x22
 8005974:	f040 8153 	bne.w	8005c1e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800597e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005982:	e0fa      	b.n	8005b7a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800598a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005992:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005996:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 800599a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800599e:	4013      	ands	r3, r2
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ac:	1c9a      	adds	r2, r3, #2
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80059ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d053      	beq.n	8005a82 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d011      	beq.n	8005a0a <UART_RxISR_16BIT_FIFOEN+0xce>
 80059e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00b      	beq.n	8005a0a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2201      	movs	r2, #1
 80059f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a00:	f043 0201 	orr.w	r2, r3, #1
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d011      	beq.n	8005a3a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005a16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00b      	beq.n	8005a3a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2202      	movs	r2, #2
 8005a28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a30:	f043 0204 	orr.w	r2, r3, #4
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d011      	beq.n	8005a6a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005a46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00b      	beq.n	8005a6a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2204      	movs	r2, #4
 8005a58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a60:	f043 0202 	orr.w	r2, r3, #2
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d006      	beq.n	8005a82 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7fe fc43 	bl	8004300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d175      	bne.n	8005b7a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005aa2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ab0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ab2:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ab6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005abe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e4      	bne.n	8005a8e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3308      	adds	r3, #8
 8005aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005acc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ace:	e853 3f00 	ldrex	r3, [r3]
 8005ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ad4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ad6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ada:	f023 0301 	bic.w	r3, r3, #1
 8005ade:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005aec:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005aee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005af2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005afa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e1      	bne.n	8005ac4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d12e      	bne.n	8005b74 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b2c:	f023 0310 	bic.w	r3, r3, #16
 8005b30:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b3c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e6      	bne.n	8005b1c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	f003 0310 	and.w	r3, r3, #16
 8005b58:	2b10      	cmp	r3, #16
 8005b5a:	d103      	bne.n	8005b64 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2210      	movs	r2, #16
 8005b62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7fe fbd1 	bl	8004314 <HAL_UARTEx_RxEventCallback>
 8005b72:	e002      	b.n	8005b7a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7fa fd57 	bl	8000628 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b7a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d006      	beq.n	8005b90 <UART_RxISR_16BIT_FIFOEN+0x254>
 8005b82:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f47f aefa 	bne.w	8005984 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b96:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005b9a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d047      	beq.n	8005c32 <UART_RxISR_16BIT_FIFOEN+0x2f6>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005ba8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d240      	bcs.n	8005c32 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3308      	adds	r3, #8
 8005bb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bba:	e853 3f00 	ldrex	r3, [r3]
 8005bbe:	623b      	str	r3, [r7, #32]
   return(result);
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bc6:	677b      	str	r3, [r7, #116]	@ 0x74
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3308      	adds	r3, #8
 8005bce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005bd0:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bd8:	e841 2300 	strex	r3, r2, [r1]
 8005bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e5      	bne.n	8005bb0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a15      	ldr	r2, [pc, #84]	@ (8005c3c <UART_RxISR_16BIT_FIFOEN+0x300>)
 8005be8:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f043 0320 	orr.w	r3, r3, #32
 8005bfe:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	461a      	mov	r2, r3
 8005c06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c08:	61fb      	str	r3, [r7, #28]
 8005c0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0c:	69b9      	ldr	r1, [r7, #24]
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	e841 2300 	strex	r3, r2, [r1]
 8005c14:	617b      	str	r3, [r7, #20]
   return(result);
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e6      	bne.n	8005bea <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c1c:	e009      	b.n	8005c32 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	8b1b      	ldrh	r3, [r3, #24]
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0208 	orr.w	r2, r2, #8
 8005c2e:	b292      	uxth	r2, r2
 8005c30:	831a      	strh	r2, [r3, #24]
}
 8005c32:	bf00      	nop
 8005c34:	37a0      	adds	r7, #160	@ 0xa0
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	080054db 	.word	0x080054db

08005c40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c8e:	2302      	movs	r3, #2
 8005c90:	e027      	b.n	8005ce2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2224      	movs	r2, #36	@ 0x24
 8005c9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0201 	bic.w	r2, r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005cc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d101      	bne.n	8005d06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e02d      	b.n	8005d62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2224      	movs	r2, #36	@ 0x24
 8005d12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0201 	bic.w	r2, r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f850 	bl	8005de8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d101      	bne.n	8005d82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e02d      	b.n	8005dde <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2224      	movs	r2, #36	@ 0x24
 8005d8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0201 	bic.w	r2, r2, #1
 8005da8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f812 	bl	8005de8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d108      	bne.n	8005e0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e08:	e031      	b.n	8005e6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e0a:	2308      	movs	r3, #8
 8005e0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e0e:	2308      	movs	r3, #8
 8005e10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	0e5b      	lsrs	r3, r3, #25
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	0f5b      	lsrs	r3, r3, #29
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e32:	7bbb      	ldrb	r3, [r7, #14]
 8005e34:	7b3a      	ldrb	r2, [r7, #12]
 8005e36:	4911      	ldr	r1, [pc, #68]	@ (8005e7c <UARTEx_SetNbDataToProcess+0x94>)
 8005e38:	5c8a      	ldrb	r2, [r1, r2]
 8005e3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e3e:	7b3a      	ldrb	r2, [r7, #12]
 8005e40:	490f      	ldr	r1, [pc, #60]	@ (8005e80 <UARTEx_SetNbDataToProcess+0x98>)
 8005e42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e44:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	7b7a      	ldrb	r2, [r7, #13]
 8005e54:	4909      	ldr	r1, [pc, #36]	@ (8005e7c <UARTEx_SetNbDataToProcess+0x94>)
 8005e56:	5c8a      	ldrb	r2, [r1, r2]
 8005e58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e5c:	7b7a      	ldrb	r2, [r7, #13]
 8005e5e:	4908      	ldr	r1, [pc, #32]	@ (8005e80 <UARTEx_SetNbDataToProcess+0x98>)
 8005e60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e62:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005e6e:	bf00      	nop
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	08006dcc 	.word	0x08006dcc
 8005e80:	08006dd4 	.word	0x08006dd4

08005e84 <atoi>:
 8005e84:	220a      	movs	r2, #10
 8005e86:	2100      	movs	r1, #0
 8005e88:	f000 b89c 	b.w	8005fc4 <strtol>

08005e8c <siprintf>:
 8005e8c:	b40e      	push	{r1, r2, r3}
 8005e8e:	b510      	push	{r4, lr}
 8005e90:	b09d      	sub	sp, #116	@ 0x74
 8005e92:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005e94:	9002      	str	r0, [sp, #8]
 8005e96:	9006      	str	r0, [sp, #24]
 8005e98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e9c:	480a      	ldr	r0, [pc, #40]	@ (8005ec8 <siprintf+0x3c>)
 8005e9e:	9107      	str	r1, [sp, #28]
 8005ea0:	9104      	str	r1, [sp, #16]
 8005ea2:	490a      	ldr	r1, [pc, #40]	@ (8005ecc <siprintf+0x40>)
 8005ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ea8:	9105      	str	r1, [sp, #20]
 8005eaa:	2400      	movs	r4, #0
 8005eac:	a902      	add	r1, sp, #8
 8005eae:	6800      	ldr	r0, [r0, #0]
 8005eb0:	9301      	str	r3, [sp, #4]
 8005eb2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005eb4:	f000 f948 	bl	8006148 <_svfiprintf_r>
 8005eb8:	9b02      	ldr	r3, [sp, #8]
 8005eba:	701c      	strb	r4, [r3, #0]
 8005ebc:	b01d      	add	sp, #116	@ 0x74
 8005ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ec2:	b003      	add	sp, #12
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	20000064 	.word	0x20000064
 8005ecc:	ffff0208 	.word	0xffff0208

08005ed0 <_strtol_l.isra.0>:
 8005ed0:	2b24      	cmp	r3, #36	@ 0x24
 8005ed2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed6:	4686      	mov	lr, r0
 8005ed8:	4690      	mov	r8, r2
 8005eda:	d801      	bhi.n	8005ee0 <_strtol_l.isra.0+0x10>
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d106      	bne.n	8005eee <_strtol_l.isra.0+0x1e>
 8005ee0:	f000 f894 	bl	800600c <__errno>
 8005ee4:	2316      	movs	r3, #22
 8005ee6:	6003      	str	r3, [r0, #0]
 8005ee8:	2000      	movs	r0, #0
 8005eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eee:	4834      	ldr	r0, [pc, #208]	@ (8005fc0 <_strtol_l.isra.0+0xf0>)
 8005ef0:	460d      	mov	r5, r1
 8005ef2:	462a      	mov	r2, r5
 8005ef4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ef8:	5d06      	ldrb	r6, [r0, r4]
 8005efa:	f016 0608 	ands.w	r6, r6, #8
 8005efe:	d1f8      	bne.n	8005ef2 <_strtol_l.isra.0+0x22>
 8005f00:	2c2d      	cmp	r4, #45	@ 0x2d
 8005f02:	d110      	bne.n	8005f26 <_strtol_l.isra.0+0x56>
 8005f04:	782c      	ldrb	r4, [r5, #0]
 8005f06:	2601      	movs	r6, #1
 8005f08:	1c95      	adds	r5, r2, #2
 8005f0a:	f033 0210 	bics.w	r2, r3, #16
 8005f0e:	d115      	bne.n	8005f3c <_strtol_l.isra.0+0x6c>
 8005f10:	2c30      	cmp	r4, #48	@ 0x30
 8005f12:	d10d      	bne.n	8005f30 <_strtol_l.isra.0+0x60>
 8005f14:	782a      	ldrb	r2, [r5, #0]
 8005f16:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005f1a:	2a58      	cmp	r2, #88	@ 0x58
 8005f1c:	d108      	bne.n	8005f30 <_strtol_l.isra.0+0x60>
 8005f1e:	786c      	ldrb	r4, [r5, #1]
 8005f20:	3502      	adds	r5, #2
 8005f22:	2310      	movs	r3, #16
 8005f24:	e00a      	b.n	8005f3c <_strtol_l.isra.0+0x6c>
 8005f26:	2c2b      	cmp	r4, #43	@ 0x2b
 8005f28:	bf04      	itt	eq
 8005f2a:	782c      	ldrbeq	r4, [r5, #0]
 8005f2c:	1c95      	addeq	r5, r2, #2
 8005f2e:	e7ec      	b.n	8005f0a <_strtol_l.isra.0+0x3a>
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1f6      	bne.n	8005f22 <_strtol_l.isra.0+0x52>
 8005f34:	2c30      	cmp	r4, #48	@ 0x30
 8005f36:	bf14      	ite	ne
 8005f38:	230a      	movne	r3, #10
 8005f3a:	2308      	moveq	r3, #8
 8005f3c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005f40:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8005f44:	2200      	movs	r2, #0
 8005f46:	fbbc f9f3 	udiv	r9, ip, r3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	fb03 ca19 	mls	sl, r3, r9, ip
 8005f50:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005f54:	2f09      	cmp	r7, #9
 8005f56:	d80f      	bhi.n	8005f78 <_strtol_l.isra.0+0xa8>
 8005f58:	463c      	mov	r4, r7
 8005f5a:	42a3      	cmp	r3, r4
 8005f5c:	dd1b      	ble.n	8005f96 <_strtol_l.isra.0+0xc6>
 8005f5e:	1c57      	adds	r7, r2, #1
 8005f60:	d007      	beq.n	8005f72 <_strtol_l.isra.0+0xa2>
 8005f62:	4581      	cmp	r9, r0
 8005f64:	d314      	bcc.n	8005f90 <_strtol_l.isra.0+0xc0>
 8005f66:	d101      	bne.n	8005f6c <_strtol_l.isra.0+0x9c>
 8005f68:	45a2      	cmp	sl, r4
 8005f6a:	db11      	blt.n	8005f90 <_strtol_l.isra.0+0xc0>
 8005f6c:	fb00 4003 	mla	r0, r0, r3, r4
 8005f70:	2201      	movs	r2, #1
 8005f72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f76:	e7eb      	b.n	8005f50 <_strtol_l.isra.0+0x80>
 8005f78:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005f7c:	2f19      	cmp	r7, #25
 8005f7e:	d801      	bhi.n	8005f84 <_strtol_l.isra.0+0xb4>
 8005f80:	3c37      	subs	r4, #55	@ 0x37
 8005f82:	e7ea      	b.n	8005f5a <_strtol_l.isra.0+0x8a>
 8005f84:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005f88:	2f19      	cmp	r7, #25
 8005f8a:	d804      	bhi.n	8005f96 <_strtol_l.isra.0+0xc6>
 8005f8c:	3c57      	subs	r4, #87	@ 0x57
 8005f8e:	e7e4      	b.n	8005f5a <_strtol_l.isra.0+0x8a>
 8005f90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f94:	e7ed      	b.n	8005f72 <_strtol_l.isra.0+0xa2>
 8005f96:	1c53      	adds	r3, r2, #1
 8005f98:	d108      	bne.n	8005fac <_strtol_l.isra.0+0xdc>
 8005f9a:	2322      	movs	r3, #34	@ 0x22
 8005f9c:	f8ce 3000 	str.w	r3, [lr]
 8005fa0:	4660      	mov	r0, ip
 8005fa2:	f1b8 0f00 	cmp.w	r8, #0
 8005fa6:	d0a0      	beq.n	8005eea <_strtol_l.isra.0+0x1a>
 8005fa8:	1e69      	subs	r1, r5, #1
 8005faa:	e006      	b.n	8005fba <_strtol_l.isra.0+0xea>
 8005fac:	b106      	cbz	r6, 8005fb0 <_strtol_l.isra.0+0xe0>
 8005fae:	4240      	negs	r0, r0
 8005fb0:	f1b8 0f00 	cmp.w	r8, #0
 8005fb4:	d099      	beq.n	8005eea <_strtol_l.isra.0+0x1a>
 8005fb6:	2a00      	cmp	r2, #0
 8005fb8:	d1f6      	bne.n	8005fa8 <_strtol_l.isra.0+0xd8>
 8005fba:	f8c8 1000 	str.w	r1, [r8]
 8005fbe:	e794      	b.n	8005eea <_strtol_l.isra.0+0x1a>
 8005fc0:	08006ddd 	.word	0x08006ddd

08005fc4 <strtol>:
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	460a      	mov	r2, r1
 8005fc8:	4601      	mov	r1, r0
 8005fca:	4802      	ldr	r0, [pc, #8]	@ (8005fd4 <strtol+0x10>)
 8005fcc:	6800      	ldr	r0, [r0, #0]
 8005fce:	f7ff bf7f 	b.w	8005ed0 <_strtol_l.isra.0>
 8005fd2:	bf00      	nop
 8005fd4:	20000064 	.word	0x20000064

08005fd8 <memset>:
 8005fd8:	4402      	add	r2, r0
 8005fda:	4603      	mov	r3, r0
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d100      	bne.n	8005fe2 <memset+0xa>
 8005fe0:	4770      	bx	lr
 8005fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8005fe6:	e7f9      	b.n	8005fdc <memset+0x4>

08005fe8 <strncmp>:
 8005fe8:	b510      	push	{r4, lr}
 8005fea:	b16a      	cbz	r2, 8006008 <strncmp+0x20>
 8005fec:	3901      	subs	r1, #1
 8005fee:	1884      	adds	r4, r0, r2
 8005ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ff4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d103      	bne.n	8006004 <strncmp+0x1c>
 8005ffc:	42a0      	cmp	r0, r4
 8005ffe:	d001      	beq.n	8006004 <strncmp+0x1c>
 8006000:	2a00      	cmp	r2, #0
 8006002:	d1f5      	bne.n	8005ff0 <strncmp+0x8>
 8006004:	1ad0      	subs	r0, r2, r3
 8006006:	bd10      	pop	{r4, pc}
 8006008:	4610      	mov	r0, r2
 800600a:	e7fc      	b.n	8006006 <strncmp+0x1e>

0800600c <__errno>:
 800600c:	4b01      	ldr	r3, [pc, #4]	@ (8006014 <__errno+0x8>)
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	20000064 	.word	0x20000064

08006018 <__libc_init_array>:
 8006018:	b570      	push	{r4, r5, r6, lr}
 800601a:	4d0d      	ldr	r5, [pc, #52]	@ (8006050 <__libc_init_array+0x38>)
 800601c:	4c0d      	ldr	r4, [pc, #52]	@ (8006054 <__libc_init_array+0x3c>)
 800601e:	1b64      	subs	r4, r4, r5
 8006020:	10a4      	asrs	r4, r4, #2
 8006022:	2600      	movs	r6, #0
 8006024:	42a6      	cmp	r6, r4
 8006026:	d109      	bne.n	800603c <__libc_init_array+0x24>
 8006028:	4d0b      	ldr	r5, [pc, #44]	@ (8006058 <__libc_init_array+0x40>)
 800602a:	4c0c      	ldr	r4, [pc, #48]	@ (800605c <__libc_init_array+0x44>)
 800602c:	f000 fc6c 	bl	8006908 <_init>
 8006030:	1b64      	subs	r4, r4, r5
 8006032:	10a4      	asrs	r4, r4, #2
 8006034:	2600      	movs	r6, #0
 8006036:	42a6      	cmp	r6, r4
 8006038:	d105      	bne.n	8006046 <__libc_init_array+0x2e>
 800603a:	bd70      	pop	{r4, r5, r6, pc}
 800603c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006040:	4798      	blx	r3
 8006042:	3601      	adds	r6, #1
 8006044:	e7ee      	b.n	8006024 <__libc_init_array+0xc>
 8006046:	f855 3b04 	ldr.w	r3, [r5], #4
 800604a:	4798      	blx	r3
 800604c:	3601      	adds	r6, #1
 800604e:	e7f2      	b.n	8006036 <__libc_init_array+0x1e>
 8006050:	08006f18 	.word	0x08006f18
 8006054:	08006f18 	.word	0x08006f18
 8006058:	08006f18 	.word	0x08006f18
 800605c:	08006f1c 	.word	0x08006f1c

08006060 <__retarget_lock_acquire_recursive>:
 8006060:	4770      	bx	lr

08006062 <__retarget_lock_release_recursive>:
 8006062:	4770      	bx	lr

08006064 <strcpy>:
 8006064:	4603      	mov	r3, r0
 8006066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800606a:	f803 2b01 	strb.w	r2, [r3], #1
 800606e:	2a00      	cmp	r2, #0
 8006070:	d1f9      	bne.n	8006066 <strcpy+0x2>
 8006072:	4770      	bx	lr

08006074 <memcpy>:
 8006074:	440a      	add	r2, r1
 8006076:	4291      	cmp	r1, r2
 8006078:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800607c:	d100      	bne.n	8006080 <memcpy+0xc>
 800607e:	4770      	bx	lr
 8006080:	b510      	push	{r4, lr}
 8006082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800608a:	4291      	cmp	r1, r2
 800608c:	d1f9      	bne.n	8006082 <memcpy+0xe>
 800608e:	bd10      	pop	{r4, pc}

08006090 <__ssputs_r>:
 8006090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006094:	688e      	ldr	r6, [r1, #8]
 8006096:	461f      	mov	r7, r3
 8006098:	42be      	cmp	r6, r7
 800609a:	680b      	ldr	r3, [r1, #0]
 800609c:	4682      	mov	sl, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	4690      	mov	r8, r2
 80060a2:	d82d      	bhi.n	8006100 <__ssputs_r+0x70>
 80060a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80060ac:	d026      	beq.n	80060fc <__ssputs_r+0x6c>
 80060ae:	6965      	ldr	r5, [r4, #20]
 80060b0:	6909      	ldr	r1, [r1, #16]
 80060b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060b6:	eba3 0901 	sub.w	r9, r3, r1
 80060ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060be:	1c7b      	adds	r3, r7, #1
 80060c0:	444b      	add	r3, r9
 80060c2:	106d      	asrs	r5, r5, #1
 80060c4:	429d      	cmp	r5, r3
 80060c6:	bf38      	it	cc
 80060c8:	461d      	movcc	r5, r3
 80060ca:	0553      	lsls	r3, r2, #21
 80060cc:	d527      	bpl.n	800611e <__ssputs_r+0x8e>
 80060ce:	4629      	mov	r1, r5
 80060d0:	f000 f958 	bl	8006384 <_malloc_r>
 80060d4:	4606      	mov	r6, r0
 80060d6:	b360      	cbz	r0, 8006132 <__ssputs_r+0xa2>
 80060d8:	6921      	ldr	r1, [r4, #16]
 80060da:	464a      	mov	r2, r9
 80060dc:	f7ff ffca 	bl	8006074 <memcpy>
 80060e0:	89a3      	ldrh	r3, [r4, #12]
 80060e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80060e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ea:	81a3      	strh	r3, [r4, #12]
 80060ec:	6126      	str	r6, [r4, #16]
 80060ee:	6165      	str	r5, [r4, #20]
 80060f0:	444e      	add	r6, r9
 80060f2:	eba5 0509 	sub.w	r5, r5, r9
 80060f6:	6026      	str	r6, [r4, #0]
 80060f8:	60a5      	str	r5, [r4, #8]
 80060fa:	463e      	mov	r6, r7
 80060fc:	42be      	cmp	r6, r7
 80060fe:	d900      	bls.n	8006102 <__ssputs_r+0x72>
 8006100:	463e      	mov	r6, r7
 8006102:	6820      	ldr	r0, [r4, #0]
 8006104:	4632      	mov	r2, r6
 8006106:	4641      	mov	r1, r8
 8006108:	f000 fb82 	bl	8006810 <memmove>
 800610c:	68a3      	ldr	r3, [r4, #8]
 800610e:	1b9b      	subs	r3, r3, r6
 8006110:	60a3      	str	r3, [r4, #8]
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	4433      	add	r3, r6
 8006116:	6023      	str	r3, [r4, #0]
 8006118:	2000      	movs	r0, #0
 800611a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800611e:	462a      	mov	r2, r5
 8006120:	f000 fb48 	bl	80067b4 <_realloc_r>
 8006124:	4606      	mov	r6, r0
 8006126:	2800      	cmp	r0, #0
 8006128:	d1e0      	bne.n	80060ec <__ssputs_r+0x5c>
 800612a:	6921      	ldr	r1, [r4, #16]
 800612c:	4650      	mov	r0, sl
 800612e:	f000 fb99 	bl	8006864 <_free_r>
 8006132:	230c      	movs	r3, #12
 8006134:	f8ca 3000 	str.w	r3, [sl]
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800613e:	81a3      	strh	r3, [r4, #12]
 8006140:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006144:	e7e9      	b.n	800611a <__ssputs_r+0x8a>
	...

08006148 <_svfiprintf_r>:
 8006148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	4698      	mov	r8, r3
 800614e:	898b      	ldrh	r3, [r1, #12]
 8006150:	061b      	lsls	r3, r3, #24
 8006152:	b09d      	sub	sp, #116	@ 0x74
 8006154:	4607      	mov	r7, r0
 8006156:	460d      	mov	r5, r1
 8006158:	4614      	mov	r4, r2
 800615a:	d510      	bpl.n	800617e <_svfiprintf_r+0x36>
 800615c:	690b      	ldr	r3, [r1, #16]
 800615e:	b973      	cbnz	r3, 800617e <_svfiprintf_r+0x36>
 8006160:	2140      	movs	r1, #64	@ 0x40
 8006162:	f000 f90f 	bl	8006384 <_malloc_r>
 8006166:	6028      	str	r0, [r5, #0]
 8006168:	6128      	str	r0, [r5, #16]
 800616a:	b930      	cbnz	r0, 800617a <_svfiprintf_r+0x32>
 800616c:	230c      	movs	r3, #12
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006174:	b01d      	add	sp, #116	@ 0x74
 8006176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617a:	2340      	movs	r3, #64	@ 0x40
 800617c:	616b      	str	r3, [r5, #20]
 800617e:	2300      	movs	r3, #0
 8006180:	9309      	str	r3, [sp, #36]	@ 0x24
 8006182:	2320      	movs	r3, #32
 8006184:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006188:	f8cd 800c 	str.w	r8, [sp, #12]
 800618c:	2330      	movs	r3, #48	@ 0x30
 800618e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800632c <_svfiprintf_r+0x1e4>
 8006192:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006196:	f04f 0901 	mov.w	r9, #1
 800619a:	4623      	mov	r3, r4
 800619c:	469a      	mov	sl, r3
 800619e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061a2:	b10a      	cbz	r2, 80061a8 <_svfiprintf_r+0x60>
 80061a4:	2a25      	cmp	r2, #37	@ 0x25
 80061a6:	d1f9      	bne.n	800619c <_svfiprintf_r+0x54>
 80061a8:	ebba 0b04 	subs.w	fp, sl, r4
 80061ac:	d00b      	beq.n	80061c6 <_svfiprintf_r+0x7e>
 80061ae:	465b      	mov	r3, fp
 80061b0:	4622      	mov	r2, r4
 80061b2:	4629      	mov	r1, r5
 80061b4:	4638      	mov	r0, r7
 80061b6:	f7ff ff6b 	bl	8006090 <__ssputs_r>
 80061ba:	3001      	adds	r0, #1
 80061bc:	f000 80a7 	beq.w	800630e <_svfiprintf_r+0x1c6>
 80061c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061c2:	445a      	add	r2, fp
 80061c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80061c6:	f89a 3000 	ldrb.w	r3, [sl]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 809f 	beq.w	800630e <_svfiprintf_r+0x1c6>
 80061d0:	2300      	movs	r3, #0
 80061d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80061d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061da:	f10a 0a01 	add.w	sl, sl, #1
 80061de:	9304      	str	r3, [sp, #16]
 80061e0:	9307      	str	r3, [sp, #28]
 80061e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80061e8:	4654      	mov	r4, sl
 80061ea:	2205      	movs	r2, #5
 80061ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061f0:	484e      	ldr	r0, [pc, #312]	@ (800632c <_svfiprintf_r+0x1e4>)
 80061f2:	f7fa f81d 	bl	8000230 <memchr>
 80061f6:	9a04      	ldr	r2, [sp, #16]
 80061f8:	b9d8      	cbnz	r0, 8006232 <_svfiprintf_r+0xea>
 80061fa:	06d0      	lsls	r0, r2, #27
 80061fc:	bf44      	itt	mi
 80061fe:	2320      	movmi	r3, #32
 8006200:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006204:	0711      	lsls	r1, r2, #28
 8006206:	bf44      	itt	mi
 8006208:	232b      	movmi	r3, #43	@ 0x2b
 800620a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800620e:	f89a 3000 	ldrb.w	r3, [sl]
 8006212:	2b2a      	cmp	r3, #42	@ 0x2a
 8006214:	d015      	beq.n	8006242 <_svfiprintf_r+0xfa>
 8006216:	9a07      	ldr	r2, [sp, #28]
 8006218:	4654      	mov	r4, sl
 800621a:	2000      	movs	r0, #0
 800621c:	f04f 0c0a 	mov.w	ip, #10
 8006220:	4621      	mov	r1, r4
 8006222:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006226:	3b30      	subs	r3, #48	@ 0x30
 8006228:	2b09      	cmp	r3, #9
 800622a:	d94b      	bls.n	80062c4 <_svfiprintf_r+0x17c>
 800622c:	b1b0      	cbz	r0, 800625c <_svfiprintf_r+0x114>
 800622e:	9207      	str	r2, [sp, #28]
 8006230:	e014      	b.n	800625c <_svfiprintf_r+0x114>
 8006232:	eba0 0308 	sub.w	r3, r0, r8
 8006236:	fa09 f303 	lsl.w	r3, r9, r3
 800623a:	4313      	orrs	r3, r2
 800623c:	9304      	str	r3, [sp, #16]
 800623e:	46a2      	mov	sl, r4
 8006240:	e7d2      	b.n	80061e8 <_svfiprintf_r+0xa0>
 8006242:	9b03      	ldr	r3, [sp, #12]
 8006244:	1d19      	adds	r1, r3, #4
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	9103      	str	r1, [sp, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	bfbb      	ittet	lt
 800624e:	425b      	neglt	r3, r3
 8006250:	f042 0202 	orrlt.w	r2, r2, #2
 8006254:	9307      	strge	r3, [sp, #28]
 8006256:	9307      	strlt	r3, [sp, #28]
 8006258:	bfb8      	it	lt
 800625a:	9204      	strlt	r2, [sp, #16]
 800625c:	7823      	ldrb	r3, [r4, #0]
 800625e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006260:	d10a      	bne.n	8006278 <_svfiprintf_r+0x130>
 8006262:	7863      	ldrb	r3, [r4, #1]
 8006264:	2b2a      	cmp	r3, #42	@ 0x2a
 8006266:	d132      	bne.n	80062ce <_svfiprintf_r+0x186>
 8006268:	9b03      	ldr	r3, [sp, #12]
 800626a:	1d1a      	adds	r2, r3, #4
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	9203      	str	r2, [sp, #12]
 8006270:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006274:	3402      	adds	r4, #2
 8006276:	9305      	str	r3, [sp, #20]
 8006278:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800633c <_svfiprintf_r+0x1f4>
 800627c:	7821      	ldrb	r1, [r4, #0]
 800627e:	2203      	movs	r2, #3
 8006280:	4650      	mov	r0, sl
 8006282:	f7f9 ffd5 	bl	8000230 <memchr>
 8006286:	b138      	cbz	r0, 8006298 <_svfiprintf_r+0x150>
 8006288:	9b04      	ldr	r3, [sp, #16]
 800628a:	eba0 000a 	sub.w	r0, r0, sl
 800628e:	2240      	movs	r2, #64	@ 0x40
 8006290:	4082      	lsls	r2, r0
 8006292:	4313      	orrs	r3, r2
 8006294:	3401      	adds	r4, #1
 8006296:	9304      	str	r3, [sp, #16]
 8006298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800629c:	4824      	ldr	r0, [pc, #144]	@ (8006330 <_svfiprintf_r+0x1e8>)
 800629e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062a2:	2206      	movs	r2, #6
 80062a4:	f7f9 ffc4 	bl	8000230 <memchr>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d036      	beq.n	800631a <_svfiprintf_r+0x1d2>
 80062ac:	4b21      	ldr	r3, [pc, #132]	@ (8006334 <_svfiprintf_r+0x1ec>)
 80062ae:	bb1b      	cbnz	r3, 80062f8 <_svfiprintf_r+0x1b0>
 80062b0:	9b03      	ldr	r3, [sp, #12]
 80062b2:	3307      	adds	r3, #7
 80062b4:	f023 0307 	bic.w	r3, r3, #7
 80062b8:	3308      	adds	r3, #8
 80062ba:	9303      	str	r3, [sp, #12]
 80062bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062be:	4433      	add	r3, r6
 80062c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80062c2:	e76a      	b.n	800619a <_svfiprintf_r+0x52>
 80062c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80062c8:	460c      	mov	r4, r1
 80062ca:	2001      	movs	r0, #1
 80062cc:	e7a8      	b.n	8006220 <_svfiprintf_r+0xd8>
 80062ce:	2300      	movs	r3, #0
 80062d0:	3401      	adds	r4, #1
 80062d2:	9305      	str	r3, [sp, #20]
 80062d4:	4619      	mov	r1, r3
 80062d6:	f04f 0c0a 	mov.w	ip, #10
 80062da:	4620      	mov	r0, r4
 80062dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062e0:	3a30      	subs	r2, #48	@ 0x30
 80062e2:	2a09      	cmp	r2, #9
 80062e4:	d903      	bls.n	80062ee <_svfiprintf_r+0x1a6>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0c6      	beq.n	8006278 <_svfiprintf_r+0x130>
 80062ea:	9105      	str	r1, [sp, #20]
 80062ec:	e7c4      	b.n	8006278 <_svfiprintf_r+0x130>
 80062ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80062f2:	4604      	mov	r4, r0
 80062f4:	2301      	movs	r3, #1
 80062f6:	e7f0      	b.n	80062da <_svfiprintf_r+0x192>
 80062f8:	ab03      	add	r3, sp, #12
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	462a      	mov	r2, r5
 80062fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006338 <_svfiprintf_r+0x1f0>)
 8006300:	a904      	add	r1, sp, #16
 8006302:	4638      	mov	r0, r7
 8006304:	f3af 8000 	nop.w
 8006308:	1c42      	adds	r2, r0, #1
 800630a:	4606      	mov	r6, r0
 800630c:	d1d6      	bne.n	80062bc <_svfiprintf_r+0x174>
 800630e:	89ab      	ldrh	r3, [r5, #12]
 8006310:	065b      	lsls	r3, r3, #25
 8006312:	f53f af2d 	bmi.w	8006170 <_svfiprintf_r+0x28>
 8006316:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006318:	e72c      	b.n	8006174 <_svfiprintf_r+0x2c>
 800631a:	ab03      	add	r3, sp, #12
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	462a      	mov	r2, r5
 8006320:	4b05      	ldr	r3, [pc, #20]	@ (8006338 <_svfiprintf_r+0x1f0>)
 8006322:	a904      	add	r1, sp, #16
 8006324:	4638      	mov	r0, r7
 8006326:	f000 f91b 	bl	8006560 <_printf_i>
 800632a:	e7ed      	b.n	8006308 <_svfiprintf_r+0x1c0>
 800632c:	08006edd 	.word	0x08006edd
 8006330:	08006ee7 	.word	0x08006ee7
 8006334:	00000000 	.word	0x00000000
 8006338:	08006091 	.word	0x08006091
 800633c:	08006ee3 	.word	0x08006ee3

08006340 <sbrk_aligned>:
 8006340:	b570      	push	{r4, r5, r6, lr}
 8006342:	4e0f      	ldr	r6, [pc, #60]	@ (8006380 <sbrk_aligned+0x40>)
 8006344:	460c      	mov	r4, r1
 8006346:	6831      	ldr	r1, [r6, #0]
 8006348:	4605      	mov	r5, r0
 800634a:	b911      	cbnz	r1, 8006352 <sbrk_aligned+0x12>
 800634c:	f000 fa7a 	bl	8006844 <_sbrk_r>
 8006350:	6030      	str	r0, [r6, #0]
 8006352:	4621      	mov	r1, r4
 8006354:	4628      	mov	r0, r5
 8006356:	f000 fa75 	bl	8006844 <_sbrk_r>
 800635a:	1c43      	adds	r3, r0, #1
 800635c:	d103      	bne.n	8006366 <sbrk_aligned+0x26>
 800635e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006362:	4620      	mov	r0, r4
 8006364:	bd70      	pop	{r4, r5, r6, pc}
 8006366:	1cc4      	adds	r4, r0, #3
 8006368:	f024 0403 	bic.w	r4, r4, #3
 800636c:	42a0      	cmp	r0, r4
 800636e:	d0f8      	beq.n	8006362 <sbrk_aligned+0x22>
 8006370:	1a21      	subs	r1, r4, r0
 8006372:	4628      	mov	r0, r5
 8006374:	f000 fa66 	bl	8006844 <_sbrk_r>
 8006378:	3001      	adds	r0, #1
 800637a:	d1f2      	bne.n	8006362 <sbrk_aligned+0x22>
 800637c:	e7ef      	b.n	800635e <sbrk_aligned+0x1e>
 800637e:	bf00      	nop
 8006380:	20000460 	.word	0x20000460

08006384 <_malloc_r>:
 8006384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006388:	1ccd      	adds	r5, r1, #3
 800638a:	f025 0503 	bic.w	r5, r5, #3
 800638e:	3508      	adds	r5, #8
 8006390:	2d0c      	cmp	r5, #12
 8006392:	bf38      	it	cc
 8006394:	250c      	movcc	r5, #12
 8006396:	2d00      	cmp	r5, #0
 8006398:	4606      	mov	r6, r0
 800639a:	db01      	blt.n	80063a0 <_malloc_r+0x1c>
 800639c:	42a9      	cmp	r1, r5
 800639e:	d904      	bls.n	80063aa <_malloc_r+0x26>
 80063a0:	230c      	movs	r3, #12
 80063a2:	6033      	str	r3, [r6, #0]
 80063a4:	2000      	movs	r0, #0
 80063a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006480 <_malloc_r+0xfc>
 80063ae:	f000 f9f5 	bl	800679c <__malloc_lock>
 80063b2:	f8d8 3000 	ldr.w	r3, [r8]
 80063b6:	461c      	mov	r4, r3
 80063b8:	bb44      	cbnz	r4, 800640c <_malloc_r+0x88>
 80063ba:	4629      	mov	r1, r5
 80063bc:	4630      	mov	r0, r6
 80063be:	f7ff ffbf 	bl	8006340 <sbrk_aligned>
 80063c2:	1c43      	adds	r3, r0, #1
 80063c4:	4604      	mov	r4, r0
 80063c6:	d158      	bne.n	800647a <_malloc_r+0xf6>
 80063c8:	f8d8 4000 	ldr.w	r4, [r8]
 80063cc:	4627      	mov	r7, r4
 80063ce:	2f00      	cmp	r7, #0
 80063d0:	d143      	bne.n	800645a <_malloc_r+0xd6>
 80063d2:	2c00      	cmp	r4, #0
 80063d4:	d04b      	beq.n	800646e <_malloc_r+0xea>
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	4639      	mov	r1, r7
 80063da:	4630      	mov	r0, r6
 80063dc:	eb04 0903 	add.w	r9, r4, r3
 80063e0:	f000 fa30 	bl	8006844 <_sbrk_r>
 80063e4:	4581      	cmp	r9, r0
 80063e6:	d142      	bne.n	800646e <_malloc_r+0xea>
 80063e8:	6821      	ldr	r1, [r4, #0]
 80063ea:	1a6d      	subs	r5, r5, r1
 80063ec:	4629      	mov	r1, r5
 80063ee:	4630      	mov	r0, r6
 80063f0:	f7ff ffa6 	bl	8006340 <sbrk_aligned>
 80063f4:	3001      	adds	r0, #1
 80063f6:	d03a      	beq.n	800646e <_malloc_r+0xea>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	442b      	add	r3, r5
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	bb62      	cbnz	r2, 8006460 <_malloc_r+0xdc>
 8006406:	f8c8 7000 	str.w	r7, [r8]
 800640a:	e00f      	b.n	800642c <_malloc_r+0xa8>
 800640c:	6822      	ldr	r2, [r4, #0]
 800640e:	1b52      	subs	r2, r2, r5
 8006410:	d420      	bmi.n	8006454 <_malloc_r+0xd0>
 8006412:	2a0b      	cmp	r2, #11
 8006414:	d917      	bls.n	8006446 <_malloc_r+0xc2>
 8006416:	1961      	adds	r1, r4, r5
 8006418:	42a3      	cmp	r3, r4
 800641a:	6025      	str	r5, [r4, #0]
 800641c:	bf18      	it	ne
 800641e:	6059      	strne	r1, [r3, #4]
 8006420:	6863      	ldr	r3, [r4, #4]
 8006422:	bf08      	it	eq
 8006424:	f8c8 1000 	streq.w	r1, [r8]
 8006428:	5162      	str	r2, [r4, r5]
 800642a:	604b      	str	r3, [r1, #4]
 800642c:	4630      	mov	r0, r6
 800642e:	f000 f9bb 	bl	80067a8 <__malloc_unlock>
 8006432:	f104 000b 	add.w	r0, r4, #11
 8006436:	1d23      	adds	r3, r4, #4
 8006438:	f020 0007 	bic.w	r0, r0, #7
 800643c:	1ac2      	subs	r2, r0, r3
 800643e:	bf1c      	itt	ne
 8006440:	1a1b      	subne	r3, r3, r0
 8006442:	50a3      	strne	r3, [r4, r2]
 8006444:	e7af      	b.n	80063a6 <_malloc_r+0x22>
 8006446:	6862      	ldr	r2, [r4, #4]
 8006448:	42a3      	cmp	r3, r4
 800644a:	bf0c      	ite	eq
 800644c:	f8c8 2000 	streq.w	r2, [r8]
 8006450:	605a      	strne	r2, [r3, #4]
 8006452:	e7eb      	b.n	800642c <_malloc_r+0xa8>
 8006454:	4623      	mov	r3, r4
 8006456:	6864      	ldr	r4, [r4, #4]
 8006458:	e7ae      	b.n	80063b8 <_malloc_r+0x34>
 800645a:	463c      	mov	r4, r7
 800645c:	687f      	ldr	r7, [r7, #4]
 800645e:	e7b6      	b.n	80063ce <_malloc_r+0x4a>
 8006460:	461a      	mov	r2, r3
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	42a3      	cmp	r3, r4
 8006466:	d1fb      	bne.n	8006460 <_malloc_r+0xdc>
 8006468:	2300      	movs	r3, #0
 800646a:	6053      	str	r3, [r2, #4]
 800646c:	e7de      	b.n	800642c <_malloc_r+0xa8>
 800646e:	230c      	movs	r3, #12
 8006470:	6033      	str	r3, [r6, #0]
 8006472:	4630      	mov	r0, r6
 8006474:	f000 f998 	bl	80067a8 <__malloc_unlock>
 8006478:	e794      	b.n	80063a4 <_malloc_r+0x20>
 800647a:	6005      	str	r5, [r0, #0]
 800647c:	e7d6      	b.n	800642c <_malloc_r+0xa8>
 800647e:	bf00      	nop
 8006480:	20000464 	.word	0x20000464

08006484 <_printf_common>:
 8006484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006488:	4616      	mov	r6, r2
 800648a:	4698      	mov	r8, r3
 800648c:	688a      	ldr	r2, [r1, #8]
 800648e:	690b      	ldr	r3, [r1, #16]
 8006490:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006494:	4293      	cmp	r3, r2
 8006496:	bfb8      	it	lt
 8006498:	4613      	movlt	r3, r2
 800649a:	6033      	str	r3, [r6, #0]
 800649c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064a0:	4607      	mov	r7, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	b10a      	cbz	r2, 80064aa <_printf_common+0x26>
 80064a6:	3301      	adds	r3, #1
 80064a8:	6033      	str	r3, [r6, #0]
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	0699      	lsls	r1, r3, #26
 80064ae:	bf42      	ittt	mi
 80064b0:	6833      	ldrmi	r3, [r6, #0]
 80064b2:	3302      	addmi	r3, #2
 80064b4:	6033      	strmi	r3, [r6, #0]
 80064b6:	6825      	ldr	r5, [r4, #0]
 80064b8:	f015 0506 	ands.w	r5, r5, #6
 80064bc:	d106      	bne.n	80064cc <_printf_common+0x48>
 80064be:	f104 0a19 	add.w	sl, r4, #25
 80064c2:	68e3      	ldr	r3, [r4, #12]
 80064c4:	6832      	ldr	r2, [r6, #0]
 80064c6:	1a9b      	subs	r3, r3, r2
 80064c8:	42ab      	cmp	r3, r5
 80064ca:	dc26      	bgt.n	800651a <_printf_common+0x96>
 80064cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064d0:	6822      	ldr	r2, [r4, #0]
 80064d2:	3b00      	subs	r3, #0
 80064d4:	bf18      	it	ne
 80064d6:	2301      	movne	r3, #1
 80064d8:	0692      	lsls	r2, r2, #26
 80064da:	d42b      	bmi.n	8006534 <_printf_common+0xb0>
 80064dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064e0:	4641      	mov	r1, r8
 80064e2:	4638      	mov	r0, r7
 80064e4:	47c8      	blx	r9
 80064e6:	3001      	adds	r0, #1
 80064e8:	d01e      	beq.n	8006528 <_printf_common+0xa4>
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	6922      	ldr	r2, [r4, #16]
 80064ee:	f003 0306 	and.w	r3, r3, #6
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	bf02      	ittt	eq
 80064f6:	68e5      	ldreq	r5, [r4, #12]
 80064f8:	6833      	ldreq	r3, [r6, #0]
 80064fa:	1aed      	subeq	r5, r5, r3
 80064fc:	68a3      	ldr	r3, [r4, #8]
 80064fe:	bf0c      	ite	eq
 8006500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006504:	2500      	movne	r5, #0
 8006506:	4293      	cmp	r3, r2
 8006508:	bfc4      	itt	gt
 800650a:	1a9b      	subgt	r3, r3, r2
 800650c:	18ed      	addgt	r5, r5, r3
 800650e:	2600      	movs	r6, #0
 8006510:	341a      	adds	r4, #26
 8006512:	42b5      	cmp	r5, r6
 8006514:	d11a      	bne.n	800654c <_printf_common+0xc8>
 8006516:	2000      	movs	r0, #0
 8006518:	e008      	b.n	800652c <_printf_common+0xa8>
 800651a:	2301      	movs	r3, #1
 800651c:	4652      	mov	r2, sl
 800651e:	4641      	mov	r1, r8
 8006520:	4638      	mov	r0, r7
 8006522:	47c8      	blx	r9
 8006524:	3001      	adds	r0, #1
 8006526:	d103      	bne.n	8006530 <_printf_common+0xac>
 8006528:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800652c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006530:	3501      	adds	r5, #1
 8006532:	e7c6      	b.n	80064c2 <_printf_common+0x3e>
 8006534:	18e1      	adds	r1, r4, r3
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	2030      	movs	r0, #48	@ 0x30
 800653a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800653e:	4422      	add	r2, r4
 8006540:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006544:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006548:	3302      	adds	r3, #2
 800654a:	e7c7      	b.n	80064dc <_printf_common+0x58>
 800654c:	2301      	movs	r3, #1
 800654e:	4622      	mov	r2, r4
 8006550:	4641      	mov	r1, r8
 8006552:	4638      	mov	r0, r7
 8006554:	47c8      	blx	r9
 8006556:	3001      	adds	r0, #1
 8006558:	d0e6      	beq.n	8006528 <_printf_common+0xa4>
 800655a:	3601      	adds	r6, #1
 800655c:	e7d9      	b.n	8006512 <_printf_common+0x8e>
	...

08006560 <_printf_i>:
 8006560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006564:	7e0f      	ldrb	r7, [r1, #24]
 8006566:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006568:	2f78      	cmp	r7, #120	@ 0x78
 800656a:	4691      	mov	r9, r2
 800656c:	4680      	mov	r8, r0
 800656e:	460c      	mov	r4, r1
 8006570:	469a      	mov	sl, r3
 8006572:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006576:	d807      	bhi.n	8006588 <_printf_i+0x28>
 8006578:	2f62      	cmp	r7, #98	@ 0x62
 800657a:	d80a      	bhi.n	8006592 <_printf_i+0x32>
 800657c:	2f00      	cmp	r7, #0
 800657e:	f000 80d1 	beq.w	8006724 <_printf_i+0x1c4>
 8006582:	2f58      	cmp	r7, #88	@ 0x58
 8006584:	f000 80b8 	beq.w	80066f8 <_printf_i+0x198>
 8006588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800658c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006590:	e03a      	b.n	8006608 <_printf_i+0xa8>
 8006592:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006596:	2b15      	cmp	r3, #21
 8006598:	d8f6      	bhi.n	8006588 <_printf_i+0x28>
 800659a:	a101      	add	r1, pc, #4	@ (adr r1, 80065a0 <_printf_i+0x40>)
 800659c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065a0:	080065f9 	.word	0x080065f9
 80065a4:	0800660d 	.word	0x0800660d
 80065a8:	08006589 	.word	0x08006589
 80065ac:	08006589 	.word	0x08006589
 80065b0:	08006589 	.word	0x08006589
 80065b4:	08006589 	.word	0x08006589
 80065b8:	0800660d 	.word	0x0800660d
 80065bc:	08006589 	.word	0x08006589
 80065c0:	08006589 	.word	0x08006589
 80065c4:	08006589 	.word	0x08006589
 80065c8:	08006589 	.word	0x08006589
 80065cc:	0800670b 	.word	0x0800670b
 80065d0:	08006637 	.word	0x08006637
 80065d4:	080066c5 	.word	0x080066c5
 80065d8:	08006589 	.word	0x08006589
 80065dc:	08006589 	.word	0x08006589
 80065e0:	0800672d 	.word	0x0800672d
 80065e4:	08006589 	.word	0x08006589
 80065e8:	08006637 	.word	0x08006637
 80065ec:	08006589 	.word	0x08006589
 80065f0:	08006589 	.word	0x08006589
 80065f4:	080066cd 	.word	0x080066cd
 80065f8:	6833      	ldr	r3, [r6, #0]
 80065fa:	1d1a      	adds	r2, r3, #4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6032      	str	r2, [r6, #0]
 8006600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006604:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006608:	2301      	movs	r3, #1
 800660a:	e09c      	b.n	8006746 <_printf_i+0x1e6>
 800660c:	6833      	ldr	r3, [r6, #0]
 800660e:	6820      	ldr	r0, [r4, #0]
 8006610:	1d19      	adds	r1, r3, #4
 8006612:	6031      	str	r1, [r6, #0]
 8006614:	0606      	lsls	r6, r0, #24
 8006616:	d501      	bpl.n	800661c <_printf_i+0xbc>
 8006618:	681d      	ldr	r5, [r3, #0]
 800661a:	e003      	b.n	8006624 <_printf_i+0xc4>
 800661c:	0645      	lsls	r5, r0, #25
 800661e:	d5fb      	bpl.n	8006618 <_printf_i+0xb8>
 8006620:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006624:	2d00      	cmp	r5, #0
 8006626:	da03      	bge.n	8006630 <_printf_i+0xd0>
 8006628:	232d      	movs	r3, #45	@ 0x2d
 800662a:	426d      	negs	r5, r5
 800662c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006630:	4858      	ldr	r0, [pc, #352]	@ (8006794 <_printf_i+0x234>)
 8006632:	230a      	movs	r3, #10
 8006634:	e011      	b.n	800665a <_printf_i+0xfa>
 8006636:	6821      	ldr	r1, [r4, #0]
 8006638:	6833      	ldr	r3, [r6, #0]
 800663a:	0608      	lsls	r0, r1, #24
 800663c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006640:	d402      	bmi.n	8006648 <_printf_i+0xe8>
 8006642:	0649      	lsls	r1, r1, #25
 8006644:	bf48      	it	mi
 8006646:	b2ad      	uxthmi	r5, r5
 8006648:	2f6f      	cmp	r7, #111	@ 0x6f
 800664a:	4852      	ldr	r0, [pc, #328]	@ (8006794 <_printf_i+0x234>)
 800664c:	6033      	str	r3, [r6, #0]
 800664e:	bf14      	ite	ne
 8006650:	230a      	movne	r3, #10
 8006652:	2308      	moveq	r3, #8
 8006654:	2100      	movs	r1, #0
 8006656:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800665a:	6866      	ldr	r6, [r4, #4]
 800665c:	60a6      	str	r6, [r4, #8]
 800665e:	2e00      	cmp	r6, #0
 8006660:	db05      	blt.n	800666e <_printf_i+0x10e>
 8006662:	6821      	ldr	r1, [r4, #0]
 8006664:	432e      	orrs	r6, r5
 8006666:	f021 0104 	bic.w	r1, r1, #4
 800666a:	6021      	str	r1, [r4, #0]
 800666c:	d04b      	beq.n	8006706 <_printf_i+0x1a6>
 800666e:	4616      	mov	r6, r2
 8006670:	fbb5 f1f3 	udiv	r1, r5, r3
 8006674:	fb03 5711 	mls	r7, r3, r1, r5
 8006678:	5dc7      	ldrb	r7, [r0, r7]
 800667a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800667e:	462f      	mov	r7, r5
 8006680:	42bb      	cmp	r3, r7
 8006682:	460d      	mov	r5, r1
 8006684:	d9f4      	bls.n	8006670 <_printf_i+0x110>
 8006686:	2b08      	cmp	r3, #8
 8006688:	d10b      	bne.n	80066a2 <_printf_i+0x142>
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	07df      	lsls	r7, r3, #31
 800668e:	d508      	bpl.n	80066a2 <_printf_i+0x142>
 8006690:	6923      	ldr	r3, [r4, #16]
 8006692:	6861      	ldr	r1, [r4, #4]
 8006694:	4299      	cmp	r1, r3
 8006696:	bfde      	ittt	le
 8006698:	2330      	movle	r3, #48	@ 0x30
 800669a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800669e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80066a2:	1b92      	subs	r2, r2, r6
 80066a4:	6122      	str	r2, [r4, #16]
 80066a6:	f8cd a000 	str.w	sl, [sp]
 80066aa:	464b      	mov	r3, r9
 80066ac:	aa03      	add	r2, sp, #12
 80066ae:	4621      	mov	r1, r4
 80066b0:	4640      	mov	r0, r8
 80066b2:	f7ff fee7 	bl	8006484 <_printf_common>
 80066b6:	3001      	adds	r0, #1
 80066b8:	d14a      	bne.n	8006750 <_printf_i+0x1f0>
 80066ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066be:	b004      	add	sp, #16
 80066c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	f043 0320 	orr.w	r3, r3, #32
 80066ca:	6023      	str	r3, [r4, #0]
 80066cc:	4832      	ldr	r0, [pc, #200]	@ (8006798 <_printf_i+0x238>)
 80066ce:	2778      	movs	r7, #120	@ 0x78
 80066d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	6831      	ldr	r1, [r6, #0]
 80066d8:	061f      	lsls	r7, r3, #24
 80066da:	f851 5b04 	ldr.w	r5, [r1], #4
 80066de:	d402      	bmi.n	80066e6 <_printf_i+0x186>
 80066e0:	065f      	lsls	r7, r3, #25
 80066e2:	bf48      	it	mi
 80066e4:	b2ad      	uxthmi	r5, r5
 80066e6:	6031      	str	r1, [r6, #0]
 80066e8:	07d9      	lsls	r1, r3, #31
 80066ea:	bf44      	itt	mi
 80066ec:	f043 0320 	orrmi.w	r3, r3, #32
 80066f0:	6023      	strmi	r3, [r4, #0]
 80066f2:	b11d      	cbz	r5, 80066fc <_printf_i+0x19c>
 80066f4:	2310      	movs	r3, #16
 80066f6:	e7ad      	b.n	8006654 <_printf_i+0xf4>
 80066f8:	4826      	ldr	r0, [pc, #152]	@ (8006794 <_printf_i+0x234>)
 80066fa:	e7e9      	b.n	80066d0 <_printf_i+0x170>
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	f023 0320 	bic.w	r3, r3, #32
 8006702:	6023      	str	r3, [r4, #0]
 8006704:	e7f6      	b.n	80066f4 <_printf_i+0x194>
 8006706:	4616      	mov	r6, r2
 8006708:	e7bd      	b.n	8006686 <_printf_i+0x126>
 800670a:	6833      	ldr	r3, [r6, #0]
 800670c:	6825      	ldr	r5, [r4, #0]
 800670e:	6961      	ldr	r1, [r4, #20]
 8006710:	1d18      	adds	r0, r3, #4
 8006712:	6030      	str	r0, [r6, #0]
 8006714:	062e      	lsls	r6, r5, #24
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	d501      	bpl.n	800671e <_printf_i+0x1be>
 800671a:	6019      	str	r1, [r3, #0]
 800671c:	e002      	b.n	8006724 <_printf_i+0x1c4>
 800671e:	0668      	lsls	r0, r5, #25
 8006720:	d5fb      	bpl.n	800671a <_printf_i+0x1ba>
 8006722:	8019      	strh	r1, [r3, #0]
 8006724:	2300      	movs	r3, #0
 8006726:	6123      	str	r3, [r4, #16]
 8006728:	4616      	mov	r6, r2
 800672a:	e7bc      	b.n	80066a6 <_printf_i+0x146>
 800672c:	6833      	ldr	r3, [r6, #0]
 800672e:	1d1a      	adds	r2, r3, #4
 8006730:	6032      	str	r2, [r6, #0]
 8006732:	681e      	ldr	r6, [r3, #0]
 8006734:	6862      	ldr	r2, [r4, #4]
 8006736:	2100      	movs	r1, #0
 8006738:	4630      	mov	r0, r6
 800673a:	f7f9 fd79 	bl	8000230 <memchr>
 800673e:	b108      	cbz	r0, 8006744 <_printf_i+0x1e4>
 8006740:	1b80      	subs	r0, r0, r6
 8006742:	6060      	str	r0, [r4, #4]
 8006744:	6863      	ldr	r3, [r4, #4]
 8006746:	6123      	str	r3, [r4, #16]
 8006748:	2300      	movs	r3, #0
 800674a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800674e:	e7aa      	b.n	80066a6 <_printf_i+0x146>
 8006750:	6923      	ldr	r3, [r4, #16]
 8006752:	4632      	mov	r2, r6
 8006754:	4649      	mov	r1, r9
 8006756:	4640      	mov	r0, r8
 8006758:	47d0      	blx	sl
 800675a:	3001      	adds	r0, #1
 800675c:	d0ad      	beq.n	80066ba <_printf_i+0x15a>
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	079b      	lsls	r3, r3, #30
 8006762:	d413      	bmi.n	800678c <_printf_i+0x22c>
 8006764:	68e0      	ldr	r0, [r4, #12]
 8006766:	9b03      	ldr	r3, [sp, #12]
 8006768:	4298      	cmp	r0, r3
 800676a:	bfb8      	it	lt
 800676c:	4618      	movlt	r0, r3
 800676e:	e7a6      	b.n	80066be <_printf_i+0x15e>
 8006770:	2301      	movs	r3, #1
 8006772:	4632      	mov	r2, r6
 8006774:	4649      	mov	r1, r9
 8006776:	4640      	mov	r0, r8
 8006778:	47d0      	blx	sl
 800677a:	3001      	adds	r0, #1
 800677c:	d09d      	beq.n	80066ba <_printf_i+0x15a>
 800677e:	3501      	adds	r5, #1
 8006780:	68e3      	ldr	r3, [r4, #12]
 8006782:	9903      	ldr	r1, [sp, #12]
 8006784:	1a5b      	subs	r3, r3, r1
 8006786:	42ab      	cmp	r3, r5
 8006788:	dcf2      	bgt.n	8006770 <_printf_i+0x210>
 800678a:	e7eb      	b.n	8006764 <_printf_i+0x204>
 800678c:	2500      	movs	r5, #0
 800678e:	f104 0619 	add.w	r6, r4, #25
 8006792:	e7f5      	b.n	8006780 <_printf_i+0x220>
 8006794:	08006eee 	.word	0x08006eee
 8006798:	08006eff 	.word	0x08006eff

0800679c <__malloc_lock>:
 800679c:	4801      	ldr	r0, [pc, #4]	@ (80067a4 <__malloc_lock+0x8>)
 800679e:	f7ff bc5f 	b.w	8006060 <__retarget_lock_acquire_recursive>
 80067a2:	bf00      	nop
 80067a4:	2000045c 	.word	0x2000045c

080067a8 <__malloc_unlock>:
 80067a8:	4801      	ldr	r0, [pc, #4]	@ (80067b0 <__malloc_unlock+0x8>)
 80067aa:	f7ff bc5a 	b.w	8006062 <__retarget_lock_release_recursive>
 80067ae:	bf00      	nop
 80067b0:	2000045c 	.word	0x2000045c

080067b4 <_realloc_r>:
 80067b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b8:	4607      	mov	r7, r0
 80067ba:	4614      	mov	r4, r2
 80067bc:	460d      	mov	r5, r1
 80067be:	b921      	cbnz	r1, 80067ca <_realloc_r+0x16>
 80067c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067c4:	4611      	mov	r1, r2
 80067c6:	f7ff bddd 	b.w	8006384 <_malloc_r>
 80067ca:	b92a      	cbnz	r2, 80067d8 <_realloc_r+0x24>
 80067cc:	f000 f84a 	bl	8006864 <_free_r>
 80067d0:	4625      	mov	r5, r4
 80067d2:	4628      	mov	r0, r5
 80067d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067d8:	f000 f88e 	bl	80068f8 <_malloc_usable_size_r>
 80067dc:	4284      	cmp	r4, r0
 80067de:	4606      	mov	r6, r0
 80067e0:	d802      	bhi.n	80067e8 <_realloc_r+0x34>
 80067e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067e6:	d8f4      	bhi.n	80067d2 <_realloc_r+0x1e>
 80067e8:	4621      	mov	r1, r4
 80067ea:	4638      	mov	r0, r7
 80067ec:	f7ff fdca 	bl	8006384 <_malloc_r>
 80067f0:	4680      	mov	r8, r0
 80067f2:	b908      	cbnz	r0, 80067f8 <_realloc_r+0x44>
 80067f4:	4645      	mov	r5, r8
 80067f6:	e7ec      	b.n	80067d2 <_realloc_r+0x1e>
 80067f8:	42b4      	cmp	r4, r6
 80067fa:	4622      	mov	r2, r4
 80067fc:	4629      	mov	r1, r5
 80067fe:	bf28      	it	cs
 8006800:	4632      	movcs	r2, r6
 8006802:	f7ff fc37 	bl	8006074 <memcpy>
 8006806:	4629      	mov	r1, r5
 8006808:	4638      	mov	r0, r7
 800680a:	f000 f82b 	bl	8006864 <_free_r>
 800680e:	e7f1      	b.n	80067f4 <_realloc_r+0x40>

08006810 <memmove>:
 8006810:	4288      	cmp	r0, r1
 8006812:	b510      	push	{r4, lr}
 8006814:	eb01 0402 	add.w	r4, r1, r2
 8006818:	d902      	bls.n	8006820 <memmove+0x10>
 800681a:	4284      	cmp	r4, r0
 800681c:	4623      	mov	r3, r4
 800681e:	d807      	bhi.n	8006830 <memmove+0x20>
 8006820:	1e43      	subs	r3, r0, #1
 8006822:	42a1      	cmp	r1, r4
 8006824:	d008      	beq.n	8006838 <memmove+0x28>
 8006826:	f811 2b01 	ldrb.w	r2, [r1], #1
 800682a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800682e:	e7f8      	b.n	8006822 <memmove+0x12>
 8006830:	4402      	add	r2, r0
 8006832:	4601      	mov	r1, r0
 8006834:	428a      	cmp	r2, r1
 8006836:	d100      	bne.n	800683a <memmove+0x2a>
 8006838:	bd10      	pop	{r4, pc}
 800683a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800683e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006842:	e7f7      	b.n	8006834 <memmove+0x24>

08006844 <_sbrk_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4d06      	ldr	r5, [pc, #24]	@ (8006860 <_sbrk_r+0x1c>)
 8006848:	2300      	movs	r3, #0
 800684a:	4604      	mov	r4, r0
 800684c:	4608      	mov	r0, r1
 800684e:	602b      	str	r3, [r5, #0]
 8006850:	f7fa fd68 	bl	8001324 <_sbrk>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d102      	bne.n	800685e <_sbrk_r+0x1a>
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	b103      	cbz	r3, 800685e <_sbrk_r+0x1a>
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	20000468 	.word	0x20000468

08006864 <_free_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4605      	mov	r5, r0
 8006868:	2900      	cmp	r1, #0
 800686a:	d041      	beq.n	80068f0 <_free_r+0x8c>
 800686c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006870:	1f0c      	subs	r4, r1, #4
 8006872:	2b00      	cmp	r3, #0
 8006874:	bfb8      	it	lt
 8006876:	18e4      	addlt	r4, r4, r3
 8006878:	f7ff ff90 	bl	800679c <__malloc_lock>
 800687c:	4a1d      	ldr	r2, [pc, #116]	@ (80068f4 <_free_r+0x90>)
 800687e:	6813      	ldr	r3, [r2, #0]
 8006880:	b933      	cbnz	r3, 8006890 <_free_r+0x2c>
 8006882:	6063      	str	r3, [r4, #4]
 8006884:	6014      	str	r4, [r2, #0]
 8006886:	4628      	mov	r0, r5
 8006888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800688c:	f7ff bf8c 	b.w	80067a8 <__malloc_unlock>
 8006890:	42a3      	cmp	r3, r4
 8006892:	d908      	bls.n	80068a6 <_free_r+0x42>
 8006894:	6820      	ldr	r0, [r4, #0]
 8006896:	1821      	adds	r1, r4, r0
 8006898:	428b      	cmp	r3, r1
 800689a:	bf01      	itttt	eq
 800689c:	6819      	ldreq	r1, [r3, #0]
 800689e:	685b      	ldreq	r3, [r3, #4]
 80068a0:	1809      	addeq	r1, r1, r0
 80068a2:	6021      	streq	r1, [r4, #0]
 80068a4:	e7ed      	b.n	8006882 <_free_r+0x1e>
 80068a6:	461a      	mov	r2, r3
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	b10b      	cbz	r3, 80068b0 <_free_r+0x4c>
 80068ac:	42a3      	cmp	r3, r4
 80068ae:	d9fa      	bls.n	80068a6 <_free_r+0x42>
 80068b0:	6811      	ldr	r1, [r2, #0]
 80068b2:	1850      	adds	r0, r2, r1
 80068b4:	42a0      	cmp	r0, r4
 80068b6:	d10b      	bne.n	80068d0 <_free_r+0x6c>
 80068b8:	6820      	ldr	r0, [r4, #0]
 80068ba:	4401      	add	r1, r0
 80068bc:	1850      	adds	r0, r2, r1
 80068be:	4283      	cmp	r3, r0
 80068c0:	6011      	str	r1, [r2, #0]
 80068c2:	d1e0      	bne.n	8006886 <_free_r+0x22>
 80068c4:	6818      	ldr	r0, [r3, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	6053      	str	r3, [r2, #4]
 80068ca:	4408      	add	r0, r1
 80068cc:	6010      	str	r0, [r2, #0]
 80068ce:	e7da      	b.n	8006886 <_free_r+0x22>
 80068d0:	d902      	bls.n	80068d8 <_free_r+0x74>
 80068d2:	230c      	movs	r3, #12
 80068d4:	602b      	str	r3, [r5, #0]
 80068d6:	e7d6      	b.n	8006886 <_free_r+0x22>
 80068d8:	6820      	ldr	r0, [r4, #0]
 80068da:	1821      	adds	r1, r4, r0
 80068dc:	428b      	cmp	r3, r1
 80068de:	bf04      	itt	eq
 80068e0:	6819      	ldreq	r1, [r3, #0]
 80068e2:	685b      	ldreq	r3, [r3, #4]
 80068e4:	6063      	str	r3, [r4, #4]
 80068e6:	bf04      	itt	eq
 80068e8:	1809      	addeq	r1, r1, r0
 80068ea:	6021      	streq	r1, [r4, #0]
 80068ec:	6054      	str	r4, [r2, #4]
 80068ee:	e7ca      	b.n	8006886 <_free_r+0x22>
 80068f0:	bd38      	pop	{r3, r4, r5, pc}
 80068f2:	bf00      	nop
 80068f4:	20000464 	.word	0x20000464

080068f8 <_malloc_usable_size_r>:
 80068f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068fc:	1f18      	subs	r0, r3, #4
 80068fe:	2b00      	cmp	r3, #0
 8006900:	bfbc      	itt	lt
 8006902:	580b      	ldrlt	r3, [r1, r0]
 8006904:	18c0      	addlt	r0, r0, r3
 8006906:	4770      	bx	lr

08006908 <_init>:
 8006908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690a:	bf00      	nop
 800690c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690e:	bc08      	pop	{r3}
 8006910:	469e      	mov	lr, r3
 8006912:	4770      	bx	lr

08006914 <_fini>:
 8006914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006916:	bf00      	nop
 8006918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691a:	bc08      	pop	{r3}
 800691c:	469e      	mov	lr, r3
 800691e:	4770      	bx	lr
